# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from user.v1 import identity_service_pb2 as user_dot_v1_dot_identity__service__pb2

GRPC_GENERATED_VERSION = '1.70.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in user/v1/identity_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class IdentityStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.LinkAccount = channel.unary_unary(
                '/code.user.v1.Identity/LinkAccount',
                request_serializer=user_dot_v1_dot_identity__service__pb2.LinkAccountRequest.SerializeToString,
                response_deserializer=user_dot_v1_dot_identity__service__pb2.LinkAccountResponse.FromString,
                _registered_method=True)
        self.UnlinkAccount = channel.unary_unary(
                '/code.user.v1.Identity/UnlinkAccount',
                request_serializer=user_dot_v1_dot_identity__service__pb2.UnlinkAccountRequest.SerializeToString,
                response_deserializer=user_dot_v1_dot_identity__service__pb2.UnlinkAccountResponse.FromString,
                _registered_method=True)
        self.GetUser = channel.unary_unary(
                '/code.user.v1.Identity/GetUser',
                request_serializer=user_dot_v1_dot_identity__service__pb2.GetUserRequest.SerializeToString,
                response_deserializer=user_dot_v1_dot_identity__service__pb2.GetUserResponse.FromString,
                _registered_method=True)
        self.UpdatePreferences = channel.unary_unary(
                '/code.user.v1.Identity/UpdatePreferences',
                request_serializer=user_dot_v1_dot_identity__service__pb2.UpdatePreferencesRequest.SerializeToString,
                response_deserializer=user_dot_v1_dot_identity__service__pb2.UpdatePreferencesResponse.FromString,
                _registered_method=True)
        self.LoginToThirdPartyApp = channel.unary_unary(
                '/code.user.v1.Identity/LoginToThirdPartyApp',
                request_serializer=user_dot_v1_dot_identity__service__pb2.LoginToThirdPartyAppRequest.SerializeToString,
                response_deserializer=user_dot_v1_dot_identity__service__pb2.LoginToThirdPartyAppResponse.FromString,
                _registered_method=True)
        self.GetLoginForThirdPartyApp = channel.unary_unary(
                '/code.user.v1.Identity/GetLoginForThirdPartyApp',
                request_serializer=user_dot_v1_dot_identity__service__pb2.GetLoginForThirdPartyAppRequest.SerializeToString,
                response_deserializer=user_dot_v1_dot_identity__service__pb2.GetLoginForThirdPartyAppResponse.FromString,
                _registered_method=True)
        self.GetTwitterUser = channel.unary_unary(
                '/code.user.v1.Identity/GetTwitterUser',
                request_serializer=user_dot_v1_dot_identity__service__pb2.GetTwitterUserRequest.SerializeToString,
                response_deserializer=user_dot_v1_dot_identity__service__pb2.GetTwitterUserResponse.FromString,
                _registered_method=True)


class IdentityServicer(object):
    """Missing associated documentation comment in .proto file."""

    def LinkAccount(self, request, context):
        """LinkAccount links an owner account to the user identified and authenticated
        by a one-time use token.

        Notably, this RPC has the following side effects:
        * A new user is automatically created if one doesn't exist.
        * Server will create a new data container for at least every unique
        owner account linked to the user.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnlinkAccount(self, request, context):
        """UnlinkAccount removes links from an owner account. It will NOT remove
        existing associations between users, owner accounts and identifying
        features.

        The following associations will remain intact to ensure owner accounts
        can continue to be used with a consistent login experience:
        * the user continues to be associated to existing owner accounts and
        identifying features

        Client can continue mainting their current login session. Their current
        user and data container will remain the same.

        The call is guaranteed to be idempotent. It will not fail if the link is
        already removed by either a previous call to this RPC or by a more recent
        call to LinkAccount. A failure will only occur if the link between a user
        and the owner accout or identifying feature never existed.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUser(self, request, context):
        """GetUser gets user information given a user identifier and an owner account.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdatePreferences(self, request, context):
        """UpdatePreferences updates user preferences.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LoginToThirdPartyApp(self, request, context):
        """LoginToThirdPartyApp logs a user into a third party app for a given intent
        ID. If the original request requires payment, then SubmitIntent must be called.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLoginForThirdPartyApp(self, request, context):
        """GetLoginForThirdPartyApp gets a login for a third party app from an existing
        request. This endpoint supports all paths where login is possible (login on payment,
        raw login, etc.).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTwitterUser(self, request, context):
        """GetTwitterUser gets Twitter user information

        Note 1: This RPC will only return results for Twitter users that have
        accounts linked with Code.

        Note 2: This RPC is heavily cached, and may not reflect real-time Twitter
        information.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_IdentityServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'LinkAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.LinkAccount,
                    request_deserializer=user_dot_v1_dot_identity__service__pb2.LinkAccountRequest.FromString,
                    response_serializer=user_dot_v1_dot_identity__service__pb2.LinkAccountResponse.SerializeToString,
            ),
            'UnlinkAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.UnlinkAccount,
                    request_deserializer=user_dot_v1_dot_identity__service__pb2.UnlinkAccountRequest.FromString,
                    response_serializer=user_dot_v1_dot_identity__service__pb2.UnlinkAccountResponse.SerializeToString,
            ),
            'GetUser': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUser,
                    request_deserializer=user_dot_v1_dot_identity__service__pb2.GetUserRequest.FromString,
                    response_serializer=user_dot_v1_dot_identity__service__pb2.GetUserResponse.SerializeToString,
            ),
            'UpdatePreferences': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdatePreferences,
                    request_deserializer=user_dot_v1_dot_identity__service__pb2.UpdatePreferencesRequest.FromString,
                    response_serializer=user_dot_v1_dot_identity__service__pb2.UpdatePreferencesResponse.SerializeToString,
            ),
            'LoginToThirdPartyApp': grpc.unary_unary_rpc_method_handler(
                    servicer.LoginToThirdPartyApp,
                    request_deserializer=user_dot_v1_dot_identity__service__pb2.LoginToThirdPartyAppRequest.FromString,
                    response_serializer=user_dot_v1_dot_identity__service__pb2.LoginToThirdPartyAppResponse.SerializeToString,
            ),
            'GetLoginForThirdPartyApp': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLoginForThirdPartyApp,
                    request_deserializer=user_dot_v1_dot_identity__service__pb2.GetLoginForThirdPartyAppRequest.FromString,
                    response_serializer=user_dot_v1_dot_identity__service__pb2.GetLoginForThirdPartyAppResponse.SerializeToString,
            ),
            'GetTwitterUser': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTwitterUser,
                    request_deserializer=user_dot_v1_dot_identity__service__pb2.GetTwitterUserRequest.FromString,
                    response_serializer=user_dot_v1_dot_identity__service__pb2.GetTwitterUserResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'code.user.v1.Identity', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('code.user.v1.Identity', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Identity(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def LinkAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/code.user.v1.Identity/LinkAccount',
            user_dot_v1_dot_identity__service__pb2.LinkAccountRequest.SerializeToString,
            user_dot_v1_dot_identity__service__pb2.LinkAccountResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UnlinkAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/code.user.v1.Identity/UnlinkAccount',
            user_dot_v1_dot_identity__service__pb2.UnlinkAccountRequest.SerializeToString,
            user_dot_v1_dot_identity__service__pb2.UnlinkAccountResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/code.user.v1.Identity/GetUser',
            user_dot_v1_dot_identity__service__pb2.GetUserRequest.SerializeToString,
            user_dot_v1_dot_identity__service__pb2.GetUserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdatePreferences(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/code.user.v1.Identity/UpdatePreferences',
            user_dot_v1_dot_identity__service__pb2.UpdatePreferencesRequest.SerializeToString,
            user_dot_v1_dot_identity__service__pb2.UpdatePreferencesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LoginToThirdPartyApp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/code.user.v1.Identity/LoginToThirdPartyApp',
            user_dot_v1_dot_identity__service__pb2.LoginToThirdPartyAppRequest.SerializeToString,
            user_dot_v1_dot_identity__service__pb2.LoginToThirdPartyAppResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetLoginForThirdPartyApp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/code.user.v1.Identity/GetLoginForThirdPartyApp',
            user_dot_v1_dot_identity__service__pb2.GetLoginForThirdPartyAppRequest.SerializeToString,
            user_dot_v1_dot_identity__service__pb2.GetLoginForThirdPartyAppResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTwitterUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/code.user.v1.Identity/GetTwitterUser',
            user_dot_v1_dot_identity__service__pb2.GetTwitterUserRequest.SerializeToString,
            user_dot_v1_dot_identity__service__pb2.GetTwitterUserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
