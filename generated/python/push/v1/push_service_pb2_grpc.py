# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from push.v1 import push_service_pb2 as push_dot_v1_dot_push__service__pb2

GRPC_GENERATED_VERSION = '1.70.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in push/v1/push_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class PushStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddToken = channel.unary_unary(
                '/code.push.v1.Push/AddToken',
                request_serializer=push_dot_v1_dot_push__service__pb2.AddTokenRequest.SerializeToString,
                response_deserializer=push_dot_v1_dot_push__service__pb2.AddTokenResponse.FromString,
                _registered_method=True)
        self.RemoveToken = channel.unary_unary(
                '/code.push.v1.Push/RemoveToken',
                request_serializer=push_dot_v1_dot_push__service__pb2.RemoveTokenRequest.SerializeToString,
                response_deserializer=push_dot_v1_dot_push__service__pb2.RemoveTokenResponse.FromString,
                _registered_method=True)


class PushServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AddToken(self, request, context):
        """AddToken stores a push token in a data container. The call is idempotent
        and adding an existing valid token will not fail. Token types will be
        validated against the user agent and any mismatches will result in an
        INVALID_ARGUMENT status error.

        The token will be unlinked from any and all other accounts that it was
        previously bound to.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveToken(self, request, context):
        """RemoveToken removes the provided push token from the account.

        The provided token must be bound to the current account.
        Otherwise, the RPC will succeed with without removal.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PushServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddToken': grpc.unary_unary_rpc_method_handler(
                    servicer.AddToken,
                    request_deserializer=push_dot_v1_dot_push__service__pb2.AddTokenRequest.FromString,
                    response_serializer=push_dot_v1_dot_push__service__pb2.AddTokenResponse.SerializeToString,
            ),
            'RemoveToken': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveToken,
                    request_deserializer=push_dot_v1_dot_push__service__pb2.RemoveTokenRequest.FromString,
                    response_serializer=push_dot_v1_dot_push__service__pb2.RemoveTokenResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'code.push.v1.Push', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('code.push.v1.Push', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Push(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AddToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/code.push.v1.Push/AddToken',
            push_dot_v1_dot_push__service__pb2.AddTokenRequest.SerializeToString,
            push_dot_v1_dot_push__service__pb2.AddTokenResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RemoveToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/code.push.v1.Push/RemoveToken',
            push_dot_v1_dot_push__service__pb2.RemoveTokenRequest.SerializeToString,
            push_dot_v1_dot_push__service__pb2.RemoveTokenResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
