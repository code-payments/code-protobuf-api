# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from micropayment.v1 import micro_payment_service_pb2 as micropayment_dot_v1_dot_micro__payment__service__pb2

GRPC_GENERATED_VERSION = '1.70.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in micropayment/v1/micro_payment_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class MicroPaymentStub(object):
    """todo: Migrate this to a generic "request" service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetStatus = channel.unary_unary(
                '/code.micropayment.v1.MicroPayment/GetStatus',
                request_serializer=micropayment_dot_v1_dot_micro__payment__service__pb2.GetStatusRequest.SerializeToString,
                response_deserializer=micropayment_dot_v1_dot_micro__payment__service__pb2.GetStatusResponse.FromString,
                _registered_method=True)
        self.RegisterWebhook = channel.unary_unary(
                '/code.micropayment.v1.MicroPayment/RegisterWebhook',
                request_serializer=micropayment_dot_v1_dot_micro__payment__service__pb2.RegisterWebhookRequest.SerializeToString,
                response_deserializer=micropayment_dot_v1_dot_micro__payment__service__pb2.RegisterWebhookResponse.FromString,
                _registered_method=True)
        self.Codify = channel.unary_unary(
                '/code.micropayment.v1.MicroPayment/Codify',
                request_serializer=micropayment_dot_v1_dot_micro__payment__service__pb2.CodifyRequest.SerializeToString,
                response_deserializer=micropayment_dot_v1_dot_micro__payment__service__pb2.CodifyResponse.FromString,
                _registered_method=True)
        self.GetPathMetadata = channel.unary_unary(
                '/code.micropayment.v1.MicroPayment/GetPathMetadata',
                request_serializer=micropayment_dot_v1_dot_micro__payment__service__pb2.GetPathMetadataRequest.SerializeToString,
                response_deserializer=micropayment_dot_v1_dot_micro__payment__service__pb2.GetPathMetadataResponse.FromString,
                _registered_method=True)


class MicroPaymentServicer(object):
    """todo: Migrate this to a generic "request" service
    """

    def GetStatus(self, request, context):
        """GetStatus gets basic request status
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterWebhook(self, request, context):
        """RegisterWebhook registers a webhook for a request

        todo: Once Kik codes can encode the entire payment request details, we can
        remove the messaging service component and have a Create RPC that
        reserves the intent ID with payment details, plus registers the webhook
        at the same time. Until that's possible, we're stuck with two RPC calls.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Codify(self, request, context):
        """Codify adds a trial micro paywall to any URL
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPathMetadata(self, request, context):
        """GetPathMetadata gets codified website metadata for a given path

        Important Note: This RPC's current implementation is insecure and
        it's sole design is to enable PoC and trials.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MicroPaymentServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStatus,
                    request_deserializer=micropayment_dot_v1_dot_micro__payment__service__pb2.GetStatusRequest.FromString,
                    response_serializer=micropayment_dot_v1_dot_micro__payment__service__pb2.GetStatusResponse.SerializeToString,
            ),
            'RegisterWebhook': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterWebhook,
                    request_deserializer=micropayment_dot_v1_dot_micro__payment__service__pb2.RegisterWebhookRequest.FromString,
                    response_serializer=micropayment_dot_v1_dot_micro__payment__service__pb2.RegisterWebhookResponse.SerializeToString,
            ),
            'Codify': grpc.unary_unary_rpc_method_handler(
                    servicer.Codify,
                    request_deserializer=micropayment_dot_v1_dot_micro__payment__service__pb2.CodifyRequest.FromString,
                    response_serializer=micropayment_dot_v1_dot_micro__payment__service__pb2.CodifyResponse.SerializeToString,
            ),
            'GetPathMetadata': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPathMetadata,
                    request_deserializer=micropayment_dot_v1_dot_micro__payment__service__pb2.GetPathMetadataRequest.FromString,
                    response_serializer=micropayment_dot_v1_dot_micro__payment__service__pb2.GetPathMetadataResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'code.micropayment.v1.MicroPayment', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('code.micropayment.v1.MicroPayment', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MicroPayment(object):
    """todo: Migrate this to a generic "request" service
    """

    @staticmethod
    def GetStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/code.micropayment.v1.MicroPayment/GetStatus',
            micropayment_dot_v1_dot_micro__payment__service__pb2.GetStatusRequest.SerializeToString,
            micropayment_dot_v1_dot_micro__payment__service__pb2.GetStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RegisterWebhook(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/code.micropayment.v1.MicroPayment/RegisterWebhook',
            micropayment_dot_v1_dot_micro__payment__service__pb2.RegisterWebhookRequest.SerializeToString,
            micropayment_dot_v1_dot_micro__payment__service__pb2.RegisterWebhookResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Codify(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/code.micropayment.v1.MicroPayment/Codify',
            micropayment_dot_v1_dot_micro__payment__service__pb2.CodifyRequest.SerializeToString,
            micropayment_dot_v1_dot_micro__payment__service__pb2.CodifyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPathMetadata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/code.micropayment.v1.MicroPayment/GetPathMetadata',
            micropayment_dot_v1_dot_micro__payment__service__pb2.GetPathMetadataRequest.SerializeToString,
            micropayment_dot_v1_dot_micro__payment__service__pb2.GetPathMetadataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
