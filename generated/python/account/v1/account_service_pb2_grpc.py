# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from account.v1 import account_service_pb2 as account_dot_v1_dot_account__service__pb2

GRPC_GENERATED_VERSION = '1.70.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in account/v1/account_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class AccountStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.IsCodeAccount = channel.unary_unary(
                '/code.account.v1.Account/IsCodeAccount',
                request_serializer=account_dot_v1_dot_account__service__pb2.IsCodeAccountRequest.SerializeToString,
                response_deserializer=account_dot_v1_dot_account__service__pb2.IsCodeAccountResponse.FromString,
                _registered_method=True)
        self.GetTokenAccountInfos = channel.unary_unary(
                '/code.account.v1.Account/GetTokenAccountInfos',
                request_serializer=account_dot_v1_dot_account__service__pb2.GetTokenAccountInfosRequest.SerializeToString,
                response_deserializer=account_dot_v1_dot_account__service__pb2.GetTokenAccountInfosResponse.FromString,
                _registered_method=True)
        self.LinkAdditionalAccounts = channel.unary_unary(
                '/code.account.v1.Account/LinkAdditionalAccounts',
                request_serializer=account_dot_v1_dot_account__service__pb2.LinkAdditionalAccountsRequest.SerializeToString,
                response_deserializer=account_dot_v1_dot_account__service__pb2.LinkAdditionalAccountsResponse.FromString,
                _registered_method=True)


class AccountServicer(object):
    """Missing associated documentation comment in .proto file."""

    def IsCodeAccount(self, request, context):
        """IsCodeAccount returns whether an owner account is a Code account. This hints
        to the client whether the account can be logged in, used for making payments,
        etc.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTokenAccountInfos(self, request, context):
        """GetTokenAccountInfos returns token account metadata relevant to the Code owner
        account.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LinkAdditionalAccounts(self, request, context):
        """LinkAdditionalAccounts allows a client to declare additional accounts to
        be tracked and used within Code. The accounts declared in this RPC are not
        managed by Code (ie. not a Timelock account), created externally and cannot
        be linked automatically (ie. authority derived off user 12 words).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AccountServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'IsCodeAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.IsCodeAccount,
                    request_deserializer=account_dot_v1_dot_account__service__pb2.IsCodeAccountRequest.FromString,
                    response_serializer=account_dot_v1_dot_account__service__pb2.IsCodeAccountResponse.SerializeToString,
            ),
            'GetTokenAccountInfos': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTokenAccountInfos,
                    request_deserializer=account_dot_v1_dot_account__service__pb2.GetTokenAccountInfosRequest.FromString,
                    response_serializer=account_dot_v1_dot_account__service__pb2.GetTokenAccountInfosResponse.SerializeToString,
            ),
            'LinkAdditionalAccounts': grpc.unary_unary_rpc_method_handler(
                    servicer.LinkAdditionalAccounts,
                    request_deserializer=account_dot_v1_dot_account__service__pb2.LinkAdditionalAccountsRequest.FromString,
                    response_serializer=account_dot_v1_dot_account__service__pb2.LinkAdditionalAccountsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'code.account.v1.Account', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('code.account.v1.Account', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Account(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def IsCodeAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/code.account.v1.Account/IsCodeAccount',
            account_dot_v1_dot_account__service__pb2.IsCodeAccountRequest.SerializeToString,
            account_dot_v1_dot_account__service__pb2.IsCodeAccountResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTokenAccountInfos(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/code.account.v1.Account/GetTokenAccountInfos',
            account_dot_v1_dot_account__service__pb2.GetTokenAccountInfosRequest.SerializeToString,
            account_dot_v1_dot_account__service__pb2.GetTokenAccountInfosResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LinkAdditionalAccounts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/code.account.v1.Account/LinkAdditionalAccounts',
            account_dot_v1_dot_account__service__pb2.LinkAdditionalAccountsRequest.SerializeToString,
            account_dot_v1_dot_account__service__pb2.LinkAdditionalAccountsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
