# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from transaction.v2 import transaction_service_pb2 as transaction_dot_v2_dot_transaction__service__pb2

GRPC_GENERATED_VERSION = '1.70.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in transaction/v2/transaction_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class TransactionStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SubmitIntent = channel.stream_stream(
                '/code.transaction.v2.Transaction/SubmitIntent',
                request_serializer=transaction_dot_v2_dot_transaction__service__pb2.SubmitIntentRequest.SerializeToString,
                response_deserializer=transaction_dot_v2_dot_transaction__service__pb2.SubmitIntentResponse.FromString,
                _registered_method=True)
        self.GetIntentMetadata = channel.unary_unary(
                '/code.transaction.v2.Transaction/GetIntentMetadata',
                request_serializer=transaction_dot_v2_dot_transaction__service__pb2.GetIntentMetadataRequest.SerializeToString,
                response_deserializer=transaction_dot_v2_dot_transaction__service__pb2.GetIntentMetadataResponse.FromString,
                _registered_method=True)
        self.GetPrivacyUpgradeStatus = channel.unary_unary(
                '/code.transaction.v2.Transaction/GetPrivacyUpgradeStatus',
                request_serializer=transaction_dot_v2_dot_transaction__service__pb2.GetPrivacyUpgradeStatusRequest.SerializeToString,
                response_deserializer=transaction_dot_v2_dot_transaction__service__pb2.GetPrivacyUpgradeStatusResponse.FromString,
                _registered_method=True)
        self.GetPrioritizedIntentsForPrivacyUpgrade = channel.unary_unary(
                '/code.transaction.v2.Transaction/GetPrioritizedIntentsForPrivacyUpgrade',
                request_serializer=transaction_dot_v2_dot_transaction__service__pb2.GetPrioritizedIntentsForPrivacyUpgradeRequest.SerializeToString,
                response_deserializer=transaction_dot_v2_dot_transaction__service__pb2.GetPrioritizedIntentsForPrivacyUpgradeResponse.FromString,
                _registered_method=True)
        self.GetLimits = channel.unary_unary(
                '/code.transaction.v2.Transaction/GetLimits',
                request_serializer=transaction_dot_v2_dot_transaction__service__pb2.GetLimitsRequest.SerializeToString,
                response_deserializer=transaction_dot_v2_dot_transaction__service__pb2.GetLimitsResponse.FromString,
                _registered_method=True)
        self.GetPaymentHistory = channel.unary_unary(
                '/code.transaction.v2.Transaction/GetPaymentHistory',
                request_serializer=transaction_dot_v2_dot_transaction__service__pb2.GetPaymentHistoryRequest.SerializeToString,
                response_deserializer=transaction_dot_v2_dot_transaction__service__pb2.GetPaymentHistoryResponse.FromString,
                _registered_method=True)
        self.CanWithdrawToAccount = channel.unary_unary(
                '/code.transaction.v2.Transaction/CanWithdrawToAccount',
                request_serializer=transaction_dot_v2_dot_transaction__service__pb2.CanWithdrawToAccountRequest.SerializeToString,
                response_deserializer=transaction_dot_v2_dot_transaction__service__pb2.CanWithdrawToAccountResponse.FromString,
                _registered_method=True)
        self.Airdrop = channel.unary_unary(
                '/code.transaction.v2.Transaction/Airdrop',
                request_serializer=transaction_dot_v2_dot_transaction__service__pb2.AirdropRequest.SerializeToString,
                response_deserializer=transaction_dot_v2_dot_transaction__service__pb2.AirdropResponse.FromString,
                _registered_method=True)
        self.Swap = channel.stream_stream(
                '/code.transaction.v2.Transaction/Swap',
                request_serializer=transaction_dot_v2_dot_transaction__service__pb2.SwapRequest.SerializeToString,
                response_deserializer=transaction_dot_v2_dot_transaction__service__pb2.SwapResponse.FromString,
                _registered_method=True)
        self.DeclareFiatOnrampPurchaseAttempt = channel.unary_unary(
                '/code.transaction.v2.Transaction/DeclareFiatOnrampPurchaseAttempt',
                request_serializer=transaction_dot_v2_dot_transaction__service__pb2.DeclareFiatOnrampPurchaseAttemptRequest.SerializeToString,
                response_deserializer=transaction_dot_v2_dot_transaction__service__pb2.DeclareFiatOnrampPurchaseAttemptResponse.FromString,
                _registered_method=True)


class TransactionServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SubmitIntent(self, request_iterator, context):
        """SubmitIntent is the mechanism for client and server to agree upon a set of
        client actions to execute on the blockchain using the Code sequencer for
        fulfillment.

        Transactions are never exchanged between client and server. Instead, the
        required accounts and arguments for instructions known to each actor are
        exchanged to allow independent and local transaction construction.

        Client and server are expected to fully validate the intent. Proofs will
        be provided for any parameter requiring one. Signatures should only be
        generated after approval of all transactions.

        This RPC is not a traditional streaming endpoint. It bundles two unary calls
        to enable DB-level transaction semantics.

        The high-level happy path flow for the RPC is as follows:
        1.  Client initiates a stream and sends SubmitIntentRequest.SubmitActions
        2.  Server validates the intent, its actions and metadata
        3a. If there are transactions requiring the user's signature, then server
        returns SubmitIntentResponse.ServerParameters
        3b. Otherwise, server returns SubmitIntentResponse.Success and closes the
        stream
        4.  For each transaction requiring the user's signature, the client locally
        constructs it, performs validation and collects the signature
        5.  Client sends SubmitIntentRequest.SubmitSignatures with the signature
        list generated from 4
        6.  Server validates all signatures are submitted and are the expected values
        using locally constructed transactions.
        7.  Server returns SubmitIntentResponse.Success and closes the stream
        In the error case:
        * Server will return SubmitIntentResponse.Error and close the stream
        * Client will close the stream
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetIntentMetadata(self, request, context):
        """GetIntentMetadata gets basic metadata on an intent. It can also be used
        to fetch the status of submitted intents. Metadata exists only for intents
        that have been successfully submitted.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPrivacyUpgradeStatus(self, request, context):
        """GetPrivacyUpgradeStatus gets the status of a private transaction and the
        ability to upgrade it to permanent privacy.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPrioritizedIntentsForPrivacyUpgrade(self, request, context):
        """GetPrioritizedIntentsForPrivacyUpgrade allows clients to get private
        intent actions that can be upgraded in a secure and verifiable manner.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLimits(self, request, context):
        """GetLimits gets limits for money moving intents for an owner account in an
        identity-aware manner
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPaymentHistory(self, request, context):
        """GetPaymentHistory gets an owner account's payment history inferred from intents

        Deprecated: Payment history has migrated to chats
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CanWithdrawToAccount(self, request, context):
        """CanWithdrawToAccount provides hints to clients for submitting withdraw intents.
        The RPC indicates if a withdrawal is possible, and how it should be performed.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Airdrop(self, request, context):
        """Airdrop airdrops Kin to the requesting account
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Swap(self, request_iterator, context):
        """Swap performs an on-chain swap. The high-level flow mirrors SubmitIntent
        closely. However, due to the time-sensitive nature and unreliability of
        swaps, they do not fit within the broader intent system. This results in
        a few key differences:
        * Transactions are submitted on a best-effort basis outside of the Code
        Sequencer within the RPC handler
        * Balance changes are applied after the transaction has finalized
        * Transactions use recent blockhashes over a nonce

        The transaction will have the following instruction format:
        1. ComputeBudget::SetComputeUnitLimit
        2. ComputeBudget::SetComputeUnitPrice
        3. SwapValidator::PreSwap
        4. Dynamic swap instruction
        5. SwapValidator::PostSwap

        Note: Currently limited to swapping USDC to Kin.
        Note: Kin is deposited into the primary account.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeclareFiatOnrampPurchaseAttempt(self, request, context):
        """DeclareFiatOnrampPurchaseAttempt is called whenever a user attempts to use a fiat
        onramp to purchase crypto for use in Code.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TransactionServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SubmitIntent': grpc.stream_stream_rpc_method_handler(
                    servicer.SubmitIntent,
                    request_deserializer=transaction_dot_v2_dot_transaction__service__pb2.SubmitIntentRequest.FromString,
                    response_serializer=transaction_dot_v2_dot_transaction__service__pb2.SubmitIntentResponse.SerializeToString,
            ),
            'GetIntentMetadata': grpc.unary_unary_rpc_method_handler(
                    servicer.GetIntentMetadata,
                    request_deserializer=transaction_dot_v2_dot_transaction__service__pb2.GetIntentMetadataRequest.FromString,
                    response_serializer=transaction_dot_v2_dot_transaction__service__pb2.GetIntentMetadataResponse.SerializeToString,
            ),
            'GetPrivacyUpgradeStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPrivacyUpgradeStatus,
                    request_deserializer=transaction_dot_v2_dot_transaction__service__pb2.GetPrivacyUpgradeStatusRequest.FromString,
                    response_serializer=transaction_dot_v2_dot_transaction__service__pb2.GetPrivacyUpgradeStatusResponse.SerializeToString,
            ),
            'GetPrioritizedIntentsForPrivacyUpgrade': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPrioritizedIntentsForPrivacyUpgrade,
                    request_deserializer=transaction_dot_v2_dot_transaction__service__pb2.GetPrioritizedIntentsForPrivacyUpgradeRequest.FromString,
                    response_serializer=transaction_dot_v2_dot_transaction__service__pb2.GetPrioritizedIntentsForPrivacyUpgradeResponse.SerializeToString,
            ),
            'GetLimits': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLimits,
                    request_deserializer=transaction_dot_v2_dot_transaction__service__pb2.GetLimitsRequest.FromString,
                    response_serializer=transaction_dot_v2_dot_transaction__service__pb2.GetLimitsResponse.SerializeToString,
            ),
            'GetPaymentHistory': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPaymentHistory,
                    request_deserializer=transaction_dot_v2_dot_transaction__service__pb2.GetPaymentHistoryRequest.FromString,
                    response_serializer=transaction_dot_v2_dot_transaction__service__pb2.GetPaymentHistoryResponse.SerializeToString,
            ),
            'CanWithdrawToAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.CanWithdrawToAccount,
                    request_deserializer=transaction_dot_v2_dot_transaction__service__pb2.CanWithdrawToAccountRequest.FromString,
                    response_serializer=transaction_dot_v2_dot_transaction__service__pb2.CanWithdrawToAccountResponse.SerializeToString,
            ),
            'Airdrop': grpc.unary_unary_rpc_method_handler(
                    servicer.Airdrop,
                    request_deserializer=transaction_dot_v2_dot_transaction__service__pb2.AirdropRequest.FromString,
                    response_serializer=transaction_dot_v2_dot_transaction__service__pb2.AirdropResponse.SerializeToString,
            ),
            'Swap': grpc.stream_stream_rpc_method_handler(
                    servicer.Swap,
                    request_deserializer=transaction_dot_v2_dot_transaction__service__pb2.SwapRequest.FromString,
                    response_serializer=transaction_dot_v2_dot_transaction__service__pb2.SwapResponse.SerializeToString,
            ),
            'DeclareFiatOnrampPurchaseAttempt': grpc.unary_unary_rpc_method_handler(
                    servicer.DeclareFiatOnrampPurchaseAttempt,
                    request_deserializer=transaction_dot_v2_dot_transaction__service__pb2.DeclareFiatOnrampPurchaseAttemptRequest.FromString,
                    response_serializer=transaction_dot_v2_dot_transaction__service__pb2.DeclareFiatOnrampPurchaseAttemptResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'code.transaction.v2.Transaction', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('code.transaction.v2.Transaction', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Transaction(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SubmitIntent(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/code.transaction.v2.Transaction/SubmitIntent',
            transaction_dot_v2_dot_transaction__service__pb2.SubmitIntentRequest.SerializeToString,
            transaction_dot_v2_dot_transaction__service__pb2.SubmitIntentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetIntentMetadata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/code.transaction.v2.Transaction/GetIntentMetadata',
            transaction_dot_v2_dot_transaction__service__pb2.GetIntentMetadataRequest.SerializeToString,
            transaction_dot_v2_dot_transaction__service__pb2.GetIntentMetadataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPrivacyUpgradeStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/code.transaction.v2.Transaction/GetPrivacyUpgradeStatus',
            transaction_dot_v2_dot_transaction__service__pb2.GetPrivacyUpgradeStatusRequest.SerializeToString,
            transaction_dot_v2_dot_transaction__service__pb2.GetPrivacyUpgradeStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPrioritizedIntentsForPrivacyUpgrade(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/code.transaction.v2.Transaction/GetPrioritizedIntentsForPrivacyUpgrade',
            transaction_dot_v2_dot_transaction__service__pb2.GetPrioritizedIntentsForPrivacyUpgradeRequest.SerializeToString,
            transaction_dot_v2_dot_transaction__service__pb2.GetPrioritizedIntentsForPrivacyUpgradeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetLimits(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/code.transaction.v2.Transaction/GetLimits',
            transaction_dot_v2_dot_transaction__service__pb2.GetLimitsRequest.SerializeToString,
            transaction_dot_v2_dot_transaction__service__pb2.GetLimitsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPaymentHistory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/code.transaction.v2.Transaction/GetPaymentHistory',
            transaction_dot_v2_dot_transaction__service__pb2.GetPaymentHistoryRequest.SerializeToString,
            transaction_dot_v2_dot_transaction__service__pb2.GetPaymentHistoryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CanWithdrawToAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/code.transaction.v2.Transaction/CanWithdrawToAccount',
            transaction_dot_v2_dot_transaction__service__pb2.CanWithdrawToAccountRequest.SerializeToString,
            transaction_dot_v2_dot_transaction__service__pb2.CanWithdrawToAccountResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Airdrop(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/code.transaction.v2.Transaction/Airdrop',
            transaction_dot_v2_dot_transaction__service__pb2.AirdropRequest.SerializeToString,
            transaction_dot_v2_dot_transaction__service__pb2.AirdropResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Swap(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/code.transaction.v2.Transaction/Swap',
            transaction_dot_v2_dot_transaction__service__pb2.SwapRequest.SerializeToString,
            transaction_dot_v2_dot_transaction__service__pb2.SwapResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeclareFiatOnrampPurchaseAttempt(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/code.transaction.v2.Transaction/DeclareFiatOnrampPurchaseAttempt',
            transaction_dot_v2_dot_transaction__service__pb2.DeclareFiatOnrampPurchaseAttemptRequest.SerializeToString,
            transaction_dot_v2_dot_transaction__service__pb2.DeclareFiatOnrampPurchaseAttemptResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
