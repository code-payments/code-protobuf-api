<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: micropayment/v1/micro_payment_service.proto

namespace Code\Micropayment\V1\CodifyResponse;

use UnexpectedValueException;

/**
 * Protobuf type <code>code.micropayment.v1.CodifyResponse.Result</code>
 */
class Result
{
    /**
     * Generated from protobuf enum <code>OK = 0;</code>
     */
    const OK = 0;
    /**
     * The URL to Codify is invalid
     *
     * Generated from protobuf enum <code>INVALID_URL = 1;</code>
     */
    const INVALID_URL = 1;
    /**
     * The primary account is invalid
     *
     * Generated from protobuf enum <code>INVALID_ACCOUNT = 2;</code>
     */
    const INVALID_ACCOUNT = 2;
    /**
     * The currency isn't supported for micro payments
     *
     * Generated from protobuf enum <code>UNSUPPORTED_CURRENCY = 3;</code>
     */
    const UNSUPPORTED_CURRENCY = 3;
    /**
     * The payment amount exceeds the minimum/maximum allowed amount
     *
     * Generated from protobuf enum <code>NATIVE_AMOUNT_EXCEEDS_LIMIT = 4;</code>
     */
    const NATIVE_AMOUNT_EXCEEDS_LIMIT = 4;

    private static $valueToName = [
        self::OK => 'OK',
        self::INVALID_URL => 'INVALID_URL',
        self::INVALID_ACCOUNT => 'INVALID_ACCOUNT',
        self::UNSUPPORTED_CURRENCY => 'UNSUPPORTED_CURRENCY',
        self::NATIVE_AMOUNT_EXCEEDS_LIMIT => 'NATIVE_AMOUNT_EXCEEDS_LIMIT',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Result::class, \Code\Micropayment\V1\CodifyResponse_Result::class);

