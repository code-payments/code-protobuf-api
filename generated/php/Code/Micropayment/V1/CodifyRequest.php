<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: micropayment/v1/micro_payment_service.proto

namespace Code\Micropayment\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>code.micropayment.v1.CodifyRequest</code>
 */
class CodifyRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * The URL to Codify
     *
     * Generated from protobuf field <code>string url = 1 [(.validate.rules) = {</code>
     */
    protected $url = '';
    /**
     * ISO 4217 alpha-3 currency code the payment should be made in
     *
     * Generated from protobuf field <code>string currency = 2 [(.validate.rules) = {</code>
     */
    protected $currency = '';
    /**
     * The amount that should be paid in the native currency
     *
     * Generated from protobuf field <code>double native_amount = 3 [(.validate.rules) = {</code>
     */
    protected $native_amount = 0.0;
    /**
     * The verified owner account public key
     *
     * Generated from protobuf field <code>.code.common.v1.SolanaAccountId owner_account = 4 [(.validate.rules) = {</code>
     */
    protected $owner_account = null;
    /**
     * The primary account public key where payment will be sent
     *
     * Generated from protobuf field <code>.code.common.v1.SolanaAccountId primary_account = 5 [(.validate.rules) = {</code>
     */
    protected $primary_account = null;
    /**
     * The signature is of serialize(CodifyRequest) without this field set using the
     * private key of the owner account. This provides an authentication mechanism
     * to the RPC and can be used to validate payment details.
     *
     * Generated from protobuf field <code>.code.common.v1.Signature signature = 6 [(.validate.rules) = {</code>
     */
    protected $signature = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $url
     *           The URL to Codify
     *     @type string $currency
     *           ISO 4217 alpha-3 currency code the payment should be made in
     *     @type float $native_amount
     *           The amount that should be paid in the native currency
     *     @type \Code\Common\V1\SolanaAccountId $owner_account
     *           The verified owner account public key
     *     @type \Code\Common\V1\SolanaAccountId $primary_account
     *           The primary account public key where payment will be sent
     *     @type \Code\Common\V1\Signature $signature
     *           The signature is of serialize(CodifyRequest) without this field set using the
     *           private key of the owner account. This provides an authentication mechanism
     *           to the RPC and can be used to validate payment details.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Micropayment\V1\MicroPaymentService::initOnce();
        parent::__construct($data);
    }

    /**
     * The URL to Codify
     *
     * Generated from protobuf field <code>string url = 1 [(.validate.rules) = {</code>
     * @return string
     */
    public function getUrl()
    {
        return $this->url;
    }

    /**
     * The URL to Codify
     *
     * Generated from protobuf field <code>string url = 1 [(.validate.rules) = {</code>
     * @param string $var
     * @return $this
     */
    public function setUrl($var)
    {
        GPBUtil::checkString($var, True);
        $this->url = $var;

        return $this;
    }

    /**
     * ISO 4217 alpha-3 currency code the payment should be made in
     *
     * Generated from protobuf field <code>string currency = 2 [(.validate.rules) = {</code>
     * @return string
     */
    public function getCurrency()
    {
        return $this->currency;
    }

    /**
     * ISO 4217 alpha-3 currency code the payment should be made in
     *
     * Generated from protobuf field <code>string currency = 2 [(.validate.rules) = {</code>
     * @param string $var
     * @return $this
     */
    public function setCurrency($var)
    {
        GPBUtil::checkString($var, True);
        $this->currency = $var;

        return $this;
    }

    /**
     * The amount that should be paid in the native currency
     *
     * Generated from protobuf field <code>double native_amount = 3 [(.validate.rules) = {</code>
     * @return float
     */
    public function getNativeAmount()
    {
        return $this->native_amount;
    }

    /**
     * The amount that should be paid in the native currency
     *
     * Generated from protobuf field <code>double native_amount = 3 [(.validate.rules) = {</code>
     * @param float $var
     * @return $this
     */
    public function setNativeAmount($var)
    {
        GPBUtil::checkDouble($var);
        $this->native_amount = $var;

        return $this;
    }

    /**
     * The verified owner account public key
     *
     * Generated from protobuf field <code>.code.common.v1.SolanaAccountId owner_account = 4 [(.validate.rules) = {</code>
     * @return \Code\Common\V1\SolanaAccountId|null
     */
    public function getOwnerAccount()
    {
        return $this->owner_account;
    }

    public function hasOwnerAccount()
    {
        return isset($this->owner_account);
    }

    public function clearOwnerAccount()
    {
        unset($this->owner_account);
    }

    /**
     * The verified owner account public key
     *
     * Generated from protobuf field <code>.code.common.v1.SolanaAccountId owner_account = 4 [(.validate.rules) = {</code>
     * @param \Code\Common\V1\SolanaAccountId $var
     * @return $this
     */
    public function setOwnerAccount($var)
    {
        GPBUtil::checkMessage($var, \Code\Common\V1\SolanaAccountId::class);
        $this->owner_account = $var;

        return $this;
    }

    /**
     * The primary account public key where payment will be sent
     *
     * Generated from protobuf field <code>.code.common.v1.SolanaAccountId primary_account = 5 [(.validate.rules) = {</code>
     * @return \Code\Common\V1\SolanaAccountId|null
     */
    public function getPrimaryAccount()
    {
        return $this->primary_account;
    }

    public function hasPrimaryAccount()
    {
        return isset($this->primary_account);
    }

    public function clearPrimaryAccount()
    {
        unset($this->primary_account);
    }

    /**
     * The primary account public key where payment will be sent
     *
     * Generated from protobuf field <code>.code.common.v1.SolanaAccountId primary_account = 5 [(.validate.rules) = {</code>
     * @param \Code\Common\V1\SolanaAccountId $var
     * @return $this
     */
    public function setPrimaryAccount($var)
    {
        GPBUtil::checkMessage($var, \Code\Common\V1\SolanaAccountId::class);
        $this->primary_account = $var;

        return $this;
    }

    /**
     * The signature is of serialize(CodifyRequest) without this field set using the
     * private key of the owner account. This provides an authentication mechanism
     * to the RPC and can be used to validate payment details.
     *
     * Generated from protobuf field <code>.code.common.v1.Signature signature = 6 [(.validate.rules) = {</code>
     * @return \Code\Common\V1\Signature|null
     */
    public function getSignature()
    {
        return $this->signature;
    }

    public function hasSignature()
    {
        return isset($this->signature);
    }

    public function clearSignature()
    {
        unset($this->signature);
    }

    /**
     * The signature is of serialize(CodifyRequest) without this field set using the
     * private key of the owner account. This provides an authentication mechanism
     * to the RPC and can be used to validate payment details.
     *
     * Generated from protobuf field <code>.code.common.v1.Signature signature = 6 [(.validate.rules) = {</code>
     * @param \Code\Common\V1\Signature $var
     * @return $this
     */
    public function setSignature($var)
    {
        GPBUtil::checkMessage($var, \Code\Common\V1\Signature::class);
        $this->signature = $var;

        return $this;
    }

}

