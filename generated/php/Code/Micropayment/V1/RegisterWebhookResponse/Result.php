<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: micropayment/v1/micro_payment_service.proto

namespace Code\Micropayment\V1\RegisterWebhookResponse;

use UnexpectedValueException;

/**
 * Protobuf type <code>code.micropayment.v1.RegisterWebhookResponse.Result</code>
 */
class Result
{
    /**
     * Generated from protobuf enum <code>OK = 0;</code>
     */
    const OK = 0;
    /**
     * A webhook has already been registered
     *
     * Generated from protobuf enum <code>ALREADY_REGISTERED = 1;</code>
     */
    const ALREADY_REGISTERED = 1;
    /**
     * A request does not exist for the provided intent ID
     *
     * Generated from protobuf enum <code>REQUEST_NOT_FOUND = 2;</code>
     */
    const REQUEST_NOT_FOUND = 2;
    /**
     * A user has already submitted a payment
     *
     * Generated from protobuf enum <code>INTENT_EXISTS = 3;</code>
     */
    const INTENT_EXISTS = 3;
    /**
     * The webhook URL is invalid
     *
     * Generated from protobuf enum <code>INVALID_URL = 4;</code>
     */
    const INVALID_URL = 4;

    private static $valueToName = [
        self::OK => 'OK',
        self::ALREADY_REGISTERED => 'ALREADY_REGISTERED',
        self::REQUEST_NOT_FOUND => 'REQUEST_NOT_FOUND',
        self::INTENT_EXISTS => 'INTENT_EXISTS',
        self::INVALID_URL => 'INVALID_URL',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Result::class, \Code\Micropayment\V1\RegisterWebhookResponse_Result::class);

