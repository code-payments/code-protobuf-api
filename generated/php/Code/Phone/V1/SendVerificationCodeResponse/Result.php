<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: phone/v1/phone_verification_service.proto

namespace Code\Phone\V1\SendVerificationCodeResponse;

use UnexpectedValueException;

/**
 * Protobuf type <code>code.phone.v1.SendVerificationCodeResponse.Result</code>
 */
class Result
{
    /**
     * Generated from protobuf enum <code>OK = 0;</code>
     */
    const OK = 0;
    /**
     * The phone number is not invited and cannot use Code. The SMS will not
     * be sent until the user is invited. This result is only valid during
     * the invitation stage of the application and won't apply after general
     * public release.
     *
     * Generated from protobuf enum <code>NOT_INVITED = 1;</code>
     */
    const NOT_INVITED = 1;
    /**
     * SMS is rate limited (eg. by IP, phone number, etc) and was not sent.
     * These will be set generously such that real users won't actually hit
     * the limits.
     *
     * Generated from protobuf enum <code>RATE_LIMITED = 2;</code>
     */
    const RATE_LIMITED = 2;
    /**
     * The phone number is not real because it fails Twilio lookup.
     *
     * Generated from protobuf enum <code>INVALID_PHONE_NUMBER = 3;</code>
     */
    const INVALID_PHONE_NUMBER = 3;
    /**
     * The phone number is valid, but it maps to an unsupported type of phone
     * like a landline or eSIM.
     *
     * Generated from protobuf enum <code>UNSUPPORTED_PHONE_TYPE = 4;</code>
     */
    const UNSUPPORTED_PHONE_TYPE = 4;
    /**
     * The country associated with the phone number is not supported (eg. it
     * is on the sanctioned list).
     *
     * Generated from protobuf enum <code>UNSUPPORTED_COUNTRY = 5;</code>
     */
    const UNSUPPORTED_COUNTRY = 5;
    /**
     * The device is not supported (eg. it fails device attestation checks)
     *
     * Generated from protobuf enum <code>UNSUPPORTED_DEVICE = 6;</code>
     */
    const UNSUPPORTED_DEVICE = 6;

    private static $valueToName = [
        self::OK => 'OK',
        self::NOT_INVITED => 'NOT_INVITED',
        self::RATE_LIMITED => 'RATE_LIMITED',
        self::INVALID_PHONE_NUMBER => 'INVALID_PHONE_NUMBER',
        self::UNSUPPORTED_PHONE_TYPE => 'UNSUPPORTED_PHONE_TYPE',
        self::UNSUPPORTED_COUNTRY => 'UNSUPPORTED_COUNTRY',
        self::UNSUPPORTED_DEVICE => 'UNSUPPORTED_DEVICE',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Result::class, \Code\Phone\V1\SendVerificationCodeResponse_Result::class);

