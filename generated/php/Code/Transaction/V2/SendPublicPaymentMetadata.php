<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: transaction/v2/transaction_service.proto

namespace Code\Transaction\V2;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Send a payment to a destination account publicly.
 * Action Spec:
 * source = PRIMARY or RELATIONSHIP
 * actions = [NoPrivacyTransferAction(source, destination, ExchangeData.Quarks)]
 *
 * Generated from protobuf message <code>code.transaction.v2.SendPublicPaymentMetadata</code>
 */
class SendPublicPaymentMetadata extends \Google\Protobuf\Internal\Message
{
    /**
     * The primary or relatinship account where funds will be sent from. The primary
     * account is assumed if this field is not set for backwards compatibility with
     * old clients.
     *
     * Generated from protobuf field <code>.code.common.v1.SolanaAccountId source = 4;</code>
     */
    protected $source = null;
    /**
     * The destination token account to send funds to. This cannot be a Code
     * temporary account.
     *
     * Generated from protobuf field <code>.code.common.v1.SolanaAccountId destination = 1 [(.validate.rules) = {</code>
     */
    protected $destination = null;
    /**
     * The exchange data of total funds being sent to the destination
     *
     * Generated from protobuf field <code>.code.transaction.v2.ExchangeData exchange_data = 2 [(.validate.rules) = {</code>
     */
    protected $exchange_data = null;
    /**
     * Is the payment a withdrawal? Currently, this is always true.
     *
     * Generated from protobuf field <code>bool is_withdrawal = 3 [(.validate.rules) = {</code>
     */
    protected $is_withdrawal = false;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Code\Common\V1\SolanaAccountId $source
     *           The primary or relatinship account where funds will be sent from. The primary
     *           account is assumed if this field is not set for backwards compatibility with
     *           old clients.
     *     @type \Code\Common\V1\SolanaAccountId $destination
     *           The destination token account to send funds to. This cannot be a Code
     *           temporary account.
     *     @type \Code\Transaction\V2\ExchangeData $exchange_data
     *           The exchange data of total funds being sent to the destination
     *     @type bool $is_withdrawal
     *           Is the payment a withdrawal? Currently, this is always true.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Transaction\V2\TransactionService::initOnce();
        parent::__construct($data);
    }

    /**
     * The primary or relatinship account where funds will be sent from. The primary
     * account is assumed if this field is not set for backwards compatibility with
     * old clients.
     *
     * Generated from protobuf field <code>.code.common.v1.SolanaAccountId source = 4;</code>
     * @return \Code\Common\V1\SolanaAccountId|null
     */
    public function getSource()
    {
        return $this->source;
    }

    public function hasSource()
    {
        return isset($this->source);
    }

    public function clearSource()
    {
        unset($this->source);
    }

    /**
     * The primary or relatinship account where funds will be sent from. The primary
     * account is assumed if this field is not set for backwards compatibility with
     * old clients.
     *
     * Generated from protobuf field <code>.code.common.v1.SolanaAccountId source = 4;</code>
     * @param \Code\Common\V1\SolanaAccountId $var
     * @return $this
     */
    public function setSource($var)
    {
        GPBUtil::checkMessage($var, \Code\Common\V1\SolanaAccountId::class);
        $this->source = $var;

        return $this;
    }

    /**
     * The destination token account to send funds to. This cannot be a Code
     * temporary account.
     *
     * Generated from protobuf field <code>.code.common.v1.SolanaAccountId destination = 1 [(.validate.rules) = {</code>
     * @return \Code\Common\V1\SolanaAccountId|null
     */
    public function getDestination()
    {
        return $this->destination;
    }

    public function hasDestination()
    {
        return isset($this->destination);
    }

    public function clearDestination()
    {
        unset($this->destination);
    }

    /**
     * The destination token account to send funds to. This cannot be a Code
     * temporary account.
     *
     * Generated from protobuf field <code>.code.common.v1.SolanaAccountId destination = 1 [(.validate.rules) = {</code>
     * @param \Code\Common\V1\SolanaAccountId $var
     * @return $this
     */
    public function setDestination($var)
    {
        GPBUtil::checkMessage($var, \Code\Common\V1\SolanaAccountId::class);
        $this->destination = $var;

        return $this;
    }

    /**
     * The exchange data of total funds being sent to the destination
     *
     * Generated from protobuf field <code>.code.transaction.v2.ExchangeData exchange_data = 2 [(.validate.rules) = {</code>
     * @return \Code\Transaction\V2\ExchangeData|null
     */
    public function getExchangeData()
    {
        return $this->exchange_data;
    }

    public function hasExchangeData()
    {
        return isset($this->exchange_data);
    }

    public function clearExchangeData()
    {
        unset($this->exchange_data);
    }

    /**
     * The exchange data of total funds being sent to the destination
     *
     * Generated from protobuf field <code>.code.transaction.v2.ExchangeData exchange_data = 2 [(.validate.rules) = {</code>
     * @param \Code\Transaction\V2\ExchangeData $var
     * @return $this
     */
    public function setExchangeData($var)
    {
        GPBUtil::checkMessage($var, \Code\Transaction\V2\ExchangeData::class);
        $this->exchange_data = $var;

        return $this;
    }

    /**
     * Is the payment a withdrawal? Currently, this is always true.
     *
     * Generated from protobuf field <code>bool is_withdrawal = 3 [(.validate.rules) = {</code>
     * @return bool
     */
    public function getIsWithdrawal()
    {
        return $this->is_withdrawal;
    }

    /**
     * Is the payment a withdrawal? Currently, this is always true.
     *
     * Generated from protobuf field <code>bool is_withdrawal = 3 [(.validate.rules) = {</code>
     * @param bool $var
     * @return $this
     */
    public function setIsWithdrawal($var)
    {
        GPBUtil::checkBool($var);
        $this->is_withdrawal = $var;

        return $this;
    }

}

