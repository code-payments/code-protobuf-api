<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: transaction/v2/transaction_service.proto

namespace Code\Transaction\V2;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>code.transaction.v2.NoncedTransactionMetadata</code>
 */
class NoncedTransactionMetadata extends \Google\Protobuf\Internal\Message
{
    /**
     * The nonce account to use in the system::AdvanceNonce instruction
     *
     * Generated from protobuf field <code>.code.common.v1.SolanaAccountId nonce = 1 [(.validate.rules) = {</code>
     */
    protected $nonce = null;
    /**
     * The blockhash to set in the transaction
     *
     * Generated from protobuf field <code>.code.common.v1.Blockhash blockhash = 2 [(.validate.rules) = {</code>
     */
    protected $blockhash = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Code\Common\V1\SolanaAccountId $nonce
     *           The nonce account to use in the system::AdvanceNonce instruction
     *     @type \Code\Common\V1\Blockhash $blockhash
     *           The blockhash to set in the transaction
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Transaction\V2\TransactionService::initOnce();
        parent::__construct($data);
    }

    /**
     * The nonce account to use in the system::AdvanceNonce instruction
     *
     * Generated from protobuf field <code>.code.common.v1.SolanaAccountId nonce = 1 [(.validate.rules) = {</code>
     * @return \Code\Common\V1\SolanaAccountId|null
     */
    public function getNonce()
    {
        return $this->nonce;
    }

    public function hasNonce()
    {
        return isset($this->nonce);
    }

    public function clearNonce()
    {
        unset($this->nonce);
    }

    /**
     * The nonce account to use in the system::AdvanceNonce instruction
     *
     * Generated from protobuf field <code>.code.common.v1.SolanaAccountId nonce = 1 [(.validate.rules) = {</code>
     * @param \Code\Common\V1\SolanaAccountId $var
     * @return $this
     */
    public function setNonce($var)
    {
        GPBUtil::checkMessage($var, \Code\Common\V1\SolanaAccountId::class);
        $this->nonce = $var;

        return $this;
    }

    /**
     * The blockhash to set in the transaction
     *
     * Generated from protobuf field <code>.code.common.v1.Blockhash blockhash = 2 [(.validate.rules) = {</code>
     * @return \Code\Common\V1\Blockhash|null
     */
    public function getBlockhash()
    {
        return $this->blockhash;
    }

    public function hasBlockhash()
    {
        return isset($this->blockhash);
    }

    public function clearBlockhash()
    {
        unset($this->blockhash);
    }

    /**
     * The blockhash to set in the transaction
     *
     * Generated from protobuf field <code>.code.common.v1.Blockhash blockhash = 2 [(.validate.rules) = {</code>
     * @param \Code\Common\V1\Blockhash $var
     * @return $this
     */
    public function setBlockhash($var)
    {
        GPBUtil::checkMessage($var, \Code\Common\V1\Blockhash::class);
        $this->blockhash = $var;

        return $this;
    }

}

