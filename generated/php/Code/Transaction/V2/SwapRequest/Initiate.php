<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: transaction/v2/transaction_service.proto

namespace Code\Transaction\V2\SwapRequest;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>code.transaction.v2.SwapRequest.Initiate</code>
 */
class Initiate extends \Google\Protobuf\Internal\Message
{
    /**
     * The verified owner account public key
     *
     * Generated from protobuf field <code>.code.common.v1.SolanaAccountId owner = 1 [(.validate.rules) = {</code>
     */
    protected $owner = null;
    /**
     * The user authority account that will sign to authorize the swap. Ideally,
     * this is an account derived off the owner account that is solely responsible
     * for swapping.
     *
     * Generated from protobuf field <code>.code.common.v1.SolanaAccountId swap_authority = 2 [(.validate.rules) = {</code>
     */
    protected $swap_authority = null;
    /**
     * Maximum amount to swap from the source mint, in quarks. If value is set to zero,
     * the entire amount will be swapped.
     *
     * Generated from protobuf field <code>uint64 limit = 3;</code>
     */
    protected $limit = 0;
    /**
     * Whether the client wants the RPC to wait for blockchain status. If false,
     * then the RPC will return Success when the swap is submitted to the blockchain.
     * Otherwise, the RPC will observe and report back the status of the transaction.
     *
     * Generated from protobuf field <code>bool wait_for_blockchain_status = 4;</code>
     */
    protected $wait_for_blockchain_status = false;
    /**
     * The signature is of serialize(Initiate) without this field set using the
     * private key of the owner account. This provides an authentication mechanism
     * to the RPC.
     *
     * Generated from protobuf field <code>.code.common.v1.Signature signature = 5 [(.validate.rules) = {</code>
     */
    protected $signature = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Code\Common\V1\SolanaAccountId $owner
     *           The verified owner account public key
     *     @type \Code\Common\V1\SolanaAccountId $swap_authority
     *           The user authority account that will sign to authorize the swap. Ideally,
     *           this is an account derived off the owner account that is solely responsible
     *           for swapping.
     *     @type int|string $limit
     *           Maximum amount to swap from the source mint, in quarks. If value is set to zero,
     *           the entire amount will be swapped.
     *     @type bool $wait_for_blockchain_status
     *           Whether the client wants the RPC to wait for blockchain status. If false,
     *           then the RPC will return Success when the swap is submitted to the blockchain.
     *           Otherwise, the RPC will observe and report back the status of the transaction.
     *     @type \Code\Common\V1\Signature $signature
     *           The signature is of serialize(Initiate) without this field set using the
     *           private key of the owner account. This provides an authentication mechanism
     *           to the RPC.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Transaction\V2\TransactionService::initOnce();
        parent::__construct($data);
    }

    /**
     * The verified owner account public key
     *
     * Generated from protobuf field <code>.code.common.v1.SolanaAccountId owner = 1 [(.validate.rules) = {</code>
     * @return \Code\Common\V1\SolanaAccountId|null
     */
    public function getOwner()
    {
        return $this->owner;
    }

    public function hasOwner()
    {
        return isset($this->owner);
    }

    public function clearOwner()
    {
        unset($this->owner);
    }

    /**
     * The verified owner account public key
     *
     * Generated from protobuf field <code>.code.common.v1.SolanaAccountId owner = 1 [(.validate.rules) = {</code>
     * @param \Code\Common\V1\SolanaAccountId $var
     * @return $this
     */
    public function setOwner($var)
    {
        GPBUtil::checkMessage($var, \Code\Common\V1\SolanaAccountId::class);
        $this->owner = $var;

        return $this;
    }

    /**
     * The user authority account that will sign to authorize the swap. Ideally,
     * this is an account derived off the owner account that is solely responsible
     * for swapping.
     *
     * Generated from protobuf field <code>.code.common.v1.SolanaAccountId swap_authority = 2 [(.validate.rules) = {</code>
     * @return \Code\Common\V1\SolanaAccountId|null
     */
    public function getSwapAuthority()
    {
        return $this->swap_authority;
    }

    public function hasSwapAuthority()
    {
        return isset($this->swap_authority);
    }

    public function clearSwapAuthority()
    {
        unset($this->swap_authority);
    }

    /**
     * The user authority account that will sign to authorize the swap. Ideally,
     * this is an account derived off the owner account that is solely responsible
     * for swapping.
     *
     * Generated from protobuf field <code>.code.common.v1.SolanaAccountId swap_authority = 2 [(.validate.rules) = {</code>
     * @param \Code\Common\V1\SolanaAccountId $var
     * @return $this
     */
    public function setSwapAuthority($var)
    {
        GPBUtil::checkMessage($var, \Code\Common\V1\SolanaAccountId::class);
        $this->swap_authority = $var;

        return $this;
    }

    /**
     * Maximum amount to swap from the source mint, in quarks. If value is set to zero,
     * the entire amount will be swapped.
     *
     * Generated from protobuf field <code>uint64 limit = 3;</code>
     * @return int|string
     */
    public function getLimit()
    {
        return $this->limit;
    }

    /**
     * Maximum amount to swap from the source mint, in quarks. If value is set to zero,
     * the entire amount will be swapped.
     *
     * Generated from protobuf field <code>uint64 limit = 3;</code>
     * @param int|string $var
     * @return $this
     */
    public function setLimit($var)
    {
        GPBUtil::checkUint64($var);
        $this->limit = $var;

        return $this;
    }

    /**
     * Whether the client wants the RPC to wait for blockchain status. If false,
     * then the RPC will return Success when the swap is submitted to the blockchain.
     * Otherwise, the RPC will observe and report back the status of the transaction.
     *
     * Generated from protobuf field <code>bool wait_for_blockchain_status = 4;</code>
     * @return bool
     */
    public function getWaitForBlockchainStatus()
    {
        return $this->wait_for_blockchain_status;
    }

    /**
     * Whether the client wants the RPC to wait for blockchain status. If false,
     * then the RPC will return Success when the swap is submitted to the blockchain.
     * Otherwise, the RPC will observe and report back the status of the transaction.
     *
     * Generated from protobuf field <code>bool wait_for_blockchain_status = 4;</code>
     * @param bool $var
     * @return $this
     */
    public function setWaitForBlockchainStatus($var)
    {
        GPBUtil::checkBool($var);
        $this->wait_for_blockchain_status = $var;

        return $this;
    }

    /**
     * The signature is of serialize(Initiate) without this field set using the
     * private key of the owner account. This provides an authentication mechanism
     * to the RPC.
     *
     * Generated from protobuf field <code>.code.common.v1.Signature signature = 5 [(.validate.rules) = {</code>
     * @return \Code\Common\V1\Signature|null
     */
    public function getSignature()
    {
        return $this->signature;
    }

    public function hasSignature()
    {
        return isset($this->signature);
    }

    public function clearSignature()
    {
        unset($this->signature);
    }

    /**
     * The signature is of serialize(Initiate) without this field set using the
     * private key of the owner account. This provides an authentication mechanism
     * to the RPC.
     *
     * Generated from protobuf field <code>.code.common.v1.Signature signature = 5 [(.validate.rules) = {</code>
     * @param \Code\Common\V1\Signature $var
     * @return $this
     */
    public function setSignature($var)
    {
        GPBUtil::checkMessage($var, \Code\Common\V1\Signature::class);
        $this->signature = $var;

        return $this;
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Initiate::class, \Code\Transaction\V2\SwapRequest_Initiate::class);

