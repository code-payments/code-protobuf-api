<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: transaction/v2/transaction_service.proto

namespace Code\Transaction\V2\SwapRequest;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>code.transaction.v2.SwapRequest.SubmitSignature</code>
 */
class SubmitSignature extends \Google\Protobuf\Internal\Message
{
    /**
     * The signature for the locally constructed swap transaction
     *
     * Generated from protobuf field <code>.code.common.v1.Signature signature = 1 [(.validate.rules) = {</code>
     */
    protected $signature = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Code\Common\V1\Signature $signature
     *           The signature for the locally constructed swap transaction
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Transaction\V2\TransactionService::initOnce();
        parent::__construct($data);
    }

    /**
     * The signature for the locally constructed swap transaction
     *
     * Generated from protobuf field <code>.code.common.v1.Signature signature = 1 [(.validate.rules) = {</code>
     * @return \Code\Common\V1\Signature|null
     */
    public function getSignature()
    {
        return $this->signature;
    }

    public function hasSignature()
    {
        return isset($this->signature);
    }

    public function clearSignature()
    {
        unset($this->signature);
    }

    /**
     * The signature for the locally constructed swap transaction
     *
     * Generated from protobuf field <code>.code.common.v1.Signature signature = 1 [(.validate.rules) = {</code>
     * @param \Code\Common\V1\Signature $var
     * @return $this
     */
    public function setSignature($var)
    {
        GPBUtil::checkMessage($var, \Code\Common\V1\Signature::class);
        $this->signature = $var;

        return $this;
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(SubmitSignature::class, \Code\Transaction\V2\SwapRequest_SubmitSignature::class);

