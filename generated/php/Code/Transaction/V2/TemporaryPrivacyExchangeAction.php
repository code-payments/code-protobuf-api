<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: transaction/v2/transaction_service.proto

namespace Code\Transaction\V2;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Transaction 1
 *  Instructions:
 *    1. system::AdvanceNonce
 *    2. memo::Memo
 *    3. splitter::TransferWithCommitment (treasury -> destination)
 *  Client Signature Required: No
 * Transaction 2
 *  Instructions:
 *    1. system::AdvanceNonce
 *    2. memo::Memo
 *    3. timelock::TransferWithAuthority (source -> commitment)
 *  Client Signature Required: Yes
 *
 * Generated from protobuf message <code>code.transaction.v2.TemporaryPrivacyExchangeAction</code>
 */
class TemporaryPrivacyExchangeAction extends \Google\Protobuf\Internal\Message
{
    /**
     * The public key of the private key that has authority over source
     *
     * Generated from protobuf field <code>.code.common.v1.SolanaAccountId authority = 1 [(.validate.rules) = {</code>
     */
    protected $authority = null;
    /**
     * The source account where funds are exchanged from
     *
     * Generated from protobuf field <code>.code.common.v1.SolanaAccountId source = 2 [(.validate.rules) = {</code>
     */
    protected $source = null;
    /**
     * The destination account where funds are exchanged to
     *
     * Generated from protobuf field <code>.code.common.v1.SolanaAccountId destination = 3 [(.validate.rules) = {</code>
     */
    protected $destination = null;
    /**
     * The Kin quark amount to exchange
     *
     * Generated from protobuf field <code>uint64 amount = 4 [(.validate.rules) = {</code>
     */
    protected $amount = 0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Code\Common\V1\SolanaAccountId $authority
     *           The public key of the private key that has authority over source
     *     @type \Code\Common\V1\SolanaAccountId $source
     *           The source account where funds are exchanged from
     *     @type \Code\Common\V1\SolanaAccountId $destination
     *           The destination account where funds are exchanged to
     *     @type int|string $amount
     *           The Kin quark amount to exchange
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Transaction\V2\TransactionService::initOnce();
        parent::__construct($data);
    }

    /**
     * The public key of the private key that has authority over source
     *
     * Generated from protobuf field <code>.code.common.v1.SolanaAccountId authority = 1 [(.validate.rules) = {</code>
     * @return \Code\Common\V1\SolanaAccountId|null
     */
    public function getAuthority()
    {
        return $this->authority;
    }

    public function hasAuthority()
    {
        return isset($this->authority);
    }

    public function clearAuthority()
    {
        unset($this->authority);
    }

    /**
     * The public key of the private key that has authority over source
     *
     * Generated from protobuf field <code>.code.common.v1.SolanaAccountId authority = 1 [(.validate.rules) = {</code>
     * @param \Code\Common\V1\SolanaAccountId $var
     * @return $this
     */
    public function setAuthority($var)
    {
        GPBUtil::checkMessage($var, \Code\Common\V1\SolanaAccountId::class);
        $this->authority = $var;

        return $this;
    }

    /**
     * The source account where funds are exchanged from
     *
     * Generated from protobuf field <code>.code.common.v1.SolanaAccountId source = 2 [(.validate.rules) = {</code>
     * @return \Code\Common\V1\SolanaAccountId|null
     */
    public function getSource()
    {
        return $this->source;
    }

    public function hasSource()
    {
        return isset($this->source);
    }

    public function clearSource()
    {
        unset($this->source);
    }

    /**
     * The source account where funds are exchanged from
     *
     * Generated from protobuf field <code>.code.common.v1.SolanaAccountId source = 2 [(.validate.rules) = {</code>
     * @param \Code\Common\V1\SolanaAccountId $var
     * @return $this
     */
    public function setSource($var)
    {
        GPBUtil::checkMessage($var, \Code\Common\V1\SolanaAccountId::class);
        $this->source = $var;

        return $this;
    }

    /**
     * The destination account where funds are exchanged to
     *
     * Generated from protobuf field <code>.code.common.v1.SolanaAccountId destination = 3 [(.validate.rules) = {</code>
     * @return \Code\Common\V1\SolanaAccountId|null
     */
    public function getDestination()
    {
        return $this->destination;
    }

    public function hasDestination()
    {
        return isset($this->destination);
    }

    public function clearDestination()
    {
        unset($this->destination);
    }

    /**
     * The destination account where funds are exchanged to
     *
     * Generated from protobuf field <code>.code.common.v1.SolanaAccountId destination = 3 [(.validate.rules) = {</code>
     * @param \Code\Common\V1\SolanaAccountId $var
     * @return $this
     */
    public function setDestination($var)
    {
        GPBUtil::checkMessage($var, \Code\Common\V1\SolanaAccountId::class);
        $this->destination = $var;

        return $this;
    }

    /**
     * The Kin quark amount to exchange
     *
     * Generated from protobuf field <code>uint64 amount = 4 [(.validate.rules) = {</code>
     * @return int|string
     */
    public function getAmount()
    {
        return $this->amount;
    }

    /**
     * The Kin quark amount to exchange
     *
     * Generated from protobuf field <code>uint64 amount = 4 [(.validate.rules) = {</code>
     * @param int|string $var
     * @return $this
     */
    public function setAmount($var)
    {
        GPBUtil::checkUint64($var);
        $this->amount = $var;

        return $this;
    }

}

