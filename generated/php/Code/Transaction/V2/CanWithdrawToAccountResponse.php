<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: transaction/v2/transaction_service.proto

namespace Code\Transaction\V2;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>code.transaction.v2.CanWithdrawToAccountResponse</code>
 */
class CanWithdrawToAccountResponse extends \Google\Protobuf\Internal\Message
{
    /**
     * Metadata so the client knows how to withdraw to the account. Server cannot
     * provide precalculated addresses in this response to maintain non-custodial
     * status.
     *
     * Generated from protobuf field <code>.code.transaction.v2.CanWithdrawToAccountResponse.AccountType account_type = 2;</code>
     */
    protected $account_type = 0;
    /**
     * Server-controlled flag to indicate if the account can be withdrawn to.
     * There are several reasons server may deny it, including:
     *  - Wrong type of Code account
     *  - Not wanting to subsidize the creation of an ATA
     *  - Unsupported external account type (eg. token account but of the wrong mint)
     * This is guaranteed to be false when account_type = Unknown.
     *
     * Generated from protobuf field <code>bool is_valid_payment_destination = 1;</code>
     */
    protected $is_valid_payment_destination = false;
    /**
     * Token account requires initialization before the withdrawal can occur.
     * Server has chosen not to subsidize the fees. The response is guaranteed
     * to have set is_valid_payment_destination = false in this case.
     *
     * Generated from protobuf field <code>bool requires_initialization = 3;</code>
     */
    protected $requires_initialization = false;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int $account_type
     *           Metadata so the client knows how to withdraw to the account. Server cannot
     *           provide precalculated addresses in this response to maintain non-custodial
     *           status.
     *     @type bool $is_valid_payment_destination
     *           Server-controlled flag to indicate if the account can be withdrawn to.
     *           There are several reasons server may deny it, including:
     *            - Wrong type of Code account
     *            - Not wanting to subsidize the creation of an ATA
     *            - Unsupported external account type (eg. token account but of the wrong mint)
     *           This is guaranteed to be false when account_type = Unknown.
     *     @type bool $requires_initialization
     *           Token account requires initialization before the withdrawal can occur.
     *           Server has chosen not to subsidize the fees. The response is guaranteed
     *           to have set is_valid_payment_destination = false in this case.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Transaction\V2\TransactionService::initOnce();
        parent::__construct($data);
    }

    /**
     * Metadata so the client knows how to withdraw to the account. Server cannot
     * provide precalculated addresses in this response to maintain non-custodial
     * status.
     *
     * Generated from protobuf field <code>.code.transaction.v2.CanWithdrawToAccountResponse.AccountType account_type = 2;</code>
     * @return int
     */
    public function getAccountType()
    {
        return $this->account_type;
    }

    /**
     * Metadata so the client knows how to withdraw to the account. Server cannot
     * provide precalculated addresses in this response to maintain non-custodial
     * status.
     *
     * Generated from protobuf field <code>.code.transaction.v2.CanWithdrawToAccountResponse.AccountType account_type = 2;</code>
     * @param int $var
     * @return $this
     */
    public function setAccountType($var)
    {
        GPBUtil::checkEnum($var, \Code\Transaction\V2\CanWithdrawToAccountResponse\AccountType::class);
        $this->account_type = $var;

        return $this;
    }

    /**
     * Server-controlled flag to indicate if the account can be withdrawn to.
     * There are several reasons server may deny it, including:
     *  - Wrong type of Code account
     *  - Not wanting to subsidize the creation of an ATA
     *  - Unsupported external account type (eg. token account but of the wrong mint)
     * This is guaranteed to be false when account_type = Unknown.
     *
     * Generated from protobuf field <code>bool is_valid_payment_destination = 1;</code>
     * @return bool
     */
    public function getIsValidPaymentDestination()
    {
        return $this->is_valid_payment_destination;
    }

    /**
     * Server-controlled flag to indicate if the account can be withdrawn to.
     * There are several reasons server may deny it, including:
     *  - Wrong type of Code account
     *  - Not wanting to subsidize the creation of an ATA
     *  - Unsupported external account type (eg. token account but of the wrong mint)
     * This is guaranteed to be false when account_type = Unknown.
     *
     * Generated from protobuf field <code>bool is_valid_payment_destination = 1;</code>
     * @param bool $var
     * @return $this
     */
    public function setIsValidPaymentDestination($var)
    {
        GPBUtil::checkBool($var);
        $this->is_valid_payment_destination = $var;

        return $this;
    }

    /**
     * Token account requires initialization before the withdrawal can occur.
     * Server has chosen not to subsidize the fees. The response is guaranteed
     * to have set is_valid_payment_destination = false in this case.
     *
     * Generated from protobuf field <code>bool requires_initialization = 3;</code>
     * @return bool
     */
    public function getRequiresInitialization()
    {
        return $this->requires_initialization;
    }

    /**
     * Token account requires initialization before the withdrawal can occur.
     * Server has chosen not to subsidize the fees. The response is guaranteed
     * to have set is_valid_payment_destination = false in this case.
     *
     * Generated from protobuf field <code>bool requires_initialization = 3;</code>
     * @param bool $var
     * @return $this
     */
    public function setRequiresInitialization($var)
    {
        GPBUtil::checkBool($var);
        $this->requires_initialization = $var;

        return $this;
    }

}

