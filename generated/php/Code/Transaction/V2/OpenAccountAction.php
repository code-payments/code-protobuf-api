<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: transaction/v2/transaction_service.proto

namespace Code\Transaction\V2;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Transaction 1
 *  Instructions:
 *    1. system::AdvanceNonce
 *    2. timelock::Initialize
 *  Client Signature Required: No
 * All OpenAccountActions for non-primary accounts must be followed with an associated
 * CloseDormantAccountAction to enable server to perform cleanup.
 *
 * Generated from protobuf message <code>code.transaction.v2.OpenAccountAction</code>
 */
class OpenAccountAction extends \Google\Protobuf\Internal\Message
{
    /**
     * The type of account, which will dictate its intended use
     *
     * Generated from protobuf field <code>.code.common.v1.AccountType account_type = 1 [(.validate.rules) = {</code>
     */
    protected $account_type = 0;
    /**
     * The owner of the account. For accounts liked to a user's 12 words, this is
     * the verified parent owner account public key. All other account types should
     * set this to the authority value.
     *
     * Generated from protobuf field <code>.code.common.v1.SolanaAccountId owner = 2 [(.validate.rules) = {</code>
     */
    protected $owner = null;
    /**
     * The index used to for accounts that are derived from owner
     *
     * Generated from protobuf field <code>uint64 index = 3;</code>
     */
    protected $index = 0;
    /**
     * The public key of the private key that has authority over the opened token account
     *
     * Generated from protobuf field <code>.code.common.v1.SolanaAccountId authority = 4 [(.validate.rules) = {</code>
     */
    protected $authority = null;
    /**
     * The token account being opened
     *
     * Generated from protobuf field <code>.code.common.v1.SolanaAccountId token = 5 [(.validate.rules) = {</code>
     */
    protected $token = null;
    /**
     * The signature is of serialize(OpenAccountAction) without this field set
     * using the private key of the authority account. This provides a proof
     * of authorization to link authority to owner.
     *
     * Generated from protobuf field <code>.code.common.v1.Signature authority_signature = 6 [(.validate.rules) = {</code>
     */
    protected $authority_signature = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int $account_type
     *           The type of account, which will dictate its intended use
     *     @type \Code\Common\V1\SolanaAccountId $owner
     *           The owner of the account. For accounts liked to a user's 12 words, this is
     *           the verified parent owner account public key. All other account types should
     *           set this to the authority value.
     *     @type int|string $index
     *           The index used to for accounts that are derived from owner
     *     @type \Code\Common\V1\SolanaAccountId $authority
     *           The public key of the private key that has authority over the opened token account
     *     @type \Code\Common\V1\SolanaAccountId $token
     *           The token account being opened
     *     @type \Code\Common\V1\Signature $authority_signature
     *           The signature is of serialize(OpenAccountAction) without this field set
     *           using the private key of the authority account. This provides a proof
     *           of authorization to link authority to owner.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Transaction\V2\TransactionService::initOnce();
        parent::__construct($data);
    }

    /**
     * The type of account, which will dictate its intended use
     *
     * Generated from protobuf field <code>.code.common.v1.AccountType account_type = 1 [(.validate.rules) = {</code>
     * @return int
     */
    public function getAccountType()
    {
        return $this->account_type;
    }

    /**
     * The type of account, which will dictate its intended use
     *
     * Generated from protobuf field <code>.code.common.v1.AccountType account_type = 1 [(.validate.rules) = {</code>
     * @param int $var
     * @return $this
     */
    public function setAccountType($var)
    {
        GPBUtil::checkEnum($var, \Code\Common\V1\AccountType::class);
        $this->account_type = $var;

        return $this;
    }

    /**
     * The owner of the account. For accounts liked to a user's 12 words, this is
     * the verified parent owner account public key. All other account types should
     * set this to the authority value.
     *
     * Generated from protobuf field <code>.code.common.v1.SolanaAccountId owner = 2 [(.validate.rules) = {</code>
     * @return \Code\Common\V1\SolanaAccountId|null
     */
    public function getOwner()
    {
        return $this->owner;
    }

    public function hasOwner()
    {
        return isset($this->owner);
    }

    public function clearOwner()
    {
        unset($this->owner);
    }

    /**
     * The owner of the account. For accounts liked to a user's 12 words, this is
     * the verified parent owner account public key. All other account types should
     * set this to the authority value.
     *
     * Generated from protobuf field <code>.code.common.v1.SolanaAccountId owner = 2 [(.validate.rules) = {</code>
     * @param \Code\Common\V1\SolanaAccountId $var
     * @return $this
     */
    public function setOwner($var)
    {
        GPBUtil::checkMessage($var, \Code\Common\V1\SolanaAccountId::class);
        $this->owner = $var;

        return $this;
    }

    /**
     * The index used to for accounts that are derived from owner
     *
     * Generated from protobuf field <code>uint64 index = 3;</code>
     * @return int|string
     */
    public function getIndex()
    {
        return $this->index;
    }

    /**
     * The index used to for accounts that are derived from owner
     *
     * Generated from protobuf field <code>uint64 index = 3;</code>
     * @param int|string $var
     * @return $this
     */
    public function setIndex($var)
    {
        GPBUtil::checkUint64($var);
        $this->index = $var;

        return $this;
    }

    /**
     * The public key of the private key that has authority over the opened token account
     *
     * Generated from protobuf field <code>.code.common.v1.SolanaAccountId authority = 4 [(.validate.rules) = {</code>
     * @return \Code\Common\V1\SolanaAccountId|null
     */
    public function getAuthority()
    {
        return $this->authority;
    }

    public function hasAuthority()
    {
        return isset($this->authority);
    }

    public function clearAuthority()
    {
        unset($this->authority);
    }

    /**
     * The public key of the private key that has authority over the opened token account
     *
     * Generated from protobuf field <code>.code.common.v1.SolanaAccountId authority = 4 [(.validate.rules) = {</code>
     * @param \Code\Common\V1\SolanaAccountId $var
     * @return $this
     */
    public function setAuthority($var)
    {
        GPBUtil::checkMessage($var, \Code\Common\V1\SolanaAccountId::class);
        $this->authority = $var;

        return $this;
    }

    /**
     * The token account being opened
     *
     * Generated from protobuf field <code>.code.common.v1.SolanaAccountId token = 5 [(.validate.rules) = {</code>
     * @return \Code\Common\V1\SolanaAccountId|null
     */
    public function getToken()
    {
        return $this->token;
    }

    public function hasToken()
    {
        return isset($this->token);
    }

    public function clearToken()
    {
        unset($this->token);
    }

    /**
     * The token account being opened
     *
     * Generated from protobuf field <code>.code.common.v1.SolanaAccountId token = 5 [(.validate.rules) = {</code>
     * @param \Code\Common\V1\SolanaAccountId $var
     * @return $this
     */
    public function setToken($var)
    {
        GPBUtil::checkMessage($var, \Code\Common\V1\SolanaAccountId::class);
        $this->token = $var;

        return $this;
    }

    /**
     * The signature is of serialize(OpenAccountAction) without this field set
     * using the private key of the authority account. This provides a proof
     * of authorization to link authority to owner.
     *
     * Generated from protobuf field <code>.code.common.v1.Signature authority_signature = 6 [(.validate.rules) = {</code>
     * @return \Code\Common\V1\Signature|null
     */
    public function getAuthoritySignature()
    {
        return $this->authority_signature;
    }

    public function hasAuthoritySignature()
    {
        return isset($this->authority_signature);
    }

    public function clearAuthoritySignature()
    {
        unset($this->authority_signature);
    }

    /**
     * The signature is of serialize(OpenAccountAction) without this field set
     * using the private key of the authority account. This provides a proof
     * of authorization to link authority to owner.
     *
     * Generated from protobuf field <code>.code.common.v1.Signature authority_signature = 6 [(.validate.rules) = {</code>
     * @param \Code\Common\V1\Signature $var
     * @return $this
     */
    public function setAuthoritySignature($var)
    {
        GPBUtil::checkMessage($var, \Code\Common\V1\Signature::class);
        $this->authority_signature = $var;

        return $this;
    }

}

