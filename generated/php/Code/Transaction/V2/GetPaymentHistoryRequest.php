<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: transaction/v2/transaction_service.proto

namespace Code\Transaction\V2;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>code.transaction.v2.GetPaymentHistoryRequest</code>
 */
class GetPaymentHistoryRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * The owner account to get payment history for
     *
     * Generated from protobuf field <code>.code.common.v1.SolanaAccountId owner = 1 [(.validate.rules) = {</code>
     */
    protected $owner = null;
    /**
     * An optional history cursor indicating where in the history to resume from.
     *
     * Generated from protobuf field <code>.code.transaction.v2.Cursor cursor = 2;</code>
     */
    protected $cursor = null;
    /**
     * The number of results to return per request. Default is 100.
     *
     * Generated from protobuf field <code>uint32 page_size = 3 [(.validate.rules) = {</code>
     */
    protected $page_size = 0;
    /**
     * The order in which to return history items from the cursor.
     *
     * Generated from protobuf field <code>.code.transaction.v2.GetPaymentHistoryRequest.Direction direction = 4;</code>
     */
    protected $direction = 0;
    /**
     * The signature is of serialize(GetPaymentHistoryRequest) without this field set
     * using the private key of the owner account. This provides an authentication
     * mechanism to the RPC.
     *
     * Generated from protobuf field <code>.code.common.v1.Signature signature = 5 [(.validate.rules) = {</code>
     */
    protected $signature = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Code\Common\V1\SolanaAccountId $owner
     *           The owner account to get payment history for
     *     @type \Code\Transaction\V2\Cursor $cursor
     *           An optional history cursor indicating where in the history to resume from.
     *     @type int $page_size
     *           The number of results to return per request. Default is 100.
     *     @type int $direction
     *           The order in which to return history items from the cursor.
     *     @type \Code\Common\V1\Signature $signature
     *           The signature is of serialize(GetPaymentHistoryRequest) without this field set
     *           using the private key of the owner account. This provides an authentication
     *           mechanism to the RPC.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Transaction\V2\TransactionService::initOnce();
        parent::__construct($data);
    }

    /**
     * The owner account to get payment history for
     *
     * Generated from protobuf field <code>.code.common.v1.SolanaAccountId owner = 1 [(.validate.rules) = {</code>
     * @return \Code\Common\V1\SolanaAccountId|null
     */
    public function getOwner()
    {
        return $this->owner;
    }

    public function hasOwner()
    {
        return isset($this->owner);
    }

    public function clearOwner()
    {
        unset($this->owner);
    }

    /**
     * The owner account to get payment history for
     *
     * Generated from protobuf field <code>.code.common.v1.SolanaAccountId owner = 1 [(.validate.rules) = {</code>
     * @param \Code\Common\V1\SolanaAccountId $var
     * @return $this
     */
    public function setOwner($var)
    {
        GPBUtil::checkMessage($var, \Code\Common\V1\SolanaAccountId::class);
        $this->owner = $var;

        return $this;
    }

    /**
     * An optional history cursor indicating where in the history to resume from.
     *
     * Generated from protobuf field <code>.code.transaction.v2.Cursor cursor = 2;</code>
     * @return \Code\Transaction\V2\Cursor|null
     */
    public function getCursor()
    {
        return $this->cursor;
    }

    public function hasCursor()
    {
        return isset($this->cursor);
    }

    public function clearCursor()
    {
        unset($this->cursor);
    }

    /**
     * An optional history cursor indicating where in the history to resume from.
     *
     * Generated from protobuf field <code>.code.transaction.v2.Cursor cursor = 2;</code>
     * @param \Code\Transaction\V2\Cursor $var
     * @return $this
     */
    public function setCursor($var)
    {
        GPBUtil::checkMessage($var, \Code\Transaction\V2\Cursor::class);
        $this->cursor = $var;

        return $this;
    }

    /**
     * The number of results to return per request. Default is 100.
     *
     * Generated from protobuf field <code>uint32 page_size = 3 [(.validate.rules) = {</code>
     * @return int
     */
    public function getPageSize()
    {
        return $this->page_size;
    }

    /**
     * The number of results to return per request. Default is 100.
     *
     * Generated from protobuf field <code>uint32 page_size = 3 [(.validate.rules) = {</code>
     * @param int $var
     * @return $this
     */
    public function setPageSize($var)
    {
        GPBUtil::checkUint32($var);
        $this->page_size = $var;

        return $this;
    }

    /**
     * The order in which to return history items from the cursor.
     *
     * Generated from protobuf field <code>.code.transaction.v2.GetPaymentHistoryRequest.Direction direction = 4;</code>
     * @return int
     */
    public function getDirection()
    {
        return $this->direction;
    }

    /**
     * The order in which to return history items from the cursor.
     *
     * Generated from protobuf field <code>.code.transaction.v2.GetPaymentHistoryRequest.Direction direction = 4;</code>
     * @param int $var
     * @return $this
     */
    public function setDirection($var)
    {
        GPBUtil::checkEnum($var, \Code\Transaction\V2\GetPaymentHistoryRequest\Direction::class);
        $this->direction = $var;

        return $this;
    }

    /**
     * The signature is of serialize(GetPaymentHistoryRequest) without this field set
     * using the private key of the owner account. This provides an authentication
     * mechanism to the RPC.
     *
     * Generated from protobuf field <code>.code.common.v1.Signature signature = 5 [(.validate.rules) = {</code>
     * @return \Code\Common\V1\Signature|null
     */
    public function getSignature()
    {
        return $this->signature;
    }

    public function hasSignature()
    {
        return isset($this->signature);
    }

    public function clearSignature()
    {
        unset($this->signature);
    }

    /**
     * The signature is of serialize(GetPaymentHistoryRequest) without this field set
     * using the private key of the owner account. This provides an authentication
     * mechanism to the RPC.
     *
     * Generated from protobuf field <code>.code.common.v1.Signature signature = 5 [(.validate.rules) = {</code>
     * @param \Code\Common\V1\Signature $var
     * @return $this
     */
    public function setSignature($var)
    {
        GPBUtil::checkMessage($var, \Code\Common\V1\Signature::class);
        $this->signature = $var;

        return $this;
    }

}

