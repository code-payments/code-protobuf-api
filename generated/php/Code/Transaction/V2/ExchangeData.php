<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: transaction/v2/transaction_service.proto

namespace Code\Transaction\V2;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * ExchangeData defines an amount of Kin with currency exchange data
 *
 * Generated from protobuf message <code>code.transaction.v2.ExchangeData</code>
 */
class ExchangeData extends \Google\Protobuf\Internal\Message
{
    /**
     * ISO 4217 alpha-3 currency code.
     *
     * Generated from protobuf field <code>string currency = 1 [(.validate.rules) = {</code>
     */
    protected $currency = '';
    /**
     * The agreed upon exchange rate. This might not be the same as the
     * actual exchange rate at the time of intent or fund transfer.
     *
     * Generated from protobuf field <code>double exchange_rate = 2 [(.validate.rules) = {</code>
     */
    protected $exchange_rate = 0.0;
    /**
     * The agreed upon transfer amount in the currency the payment was made
     * in.
     *
     * Generated from protobuf field <code>double native_amount = 3 [(.validate.rules) = {</code>
     */
    protected $native_amount = 0.0;
    /**
     * The exact amount of quarks to send. This will be used as the source of
     * truth for validating transaction transfer amounts.
     *
     * Generated from protobuf field <code>uint64 quarks = 4 [(.validate.rules) = {</code>
     */
    protected $quarks = 0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $currency
     *           ISO 4217 alpha-3 currency code.
     *     @type float $exchange_rate
     *           The agreed upon exchange rate. This might not be the same as the
     *           actual exchange rate at the time of intent or fund transfer.
     *     @type float $native_amount
     *           The agreed upon transfer amount in the currency the payment was made
     *           in.
     *     @type int|string $quarks
     *           The exact amount of quarks to send. This will be used as the source of
     *           truth for validating transaction transfer amounts.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Transaction\V2\TransactionService::initOnce();
        parent::__construct($data);
    }

    /**
     * ISO 4217 alpha-3 currency code.
     *
     * Generated from protobuf field <code>string currency = 1 [(.validate.rules) = {</code>
     * @return string
     */
    public function getCurrency()
    {
        return $this->currency;
    }

    /**
     * ISO 4217 alpha-3 currency code.
     *
     * Generated from protobuf field <code>string currency = 1 [(.validate.rules) = {</code>
     * @param string $var
     * @return $this
     */
    public function setCurrency($var)
    {
        GPBUtil::checkString($var, True);
        $this->currency = $var;

        return $this;
    }

    /**
     * The agreed upon exchange rate. This might not be the same as the
     * actual exchange rate at the time of intent or fund transfer.
     *
     * Generated from protobuf field <code>double exchange_rate = 2 [(.validate.rules) = {</code>
     * @return float
     */
    public function getExchangeRate()
    {
        return $this->exchange_rate;
    }

    /**
     * The agreed upon exchange rate. This might not be the same as the
     * actual exchange rate at the time of intent or fund transfer.
     *
     * Generated from protobuf field <code>double exchange_rate = 2 [(.validate.rules) = {</code>
     * @param float $var
     * @return $this
     */
    public function setExchangeRate($var)
    {
        GPBUtil::checkDouble($var);
        $this->exchange_rate = $var;

        return $this;
    }

    /**
     * The agreed upon transfer amount in the currency the payment was made
     * in.
     *
     * Generated from protobuf field <code>double native_amount = 3 [(.validate.rules) = {</code>
     * @return float
     */
    public function getNativeAmount()
    {
        return $this->native_amount;
    }

    /**
     * The agreed upon transfer amount in the currency the payment was made
     * in.
     *
     * Generated from protobuf field <code>double native_amount = 3 [(.validate.rules) = {</code>
     * @param float $var
     * @return $this
     */
    public function setNativeAmount($var)
    {
        GPBUtil::checkDouble($var);
        $this->native_amount = $var;

        return $this;
    }

    /**
     * The exact amount of quarks to send. This will be used as the source of
     * truth for validating transaction transfer amounts.
     *
     * Generated from protobuf field <code>uint64 quarks = 4 [(.validate.rules) = {</code>
     * @return int|string
     */
    public function getQuarks()
    {
        return $this->quarks;
    }

    /**
     * The exact amount of quarks to send. This will be used as the source of
     * truth for validating transaction transfer amounts.
     *
     * Generated from protobuf field <code>uint64 quarks = 4 [(.validate.rules) = {</code>
     * @param int|string $var
     * @return $this
     */
    public function setQuarks($var)
    {
        GPBUtil::checkUint64($var);
        $this->quarks = $var;

        return $this;
    }

}

