<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: transaction/v2/transaction_service.proto

namespace Code\Transaction\V2\SubmitIntentRequest;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>code.transaction.v2.SubmitIntentRequest.SubmitActions</code>
 */
class SubmitActions extends \Google\Protobuf\Internal\Message
{
    /**
     * The globally unique client generated intent ID. Use the original intent
     * ID when operating on actions that mutate the intent.
     *
     * Generated from protobuf field <code>.code.common.v1.IntentId id = 1 [(.validate.rules) = {</code>
     */
    protected $id = null;
    /**
     * The verified owner account public key
     *
     * Generated from protobuf field <code>.code.common.v1.SolanaAccountId owner = 2 [(.validate.rules) = {</code>
     */
    protected $owner = null;
    /**
     * Additional metadata that describes the high-level intention
     *
     * Generated from protobuf field <code>.code.transaction.v2.Metadata metadata = 3 [(.validate.rules) = {</code>
     */
    protected $metadata = null;
    /**
     * The set of all ordered actions required to fulfill the intent
     *
     * Generated from protobuf field <code>repeated .code.transaction.v2.Action actions = 4 [(.validate.rules) = {</code>
     */
    private $actions;
    /**
     * The signature is of serialize(SubmitActions) without this field set using the
     * private key of the owner account. This provides an authentication mechanism
     * to the RPC.
     *
     * Generated from protobuf field <code>.code.common.v1.Signature signature = 5 [(.validate.rules) = {</code>
     */
    protected $signature = null;
    /**
     * Device token for antispam measures against fake devices
     *
     * Generated from protobuf field <code>.code.common.v1.DeviceToken device_token = 6;</code>
     */
    protected $device_token = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Code\Common\V1\IntentId $id
     *           The globally unique client generated intent ID. Use the original intent
     *           ID when operating on actions that mutate the intent.
     *     @type \Code\Common\V1\SolanaAccountId $owner
     *           The verified owner account public key
     *     @type \Code\Transaction\V2\Metadata $metadata
     *           Additional metadata that describes the high-level intention
     *     @type array<\Code\Transaction\V2\Action>|\Google\Protobuf\Internal\RepeatedField $actions
     *           The set of all ordered actions required to fulfill the intent
     *     @type \Code\Common\V1\Signature $signature
     *           The signature is of serialize(SubmitActions) without this field set using the
     *           private key of the owner account. This provides an authentication mechanism
     *           to the RPC.
     *     @type \Code\Common\V1\DeviceToken $device_token
     *           Device token for antispam measures against fake devices
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Transaction\V2\TransactionService::initOnce();
        parent::__construct($data);
    }

    /**
     * The globally unique client generated intent ID. Use the original intent
     * ID when operating on actions that mutate the intent.
     *
     * Generated from protobuf field <code>.code.common.v1.IntentId id = 1 [(.validate.rules) = {</code>
     * @return \Code\Common\V1\IntentId|null
     */
    public function getId()
    {
        return $this->id;
    }

    public function hasId()
    {
        return isset($this->id);
    }

    public function clearId()
    {
        unset($this->id);
    }

    /**
     * The globally unique client generated intent ID. Use the original intent
     * ID when operating on actions that mutate the intent.
     *
     * Generated from protobuf field <code>.code.common.v1.IntentId id = 1 [(.validate.rules) = {</code>
     * @param \Code\Common\V1\IntentId $var
     * @return $this
     */
    public function setId($var)
    {
        GPBUtil::checkMessage($var, \Code\Common\V1\IntentId::class);
        $this->id = $var;

        return $this;
    }

    /**
     * The verified owner account public key
     *
     * Generated from protobuf field <code>.code.common.v1.SolanaAccountId owner = 2 [(.validate.rules) = {</code>
     * @return \Code\Common\V1\SolanaAccountId|null
     */
    public function getOwner()
    {
        return $this->owner;
    }

    public function hasOwner()
    {
        return isset($this->owner);
    }

    public function clearOwner()
    {
        unset($this->owner);
    }

    /**
     * The verified owner account public key
     *
     * Generated from protobuf field <code>.code.common.v1.SolanaAccountId owner = 2 [(.validate.rules) = {</code>
     * @param \Code\Common\V1\SolanaAccountId $var
     * @return $this
     */
    public function setOwner($var)
    {
        GPBUtil::checkMessage($var, \Code\Common\V1\SolanaAccountId::class);
        $this->owner = $var;

        return $this;
    }

    /**
     * Additional metadata that describes the high-level intention
     *
     * Generated from protobuf field <code>.code.transaction.v2.Metadata metadata = 3 [(.validate.rules) = {</code>
     * @return \Code\Transaction\V2\Metadata|null
     */
    public function getMetadata()
    {
        return $this->metadata;
    }

    public function hasMetadata()
    {
        return isset($this->metadata);
    }

    public function clearMetadata()
    {
        unset($this->metadata);
    }

    /**
     * Additional metadata that describes the high-level intention
     *
     * Generated from protobuf field <code>.code.transaction.v2.Metadata metadata = 3 [(.validate.rules) = {</code>
     * @param \Code\Transaction\V2\Metadata $var
     * @return $this
     */
    public function setMetadata($var)
    {
        GPBUtil::checkMessage($var, \Code\Transaction\V2\Metadata::class);
        $this->metadata = $var;

        return $this;
    }

    /**
     * The set of all ordered actions required to fulfill the intent
     *
     * Generated from protobuf field <code>repeated .code.transaction.v2.Action actions = 4 [(.validate.rules) = {</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getActions()
    {
        return $this->actions;
    }

    /**
     * The set of all ordered actions required to fulfill the intent
     *
     * Generated from protobuf field <code>repeated .code.transaction.v2.Action actions = 4 [(.validate.rules) = {</code>
     * @param array<\Code\Transaction\V2\Action>|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setActions($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Code\Transaction\V2\Action::class);
        $this->actions = $arr;

        return $this;
    }

    /**
     * The signature is of serialize(SubmitActions) without this field set using the
     * private key of the owner account. This provides an authentication mechanism
     * to the RPC.
     *
     * Generated from protobuf field <code>.code.common.v1.Signature signature = 5 [(.validate.rules) = {</code>
     * @return \Code\Common\V1\Signature|null
     */
    public function getSignature()
    {
        return $this->signature;
    }

    public function hasSignature()
    {
        return isset($this->signature);
    }

    public function clearSignature()
    {
        unset($this->signature);
    }

    /**
     * The signature is of serialize(SubmitActions) without this field set using the
     * private key of the owner account. This provides an authentication mechanism
     * to the RPC.
     *
     * Generated from protobuf field <code>.code.common.v1.Signature signature = 5 [(.validate.rules) = {</code>
     * @param \Code\Common\V1\Signature $var
     * @return $this
     */
    public function setSignature($var)
    {
        GPBUtil::checkMessage($var, \Code\Common\V1\Signature::class);
        $this->signature = $var;

        return $this;
    }

    /**
     * Device token for antispam measures against fake devices
     *
     * Generated from protobuf field <code>.code.common.v1.DeviceToken device_token = 6;</code>
     * @return \Code\Common\V1\DeviceToken|null
     */
    public function getDeviceToken()
    {
        return $this->device_token;
    }

    public function hasDeviceToken()
    {
        return isset($this->device_token);
    }

    public function clearDeviceToken()
    {
        unset($this->device_token);
    }

    /**
     * Device token for antispam measures against fake devices
     *
     * Generated from protobuf field <code>.code.common.v1.DeviceToken device_token = 6;</code>
     * @param \Code\Common\V1\DeviceToken $var
     * @return $this
     */
    public function setDeviceToken($var)
    {
        GPBUtil::checkMessage($var, \Code\Common\V1\DeviceToken::class);
        $this->device_token = $var;

        return $this;
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(SubmitActions::class, \Code\Transaction\V2\SubmitIntentRequest_SubmitActions::class);

