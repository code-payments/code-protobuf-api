<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: transaction/v2/transaction_service.proto

namespace Code\Transaction\V2\SubmitIntentResponse\Error;

use UnexpectedValueException;

/**
 * Protobuf type <code>code.transaction.v2.SubmitIntentResponse.Error.Code</code>
 */
class Code
{
    /**
     * Denied by a guard (spam, money laundering, etc)
     *
     * Generated from protobuf enum <code>DENIED = 0;</code>
     */
    const DENIED = 0;
    /**
     * The intent is invalid.
     *
     * Generated from protobuf enum <code>INVALID_INTENT = 1;</code>
     */
    const INVALID_INTENT = 1;
    /**
     * There is an issue with provided signatures.
     *
     * Generated from protobuf enum <code>SIGNATURE_ERROR = 2;</code>
     */
    const SIGNATURE_ERROR = 2;
    /**
     * Server detected client has stale state.
     *
     * Generated from protobuf enum <code>STALE_STATE = 3;</code>
     */
    const STALE_STATE = 3;

    private static $valueToName = [
        self::DENIED => 'DENIED',
        self::INVALID_INTENT => 'INVALID_INTENT',
        self::SIGNATURE_ERROR => 'SIGNATURE_ERROR',
        self::STALE_STATE => 'STALE_STATE',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Code::class, \Code\Transaction\V2\SubmitIntentResponse_Error_Code::class);

