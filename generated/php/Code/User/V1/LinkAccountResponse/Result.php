<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: user/v1/identity_service.proto

namespace Code\User\V1\LinkAccountResponse;

use UnexpectedValueException;

/**
 * Protobuf type <code>code.user.v1.LinkAccountResponse.Result</code>
 */
class Result
{
    /**
     * Generated from protobuf enum <code>OK = 0;</code>
     */
    const OK = 0;
    /**
     * The provided token is invalid. A token may be invalid for a number of
     * reasons including: it's already been used, has been modified by the
     * client or has expired.
     *
     * Generated from protobuf enum <code>INVALID_TOKEN = 1;</code>
     */
    const INVALID_TOKEN = 1;
    /**
     * The client is rate limited (eg. by IP, user ID, etc). The client should
     * retry at a later time.
     *
     * Generated from protobuf enum <code>RATE_LIMITED = 2;</code>
     */
    const RATE_LIMITED = 2;

    private static $valueToName = [
        self::OK => 'OK',
        self::INVALID_TOKEN => 'INVALID_TOKEN',
        self::RATE_LIMITED => 'RATE_LIMITED',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Result::class, \Code\User\V1\LinkAccountResponse_Result::class);

