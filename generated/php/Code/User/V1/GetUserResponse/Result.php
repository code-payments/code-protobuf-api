<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: user/v1/identity_service.proto

namespace Code\User\V1\GetUserResponse;

use UnexpectedValueException;

/**
 * Protobuf type <code>code.user.v1.GetUserResponse.Result</code>
 */
class Result
{
    /**
     * Generated from protobuf enum <code>OK = 0;</code>
     */
    const OK = 0;
    /**
     * The user doesn't exist
     *
     * Generated from protobuf enum <code>NOT_FOUND = 1;</code>
     */
    const NOT_FOUND = 1;
    /**
     * The user is no longer invited
     *
     * Generated from protobuf enum <code>NOT_INVITED = 2;</code>
     */
    const NOT_INVITED = 2;
    /**
     * The user exists, but at least one of their timelock accounts is unlocked
     *
     * Generated from protobuf enum <code>UNLOCKED_TIMELOCK_ACCOUNT = 3;</code>
     */
    const UNLOCKED_TIMELOCK_ACCOUNT = 3;

    private static $valueToName = [
        self::OK => 'OK',
        self::NOT_FOUND => 'NOT_FOUND',
        self::NOT_INVITED => 'NOT_INVITED',
        self::UNLOCKED_TIMELOCK_ACCOUNT => 'UNLOCKED_TIMELOCK_ACCOUNT',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Result::class, \Code\User\V1\GetUserResponse_Result::class);

