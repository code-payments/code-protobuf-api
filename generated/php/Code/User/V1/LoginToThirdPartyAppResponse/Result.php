<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: user/v1/identity_service.proto

namespace Code\User\V1\LoginToThirdPartyAppResponse;

use UnexpectedValueException;

/**
 * Protobuf type <code>code.user.v1.LoginToThirdPartyAppResponse.Result</code>
 */
class Result
{
    /**
     * This supports idempotency. The same login with the same user will result
     * in OK.
     *
     * Generated from protobuf enum <code>OK = 0;</code>
     */
    const OK = 0;
    /**
     * There is no request for the provided intent ID.
     *
     * Generated from protobuf enum <code>REQUEST_NOT_FOUND = 1;</code>
     */
    const REQUEST_NOT_FOUND = 1;
    /**
     * The request requires a payment. Call SubmitIntent instead.
     *
     * Generated from protobuf enum <code>PAYMENT_REQUIRED = 2;</code>
     */
    const PAYMENT_REQUIRED = 2;
    /**
     * The request exists, but doesn't support login.
     *
     * Generated from protobuf enum <code>LOGIN_NOT_SUPPORTED = 3;</code>
     */
    const LOGIN_NOT_SUPPORTED = 3;
    /**
     * A login with a different user already exists
     *
     * Generated from protobuf enum <code>DIFFERENT_LOGIN_EXISTS = 4;</code>
     */
    const DIFFERENT_LOGIN_EXISTS = 4;
    /**
     * The provided account is not valid for login. It must be a relationship
     * account with the correct identifier specified in the original request.
     *
     * Generated from protobuf enum <code>INVALID_ACCOUNT = 5;</code>
     */
    const INVALID_ACCOUNT = 5;

    private static $valueToName = [
        self::OK => 'OK',
        self::REQUEST_NOT_FOUND => 'REQUEST_NOT_FOUND',
        self::PAYMENT_REQUIRED => 'PAYMENT_REQUIRED',
        self::LOGIN_NOT_SUPPORTED => 'LOGIN_NOT_SUPPORTED',
        self::DIFFERENT_LOGIN_EXISTS => 'DIFFERENT_LOGIN_EXISTS',
        self::INVALID_ACCOUNT => 'INVALID_ACCOUNT',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Result::class, \Code\User\V1\LoginToThirdPartyAppResponse_Result::class);

