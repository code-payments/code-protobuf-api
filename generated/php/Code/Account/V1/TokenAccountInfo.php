<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: account/v1/account_service.proto

namespace Code\Account\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>code.account.v1.TokenAccountInfo</code>
 */
class TokenAccountInfo extends \Google\Protobuf\Internal\Message
{
    /**
     * The token account's address
     *
     * Generated from protobuf field <code>.code.common.v1.SolanaAccountId address = 1 [(.validate.rules) = {</code>
     */
    protected $address = null;
    /**
     * The owner of the token account, which can also be thought of as a parent
     * account that links to one or more token accounts. This is provided when
     * available.
     *
     * Generated from protobuf field <code>.code.common.v1.SolanaAccountId owner = 2;</code>
     */
    protected $owner = null;
    /**
     * The token account's authority, which has access to moving funds for the
     * account. This can be the owner account under certain circumstances (eg.
     * ATA, primary account). This is provided when available.
     *
     * Generated from protobuf field <code>.code.common.v1.SolanaAccountId authority = 3;</code>
     */
    protected $authority = null;
    /**
     * The type of token account, which infers its intended use.
     *
     * Generated from protobuf field <code>.code.common.v1.AccountType account_type = 4 [(.validate.rules) = {</code>
     */
    protected $account_type = 0;
    /**
     * The account's derivation index for applicable account types. When this field
     * doesn't apply, a zero value is provided.
     *
     * Generated from protobuf field <code>uint64 index = 5;</code>
     */
    protected $index = 0;
    /**
     * The source of truth for the balance calculation.
     *
     * Generated from protobuf field <code>.code.account.v1.TokenAccountInfo.BalanceSource balance_source = 6;</code>
     */
    protected $balance_source = 0;
    /**
     * The balance in quarks, as observed by Code. This may not reflect the value
     * on the blockchain and could be non-zero even if the account hasn't been created.
     * Use balance_source to determine how this value was calculated.
     *
     * Generated from protobuf field <code>uint64 balance = 7;</code>
     */
    protected $balance = 0;
    /**
     * The state of the account as it pertains to Code's ability to manage funds.
     *
     * Generated from protobuf field <code>.code.account.v1.TokenAccountInfo.ManagementState management_state = 8;</code>
     */
    protected $management_state = 0;
    /**
     * The state of the account on the blockchain.
     *
     * Generated from protobuf field <code>.code.account.v1.TokenAccountInfo.BlockchainState blockchain_state = 9;</code>
     */
    protected $blockchain_state = 0;
    /**
     * For temporary incoming accounts only. Flag indicates whether client must
     * actively try rotating it by issuing a ReceivePaymentsPrivately intent. In
     * general, clients should wait as long as possible until this flag is true
     * or requiring the funds to send their next payment.
     *
     * Generated from protobuf field <code>bool must_rotate = 10;</code>
     */
    protected $must_rotate = false;
    /**
     * Whether an account is claimed. This only applies to relevant account types
     * (eg. REMOTE_SEND_GIFT_CARD).
     *
     * Generated from protobuf field <code>.code.account.v1.TokenAccountInfo.ClaimState claim_state = 11;</code>
     */
    protected $claim_state = 0;
    /**
     * For account types used as an intermediary for sending money between two
     * users (eg. REMOTE_SEND_GIFT_CARD), this represents the original exchange
     * data used to fund the account. Over time, this value will become stale:
     *  1. Exchange rates will fluctuate, so the total fiat amount will differ.
     *  2. External entities can deposit additional funds into the account, so
     *     the balance, in quarks, may be greater than the original quark value.
     *  3. The balance could have been received, so the total balance can show
     *     as zero.
     *
     * Generated from protobuf field <code>.code.transaction.v2.ExchangeData original_exchange_data = 12;</code>
     */
    protected $original_exchange_data = null;
    /**
     * The token account's mint
     *
     * Generated from protobuf field <code>.code.common.v1.SolanaAccountId mint = 13;</code>
     */
    protected $mint = null;
    /**
     * The relationship with a third party that this account has established with.
     * This only applies to relevant account types (eg. RELATIONSHIP).
     *
     * Generated from protobuf field <code>.code.common.v1.Relationship relationship = 16;</code>
     */
    protected $relationship = null;
    /**
     * Time the account was created, if available. For Code accounts, this is
     * the time of intent submission. Otherwise, for external accounts, it is
     * the tiem created on the blockchain.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp created_at = 17;</code>
     */
    protected $created_at = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Code\Common\V1\SolanaAccountId $address
     *           The token account's address
     *     @type \Code\Common\V1\SolanaAccountId $owner
     *           The owner of the token account, which can also be thought of as a parent
     *           account that links to one or more token accounts. This is provided when
     *           available.
     *     @type \Code\Common\V1\SolanaAccountId $authority
     *           The token account's authority, which has access to moving funds for the
     *           account. This can be the owner account under certain circumstances (eg.
     *           ATA, primary account). This is provided when available.
     *     @type int $account_type
     *           The type of token account, which infers its intended use.
     *     @type int|string $index
     *           The account's derivation index for applicable account types. When this field
     *           doesn't apply, a zero value is provided.
     *     @type int $balance_source
     *           The source of truth for the balance calculation.
     *     @type int|string $balance
     *           The balance in quarks, as observed by Code. This may not reflect the value
     *           on the blockchain and could be non-zero even if the account hasn't been created.
     *           Use balance_source to determine how this value was calculated.
     *     @type int $management_state
     *           The state of the account as it pertains to Code's ability to manage funds.
     *     @type int $blockchain_state
     *           The state of the account on the blockchain.
     *     @type bool $must_rotate
     *           For temporary incoming accounts only. Flag indicates whether client must
     *           actively try rotating it by issuing a ReceivePaymentsPrivately intent. In
     *           general, clients should wait as long as possible until this flag is true
     *           or requiring the funds to send their next payment.
     *     @type int $claim_state
     *           Whether an account is claimed. This only applies to relevant account types
     *           (eg. REMOTE_SEND_GIFT_CARD).
     *     @type \Code\Transaction\V2\ExchangeData $original_exchange_data
     *           For account types used as an intermediary for sending money between two
     *           users (eg. REMOTE_SEND_GIFT_CARD), this represents the original exchange
     *           data used to fund the account. Over time, this value will become stale:
     *            1. Exchange rates will fluctuate, so the total fiat amount will differ.
     *            2. External entities can deposit additional funds into the account, so
     *               the balance, in quarks, may be greater than the original quark value.
     *            3. The balance could have been received, so the total balance can show
     *               as zero.
     *     @type \Code\Common\V1\SolanaAccountId $mint
     *           The token account's mint
     *     @type \Code\Common\V1\Relationship $relationship
     *           The relationship with a third party that this account has established with.
     *           This only applies to relevant account types (eg. RELATIONSHIP).
     *     @type \Google\Protobuf\Timestamp $created_at
     *           Time the account was created, if available. For Code accounts, this is
     *           the time of intent submission. Otherwise, for external accounts, it is
     *           the tiem created on the blockchain.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Account\V1\AccountService::initOnce();
        parent::__construct($data);
    }

    /**
     * The token account's address
     *
     * Generated from protobuf field <code>.code.common.v1.SolanaAccountId address = 1 [(.validate.rules) = {</code>
     * @return \Code\Common\V1\SolanaAccountId|null
     */
    public function getAddress()
    {
        return $this->address;
    }

    public function hasAddress()
    {
        return isset($this->address);
    }

    public function clearAddress()
    {
        unset($this->address);
    }

    /**
     * The token account's address
     *
     * Generated from protobuf field <code>.code.common.v1.SolanaAccountId address = 1 [(.validate.rules) = {</code>
     * @param \Code\Common\V1\SolanaAccountId $var
     * @return $this
     */
    public function setAddress($var)
    {
        GPBUtil::checkMessage($var, \Code\Common\V1\SolanaAccountId::class);
        $this->address = $var;

        return $this;
    }

    /**
     * The owner of the token account, which can also be thought of as a parent
     * account that links to one or more token accounts. This is provided when
     * available.
     *
     * Generated from protobuf field <code>.code.common.v1.SolanaAccountId owner = 2;</code>
     * @return \Code\Common\V1\SolanaAccountId|null
     */
    public function getOwner()
    {
        return $this->owner;
    }

    public function hasOwner()
    {
        return isset($this->owner);
    }

    public function clearOwner()
    {
        unset($this->owner);
    }

    /**
     * The owner of the token account, which can also be thought of as a parent
     * account that links to one or more token accounts. This is provided when
     * available.
     *
     * Generated from protobuf field <code>.code.common.v1.SolanaAccountId owner = 2;</code>
     * @param \Code\Common\V1\SolanaAccountId $var
     * @return $this
     */
    public function setOwner($var)
    {
        GPBUtil::checkMessage($var, \Code\Common\V1\SolanaAccountId::class);
        $this->owner = $var;

        return $this;
    }

    /**
     * The token account's authority, which has access to moving funds for the
     * account. This can be the owner account under certain circumstances (eg.
     * ATA, primary account). This is provided when available.
     *
     * Generated from protobuf field <code>.code.common.v1.SolanaAccountId authority = 3;</code>
     * @return \Code\Common\V1\SolanaAccountId|null
     */
    public function getAuthority()
    {
        return $this->authority;
    }

    public function hasAuthority()
    {
        return isset($this->authority);
    }

    public function clearAuthority()
    {
        unset($this->authority);
    }

    /**
     * The token account's authority, which has access to moving funds for the
     * account. This can be the owner account under certain circumstances (eg.
     * ATA, primary account). This is provided when available.
     *
     * Generated from protobuf field <code>.code.common.v1.SolanaAccountId authority = 3;</code>
     * @param \Code\Common\V1\SolanaAccountId $var
     * @return $this
     */
    public function setAuthority($var)
    {
        GPBUtil::checkMessage($var, \Code\Common\V1\SolanaAccountId::class);
        $this->authority = $var;

        return $this;
    }

    /**
     * The type of token account, which infers its intended use.
     *
     * Generated from protobuf field <code>.code.common.v1.AccountType account_type = 4 [(.validate.rules) = {</code>
     * @return int
     */
    public function getAccountType()
    {
        return $this->account_type;
    }

    /**
     * The type of token account, which infers its intended use.
     *
     * Generated from protobuf field <code>.code.common.v1.AccountType account_type = 4 [(.validate.rules) = {</code>
     * @param int $var
     * @return $this
     */
    public function setAccountType($var)
    {
        GPBUtil::checkEnum($var, \Code\Common\V1\AccountType::class);
        $this->account_type = $var;

        return $this;
    }

    /**
     * The account's derivation index for applicable account types. When this field
     * doesn't apply, a zero value is provided.
     *
     * Generated from protobuf field <code>uint64 index = 5;</code>
     * @return int|string
     */
    public function getIndex()
    {
        return $this->index;
    }

    /**
     * The account's derivation index for applicable account types. When this field
     * doesn't apply, a zero value is provided.
     *
     * Generated from protobuf field <code>uint64 index = 5;</code>
     * @param int|string $var
     * @return $this
     */
    public function setIndex($var)
    {
        GPBUtil::checkUint64($var);
        $this->index = $var;

        return $this;
    }

    /**
     * The source of truth for the balance calculation.
     *
     * Generated from protobuf field <code>.code.account.v1.TokenAccountInfo.BalanceSource balance_source = 6;</code>
     * @return int
     */
    public function getBalanceSource()
    {
        return $this->balance_source;
    }

    /**
     * The source of truth for the balance calculation.
     *
     * Generated from protobuf field <code>.code.account.v1.TokenAccountInfo.BalanceSource balance_source = 6;</code>
     * @param int $var
     * @return $this
     */
    public function setBalanceSource($var)
    {
        GPBUtil::checkEnum($var, \Code\Account\V1\TokenAccountInfo\BalanceSource::class);
        $this->balance_source = $var;

        return $this;
    }

    /**
     * The balance in quarks, as observed by Code. This may not reflect the value
     * on the blockchain and could be non-zero even if the account hasn't been created.
     * Use balance_source to determine how this value was calculated.
     *
     * Generated from protobuf field <code>uint64 balance = 7;</code>
     * @return int|string
     */
    public function getBalance()
    {
        return $this->balance;
    }

    /**
     * The balance in quarks, as observed by Code. This may not reflect the value
     * on the blockchain and could be non-zero even if the account hasn't been created.
     * Use balance_source to determine how this value was calculated.
     *
     * Generated from protobuf field <code>uint64 balance = 7;</code>
     * @param int|string $var
     * @return $this
     */
    public function setBalance($var)
    {
        GPBUtil::checkUint64($var);
        $this->balance = $var;

        return $this;
    }

    /**
     * The state of the account as it pertains to Code's ability to manage funds.
     *
     * Generated from protobuf field <code>.code.account.v1.TokenAccountInfo.ManagementState management_state = 8;</code>
     * @return int
     */
    public function getManagementState()
    {
        return $this->management_state;
    }

    /**
     * The state of the account as it pertains to Code's ability to manage funds.
     *
     * Generated from protobuf field <code>.code.account.v1.TokenAccountInfo.ManagementState management_state = 8;</code>
     * @param int $var
     * @return $this
     */
    public function setManagementState($var)
    {
        GPBUtil::checkEnum($var, \Code\Account\V1\TokenAccountInfo\ManagementState::class);
        $this->management_state = $var;

        return $this;
    }

    /**
     * The state of the account on the blockchain.
     *
     * Generated from protobuf field <code>.code.account.v1.TokenAccountInfo.BlockchainState blockchain_state = 9;</code>
     * @return int
     */
    public function getBlockchainState()
    {
        return $this->blockchain_state;
    }

    /**
     * The state of the account on the blockchain.
     *
     * Generated from protobuf field <code>.code.account.v1.TokenAccountInfo.BlockchainState blockchain_state = 9;</code>
     * @param int $var
     * @return $this
     */
    public function setBlockchainState($var)
    {
        GPBUtil::checkEnum($var, \Code\Account\V1\TokenAccountInfo\BlockchainState::class);
        $this->blockchain_state = $var;

        return $this;
    }

    /**
     * For temporary incoming accounts only. Flag indicates whether client must
     * actively try rotating it by issuing a ReceivePaymentsPrivately intent. In
     * general, clients should wait as long as possible until this flag is true
     * or requiring the funds to send their next payment.
     *
     * Generated from protobuf field <code>bool must_rotate = 10;</code>
     * @return bool
     */
    public function getMustRotate()
    {
        return $this->must_rotate;
    }

    /**
     * For temporary incoming accounts only. Flag indicates whether client must
     * actively try rotating it by issuing a ReceivePaymentsPrivately intent. In
     * general, clients should wait as long as possible until this flag is true
     * or requiring the funds to send their next payment.
     *
     * Generated from protobuf field <code>bool must_rotate = 10;</code>
     * @param bool $var
     * @return $this
     */
    public function setMustRotate($var)
    {
        GPBUtil::checkBool($var);
        $this->must_rotate = $var;

        return $this;
    }

    /**
     * Whether an account is claimed. This only applies to relevant account types
     * (eg. REMOTE_SEND_GIFT_CARD).
     *
     * Generated from protobuf field <code>.code.account.v1.TokenAccountInfo.ClaimState claim_state = 11;</code>
     * @return int
     */
    public function getClaimState()
    {
        return $this->claim_state;
    }

    /**
     * Whether an account is claimed. This only applies to relevant account types
     * (eg. REMOTE_SEND_GIFT_CARD).
     *
     * Generated from protobuf field <code>.code.account.v1.TokenAccountInfo.ClaimState claim_state = 11;</code>
     * @param int $var
     * @return $this
     */
    public function setClaimState($var)
    {
        GPBUtil::checkEnum($var, \Code\Account\V1\TokenAccountInfo\ClaimState::class);
        $this->claim_state = $var;

        return $this;
    }

    /**
     * For account types used as an intermediary for sending money between two
     * users (eg. REMOTE_SEND_GIFT_CARD), this represents the original exchange
     * data used to fund the account. Over time, this value will become stale:
     *  1. Exchange rates will fluctuate, so the total fiat amount will differ.
     *  2. External entities can deposit additional funds into the account, so
     *     the balance, in quarks, may be greater than the original quark value.
     *  3. The balance could have been received, so the total balance can show
     *     as zero.
     *
     * Generated from protobuf field <code>.code.transaction.v2.ExchangeData original_exchange_data = 12;</code>
     * @return \Code\Transaction\V2\ExchangeData|null
     */
    public function getOriginalExchangeData()
    {
        return $this->original_exchange_data;
    }

    public function hasOriginalExchangeData()
    {
        return isset($this->original_exchange_data);
    }

    public function clearOriginalExchangeData()
    {
        unset($this->original_exchange_data);
    }

    /**
     * For account types used as an intermediary for sending money between two
     * users (eg. REMOTE_SEND_GIFT_CARD), this represents the original exchange
     * data used to fund the account. Over time, this value will become stale:
     *  1. Exchange rates will fluctuate, so the total fiat amount will differ.
     *  2. External entities can deposit additional funds into the account, so
     *     the balance, in quarks, may be greater than the original quark value.
     *  3. The balance could have been received, so the total balance can show
     *     as zero.
     *
     * Generated from protobuf field <code>.code.transaction.v2.ExchangeData original_exchange_data = 12;</code>
     * @param \Code\Transaction\V2\ExchangeData $var
     * @return $this
     */
    public function setOriginalExchangeData($var)
    {
        GPBUtil::checkMessage($var, \Code\Transaction\V2\ExchangeData::class);
        $this->original_exchange_data = $var;

        return $this;
    }

    /**
     * The token account's mint
     *
     * Generated from protobuf field <code>.code.common.v1.SolanaAccountId mint = 13;</code>
     * @return \Code\Common\V1\SolanaAccountId|null
     */
    public function getMint()
    {
        return $this->mint;
    }

    public function hasMint()
    {
        return isset($this->mint);
    }

    public function clearMint()
    {
        unset($this->mint);
    }

    /**
     * The token account's mint
     *
     * Generated from protobuf field <code>.code.common.v1.SolanaAccountId mint = 13;</code>
     * @param \Code\Common\V1\SolanaAccountId $var
     * @return $this
     */
    public function setMint($var)
    {
        GPBUtil::checkMessage($var, \Code\Common\V1\SolanaAccountId::class);
        $this->mint = $var;

        return $this;
    }

    /**
     * The relationship with a third party that this account has established with.
     * This only applies to relevant account types (eg. RELATIONSHIP).
     *
     * Generated from protobuf field <code>.code.common.v1.Relationship relationship = 16;</code>
     * @return \Code\Common\V1\Relationship|null
     */
    public function getRelationship()
    {
        return $this->relationship;
    }

    public function hasRelationship()
    {
        return isset($this->relationship);
    }

    public function clearRelationship()
    {
        unset($this->relationship);
    }

    /**
     * The relationship with a third party that this account has established with.
     * This only applies to relevant account types (eg. RELATIONSHIP).
     *
     * Generated from protobuf field <code>.code.common.v1.Relationship relationship = 16;</code>
     * @param \Code\Common\V1\Relationship $var
     * @return $this
     */
    public function setRelationship($var)
    {
        GPBUtil::checkMessage($var, \Code\Common\V1\Relationship::class);
        $this->relationship = $var;

        return $this;
    }

    /**
     * Time the account was created, if available. For Code accounts, this is
     * the time of intent submission. Otherwise, for external accounts, it is
     * the tiem created on the blockchain.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp created_at = 17;</code>
     * @return \Google\Protobuf\Timestamp|null
     */
    public function getCreatedAt()
    {
        return $this->created_at;
    }

    public function hasCreatedAt()
    {
        return isset($this->created_at);
    }

    public function clearCreatedAt()
    {
        unset($this->created_at);
    }

    /**
     * Time the account was created, if available. For Code accounts, this is
     * the time of intent submission. Otherwise, for external accounts, it is
     * the tiem created on the blockchain.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp created_at = 17;</code>
     * @param \Google\Protobuf\Timestamp $var
     * @return $this
     */
    public function setCreatedAt($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->created_at = $var;

        return $this;
    }

}

