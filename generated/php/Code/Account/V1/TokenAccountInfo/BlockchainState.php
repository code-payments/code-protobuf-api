<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: account/v1/account_service.proto

namespace Code\Account\V1\TokenAccountInfo;

use UnexpectedValueException;

/**
 * Protobuf type <code>code.account.v1.TokenAccountInfo.BlockchainState</code>
 */
class BlockchainState
{
    /**
     * The state of the account is unknown. This may be returned when the
     * data source is unstable and a reliable state cannot be determined.
     *
     * Generated from protobuf enum <code>BLOCKCHAIN_STATE_UNKNOWN = 0;</code>
     */
    const BLOCKCHAIN_STATE_UNKNOWN = 0;
    /**
     * The account does not exist on the blockchain.
     *
     * Generated from protobuf enum <code>BLOCKCHAIN_STATE_DOES_NOT_EXIST = 1;</code>
     */
    const BLOCKCHAIN_STATE_DOES_NOT_EXIST = 1;
    /**
     * The account is created and exists on the blockchain.
     *
     * Generated from protobuf enum <code>BLOCKCHAIN_STATE_EXISTS = 2;</code>
     */
    const BLOCKCHAIN_STATE_EXISTS = 2;

    private static $valueToName = [
        self::BLOCKCHAIN_STATE_UNKNOWN => 'BLOCKCHAIN_STATE_UNKNOWN',
        self::BLOCKCHAIN_STATE_DOES_NOT_EXIST => 'BLOCKCHAIN_STATE_DOES_NOT_EXIST',
        self::BLOCKCHAIN_STATE_EXISTS => 'BLOCKCHAIN_STATE_EXISTS',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(BlockchainState::class, \Code\Account\V1\TokenAccountInfo_BlockchainState::class);

