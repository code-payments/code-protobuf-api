<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: messaging/v1/messaging_service.proto

namespace Code\Messaging\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Request that a bill of a requested value is created and sent to the requested
 * address.
 * This message type is only initiated by clients.
 *
 * Generated from protobuf message <code>code.messaging.v1.RequestToReceiveBill</code>
 */
class RequestToReceiveBill extends \Google\Protobuf\Internal\Message
{
    /**
     * Requestor is the Kin token account on Solana to which a payment should be sent.
     *
     * Generated from protobuf field <code>.code.common.v1.SolanaAccountId requestor_account = 1 [(.validate.rules) = {</code>
     */
    protected $requestor_account = null;
    /**
     * The third-party's domain name, which is its primary identifier. Server
     * guarantees to perform domain verification against the verifier account.
     *
     * Generated from protobuf field <code>.code.common.v1.Domain domain = 4;</code>
     */
    protected $domain = null;
    /**
     * Owner account owned by the third party used in domain verification.
     *
     * Generated from protobuf field <code>.code.common.v1.SolanaAccountId verifier = 5;</code>
     */
    protected $verifier = null;
    /**
     * Signature of this message using the verifier private key, which in addition
     * to domain verification, authenticates the third party.
     *
     * Generated from protobuf field <code>.code.common.v1.Signature signature = 6;</code>
     */
    protected $signature = null;
    /**
     * Rendezvous key to avoid replay attacks
     *
     * Generated from protobuf field <code>.code.messaging.v1.RendezvousKey rendezvous_key = 7;</code>
     */
    protected $rendezvous_key = null;
    /**
     * Additional fee payments splitting the requested amount. This is in addition
     * to the hard-coded Code $0.01 USD fee.
     *
     * Generated from protobuf field <code>repeated .code.transaction.v2.AdditionalFeePayment additional_fees = 8 [(.validate.rules) = {</code>
     */
    private $additional_fees;
    protected $exchange_data;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Code\Common\V1\SolanaAccountId $requestor_account
     *           Requestor is the Kin token account on Solana to which a payment should be sent.
     *     @type \Code\Transaction\V2\ExchangeData $exact
     *           An exact amount of Kin. Payment is guaranteed to transfer the specified
     *           quarks in the requested currency and exchange rate.
     *           Only supports Kin. Use exchange_data.partial for fiat amounts.
     *     @type \Code\Transaction\V2\ExchangeDataWithoutRate $partial
     *           Fiat amount request. The amount of Kin is determined at time of payment
     *           with a recent exchange rate provided by the paying client and validatd
     *           by server.
     *           Only supports fiat amounts. Use exchange_data.exact for Kin.
     *     @type \Code\Common\V1\Domain $domain
     *           The third-party's domain name, which is its primary identifier. Server
     *           guarantees to perform domain verification against the verifier account.
     *     @type \Code\Common\V1\SolanaAccountId $verifier
     *           Owner account owned by the third party used in domain verification.
     *     @type \Code\Common\V1\Signature $signature
     *           Signature of this message using the verifier private key, which in addition
     *           to domain verification, authenticates the third party.
     *     @type \Code\Messaging\V1\RendezvousKey $rendezvous_key
     *           Rendezvous key to avoid replay attacks
     *     @type array<\Code\Transaction\V2\AdditionalFeePayment>|\Google\Protobuf\Internal\RepeatedField $additional_fees
     *           Additional fee payments splitting the requested amount. This is in addition
     *           to the hard-coded Code $0.01 USD fee.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Messaging\V1\MessagingService::initOnce();
        parent::__construct($data);
    }

    /**
     * Requestor is the Kin token account on Solana to which a payment should be sent.
     *
     * Generated from protobuf field <code>.code.common.v1.SolanaAccountId requestor_account = 1 [(.validate.rules) = {</code>
     * @return \Code\Common\V1\SolanaAccountId|null
     */
    public function getRequestorAccount()
    {
        return $this->requestor_account;
    }

    public function hasRequestorAccount()
    {
        return isset($this->requestor_account);
    }

    public function clearRequestorAccount()
    {
        unset($this->requestor_account);
    }

    /**
     * Requestor is the Kin token account on Solana to which a payment should be sent.
     *
     * Generated from protobuf field <code>.code.common.v1.SolanaAccountId requestor_account = 1 [(.validate.rules) = {</code>
     * @param \Code\Common\V1\SolanaAccountId $var
     * @return $this
     */
    public function setRequestorAccount($var)
    {
        GPBUtil::checkMessage($var, \Code\Common\V1\SolanaAccountId::class);
        $this->requestor_account = $var;

        return $this;
    }

    /**
     * An exact amount of Kin. Payment is guaranteed to transfer the specified
     * quarks in the requested currency and exchange rate.
     * Only supports Kin. Use exchange_data.partial for fiat amounts.
     *
     * Generated from protobuf field <code>.code.transaction.v2.ExchangeData exact = 2;</code>
     * @return \Code\Transaction\V2\ExchangeData|null
     */
    public function getExact()
    {
        return $this->readOneof(2);
    }

    public function hasExact()
    {
        return $this->hasOneof(2);
    }

    /**
     * An exact amount of Kin. Payment is guaranteed to transfer the specified
     * quarks in the requested currency and exchange rate.
     * Only supports Kin. Use exchange_data.partial for fiat amounts.
     *
     * Generated from protobuf field <code>.code.transaction.v2.ExchangeData exact = 2;</code>
     * @param \Code\Transaction\V2\ExchangeData $var
     * @return $this
     */
    public function setExact($var)
    {
        GPBUtil::checkMessage($var, \Code\Transaction\V2\ExchangeData::class);
        $this->writeOneof(2, $var);

        return $this;
    }

    /**
     * Fiat amount request. The amount of Kin is determined at time of payment
     * with a recent exchange rate provided by the paying client and validatd
     * by server.
     * Only supports fiat amounts. Use exchange_data.exact for Kin.
     *
     * Generated from protobuf field <code>.code.transaction.v2.ExchangeDataWithoutRate partial = 3;</code>
     * @return \Code\Transaction\V2\ExchangeDataWithoutRate|null
     */
    public function getPartial()
    {
        return $this->readOneof(3);
    }

    public function hasPartial()
    {
        return $this->hasOneof(3);
    }

    /**
     * Fiat amount request. The amount of Kin is determined at time of payment
     * with a recent exchange rate provided by the paying client and validatd
     * by server.
     * Only supports fiat amounts. Use exchange_data.exact for Kin.
     *
     * Generated from protobuf field <code>.code.transaction.v2.ExchangeDataWithoutRate partial = 3;</code>
     * @param \Code\Transaction\V2\ExchangeDataWithoutRate $var
     * @return $this
     */
    public function setPartial($var)
    {
        GPBUtil::checkMessage($var, \Code\Transaction\V2\ExchangeDataWithoutRate::class);
        $this->writeOneof(3, $var);

        return $this;
    }

    /**
     * The third-party's domain name, which is its primary identifier. Server
     * guarantees to perform domain verification against the verifier account.
     *
     * Generated from protobuf field <code>.code.common.v1.Domain domain = 4;</code>
     * @return \Code\Common\V1\Domain|null
     */
    public function getDomain()
    {
        return $this->domain;
    }

    public function hasDomain()
    {
        return isset($this->domain);
    }

    public function clearDomain()
    {
        unset($this->domain);
    }

    /**
     * The third-party's domain name, which is its primary identifier. Server
     * guarantees to perform domain verification against the verifier account.
     *
     * Generated from protobuf field <code>.code.common.v1.Domain domain = 4;</code>
     * @param \Code\Common\V1\Domain $var
     * @return $this
     */
    public function setDomain($var)
    {
        GPBUtil::checkMessage($var, \Code\Common\V1\Domain::class);
        $this->domain = $var;

        return $this;
    }

    /**
     * Owner account owned by the third party used in domain verification.
     *
     * Generated from protobuf field <code>.code.common.v1.SolanaAccountId verifier = 5;</code>
     * @return \Code\Common\V1\SolanaAccountId|null
     */
    public function getVerifier()
    {
        return $this->verifier;
    }

    public function hasVerifier()
    {
        return isset($this->verifier);
    }

    public function clearVerifier()
    {
        unset($this->verifier);
    }

    /**
     * Owner account owned by the third party used in domain verification.
     *
     * Generated from protobuf field <code>.code.common.v1.SolanaAccountId verifier = 5;</code>
     * @param \Code\Common\V1\SolanaAccountId $var
     * @return $this
     */
    public function setVerifier($var)
    {
        GPBUtil::checkMessage($var, \Code\Common\V1\SolanaAccountId::class);
        $this->verifier = $var;

        return $this;
    }

    /**
     * Signature of this message using the verifier private key, which in addition
     * to domain verification, authenticates the third party.
     *
     * Generated from protobuf field <code>.code.common.v1.Signature signature = 6;</code>
     * @return \Code\Common\V1\Signature|null
     */
    public function getSignature()
    {
        return $this->signature;
    }

    public function hasSignature()
    {
        return isset($this->signature);
    }

    public function clearSignature()
    {
        unset($this->signature);
    }

    /**
     * Signature of this message using the verifier private key, which in addition
     * to domain verification, authenticates the third party.
     *
     * Generated from protobuf field <code>.code.common.v1.Signature signature = 6;</code>
     * @param \Code\Common\V1\Signature $var
     * @return $this
     */
    public function setSignature($var)
    {
        GPBUtil::checkMessage($var, \Code\Common\V1\Signature::class);
        $this->signature = $var;

        return $this;
    }

    /**
     * Rendezvous key to avoid replay attacks
     *
     * Generated from protobuf field <code>.code.messaging.v1.RendezvousKey rendezvous_key = 7;</code>
     * @return \Code\Messaging\V1\RendezvousKey|null
     */
    public function getRendezvousKey()
    {
        return $this->rendezvous_key;
    }

    public function hasRendezvousKey()
    {
        return isset($this->rendezvous_key);
    }

    public function clearRendezvousKey()
    {
        unset($this->rendezvous_key);
    }

    /**
     * Rendezvous key to avoid replay attacks
     *
     * Generated from protobuf field <code>.code.messaging.v1.RendezvousKey rendezvous_key = 7;</code>
     * @param \Code\Messaging\V1\RendezvousKey $var
     * @return $this
     */
    public function setRendezvousKey($var)
    {
        GPBUtil::checkMessage($var, \Code\Messaging\V1\RendezvousKey::class);
        $this->rendezvous_key = $var;

        return $this;
    }

    /**
     * Additional fee payments splitting the requested amount. This is in addition
     * to the hard-coded Code $0.01 USD fee.
     *
     * Generated from protobuf field <code>repeated .code.transaction.v2.AdditionalFeePayment additional_fees = 8 [(.validate.rules) = {</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getAdditionalFees()
    {
        return $this->additional_fees;
    }

    /**
     * Additional fee payments splitting the requested amount. This is in addition
     * to the hard-coded Code $0.01 USD fee.
     *
     * Generated from protobuf field <code>repeated .code.transaction.v2.AdditionalFeePayment additional_fees = 8 [(.validate.rules) = {</code>
     * @param array<\Code\Transaction\V2\AdditionalFeePayment>|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setAdditionalFees($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Code\Transaction\V2\AdditionalFeePayment::class);
        $this->additional_fees = $arr;

        return $this;
    }

    /**
     * @return string
     */
    public function getExchangeData()
    {
        return $this->whichOneof("exchange_data");
    }

}

