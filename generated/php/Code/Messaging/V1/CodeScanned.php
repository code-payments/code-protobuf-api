<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: messaging/v1/messaging_service.proto

namespace Code\Messaging\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * A status update on a stream to indicate a scan code was scanned. This can appear
 * multiple times for the same stream.
 * This message type is only initiated by client
 *
 * Generated from protobuf message <code>code.messaging.v1.CodeScanned</code>
 */
class CodeScanned extends \Google\Protobuf\Internal\Message
{
    /**
     * Timestamp the client scanned the code
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp timestamp = 1 [(.validate.rules) = {</code>
     */
    protected $timestamp = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Google\Protobuf\Timestamp $timestamp
     *           Timestamp the client scanned the code
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Messaging\V1\MessagingService::initOnce();
        parent::__construct($data);
    }

    /**
     * Timestamp the client scanned the code
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp timestamp = 1 [(.validate.rules) = {</code>
     * @return \Google\Protobuf\Timestamp|null
     */
    public function getTimestamp()
    {
        return $this->timestamp;
    }

    public function hasTimestamp()
    {
        return isset($this->timestamp);
    }

    public function clearTimestamp()
    {
        unset($this->timestamp);
    }

    /**
     * Timestamp the client scanned the code
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp timestamp = 1 [(.validate.rules) = {</code>
     * @param \Google\Protobuf\Timestamp $var
     * @return $this
     */
    public function setTimestamp($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->timestamp = $var;

        return $this;
    }

}

