<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: chat/v2/chat_service.proto

namespace Code\Chat\V2;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Pointer in a chat indicating a user's message history state in a chat.
 *
 * Generated from protobuf message <code>code.chat.v2.Pointer</code>
 */
class Pointer extends \Google\Protobuf\Internal\Message
{
    /**
     * The type of pointer indicates which user's message history state can be
     * inferred from the pointer value. It is also possible to infer cross-pointer
     * state. For example, if a chat member has a READ pointer for a message with
     * ID N, then the DELIVERED pointer must be at least N.
     *
     * Generated from protobuf field <code>.code.chat.v2.PointerType type = 1 [(.validate.rules) = {</code>
     */
    protected $type = 0;
    /**
     * Everything at or before this message ID is considered to have the state
     * inferred by the type of pointer.
     *
     * Generated from protobuf field <code>.code.chat.v2.ChatMessageId value = 2 [(.validate.rules) = {</code>
     */
    protected $value = null;
    /**
     * The chat member associated with this pointer state
     *
     * Generated from protobuf field <code>.code.chat.v2.ChatMemberId member_id = 3 [(.validate.rules) = {</code>
     */
    protected $member_id = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int $type
     *           The type of pointer indicates which user's message history state can be
     *           inferred from the pointer value. It is also possible to infer cross-pointer
     *           state. For example, if a chat member has a READ pointer for a message with
     *           ID N, then the DELIVERED pointer must be at least N.
     *     @type \Code\Chat\V2\ChatMessageId $value
     *           Everything at or before this message ID is considered to have the state
     *           inferred by the type of pointer.
     *     @type \Code\Chat\V2\ChatMemberId $member_id
     *           The chat member associated with this pointer state
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Chat\V2\ChatService::initOnce();
        parent::__construct($data);
    }

    /**
     * The type of pointer indicates which user's message history state can be
     * inferred from the pointer value. It is also possible to infer cross-pointer
     * state. For example, if a chat member has a READ pointer for a message with
     * ID N, then the DELIVERED pointer must be at least N.
     *
     * Generated from protobuf field <code>.code.chat.v2.PointerType type = 1 [(.validate.rules) = {</code>
     * @return int
     */
    public function getType()
    {
        return $this->type;
    }

    /**
     * The type of pointer indicates which user's message history state can be
     * inferred from the pointer value. It is also possible to infer cross-pointer
     * state. For example, if a chat member has a READ pointer for a message with
     * ID N, then the DELIVERED pointer must be at least N.
     *
     * Generated from protobuf field <code>.code.chat.v2.PointerType type = 1 [(.validate.rules) = {</code>
     * @param int $var
     * @return $this
     */
    public function setType($var)
    {
        GPBUtil::checkEnum($var, \Code\Chat\V2\PointerType::class);
        $this->type = $var;

        return $this;
    }

    /**
     * Everything at or before this message ID is considered to have the state
     * inferred by the type of pointer.
     *
     * Generated from protobuf field <code>.code.chat.v2.ChatMessageId value = 2 [(.validate.rules) = {</code>
     * @return \Code\Chat\V2\ChatMessageId|null
     */
    public function getValue()
    {
        return $this->value;
    }

    public function hasValue()
    {
        return isset($this->value);
    }

    public function clearValue()
    {
        unset($this->value);
    }

    /**
     * Everything at or before this message ID is considered to have the state
     * inferred by the type of pointer.
     *
     * Generated from protobuf field <code>.code.chat.v2.ChatMessageId value = 2 [(.validate.rules) = {</code>
     * @param \Code\Chat\V2\ChatMessageId $var
     * @return $this
     */
    public function setValue($var)
    {
        GPBUtil::checkMessage($var, \Code\Chat\V2\ChatMessageId::class);
        $this->value = $var;

        return $this;
    }

    /**
     * The chat member associated with this pointer state
     *
     * Generated from protobuf field <code>.code.chat.v2.ChatMemberId member_id = 3 [(.validate.rules) = {</code>
     * @return \Code\Chat\V2\ChatMemberId|null
     */
    public function getMemberId()
    {
        return $this->member_id;
    }

    public function hasMemberId()
    {
        return isset($this->member_id);
    }

    public function clearMemberId()
    {
        unset($this->member_id);
    }

    /**
     * The chat member associated with this pointer state
     *
     * Generated from protobuf field <code>.code.chat.v2.ChatMemberId member_id = 3 [(.validate.rules) = {</code>
     * @param \Code\Chat\V2\ChatMemberId $var
     * @return $this
     */
    public function setMemberId($var)
    {
        GPBUtil::checkMessage($var, \Code\Chat\V2\ChatMemberId::class);
        $this->member_id = $var;

        return $this;
    }

}

