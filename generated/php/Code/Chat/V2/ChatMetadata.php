<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: chat/v2/chat_service.proto

namespace Code\Chat\V2;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * A chat
 * todo: Support is_verified in a clean way
 *
 * Generated from protobuf message <code>code.chat.v2.ChatMetadata</code>
 */
class ChatMetadata extends \Google\Protobuf\Internal\Message
{
    /**
     * Globally unique ID for this chat
     *
     * Generated from protobuf field <code>.code.common.v1.ChatId chat_id = 1 [(.validate.rules) = {</code>
     */
    protected $chat_id = null;
    /**
     * The type of chat
     *
     * Generated from protobuf field <code>.code.chat.v2.ChatType type = 2 [(.validate.rules) = {</code>
     */
    protected $type = 0;
    /**
     * The chat title, which will be localized by server when applicable
     *
     * Generated from protobuf field <code>string title = 3 [(.validate.rules) = {</code>
     */
    protected $title = '';
    /**
     * The members in this chat
     * For NOTIFICATION chats, this list has exactly 1 item
     * For TWO_WAY chats, this list has exactly 2 items
     * todo: If we support group chats, then we'll likely return the first page
     *       or a prioritized list. The remaining members would be fetched via
     *       a new RPC.
     *
     * Generated from protobuf field <code>repeated .code.chat.v2.ChatMember members = 4 [(.validate.rules) = {</code>
     */
    private $members;
    /**
     * Can the user mute this chat?
     *
     * Generated from protobuf field <code>bool can_mute = 5;</code>
     */
    protected $can_mute = false;
    /**
     * Can the user unsubscribe from this chat?
     *
     * Generated from protobuf field <code>bool can_unsubscribe = 6;</code>
     */
    protected $can_unsubscribe = false;
    /**
     * Cursor value for this chat for reference in subsequent GetChatsRequest
     *
     * Generated from protobuf field <code>.code.chat.v2.Cursor cursor = 7;</code>
     */
    protected $cursor = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Code\Common\V1\ChatId $chat_id
     *           Globally unique ID for this chat
     *     @type int $type
     *           The type of chat
     *     @type string $title
     *           The chat title, which will be localized by server when applicable
     *     @type array<\Code\Chat\V2\ChatMember>|\Google\Protobuf\Internal\RepeatedField $members
     *           The members in this chat
     *           For NOTIFICATION chats, this list has exactly 1 item
     *           For TWO_WAY chats, this list has exactly 2 items
     *           todo: If we support group chats, then we'll likely return the first page
     *                 or a prioritized list. The remaining members would be fetched via
     *                 a new RPC.
     *     @type bool $can_mute
     *           Can the user mute this chat?
     *     @type bool $can_unsubscribe
     *           Can the user unsubscribe from this chat?
     *     @type \Code\Chat\V2\Cursor $cursor
     *           Cursor value for this chat for reference in subsequent GetChatsRequest
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Chat\V2\ChatService::initOnce();
        parent::__construct($data);
    }

    /**
     * Globally unique ID for this chat
     *
     * Generated from protobuf field <code>.code.common.v1.ChatId chat_id = 1 [(.validate.rules) = {</code>
     * @return \Code\Common\V1\ChatId|null
     */
    public function getChatId()
    {
        return $this->chat_id;
    }

    public function hasChatId()
    {
        return isset($this->chat_id);
    }

    public function clearChatId()
    {
        unset($this->chat_id);
    }

    /**
     * Globally unique ID for this chat
     *
     * Generated from protobuf field <code>.code.common.v1.ChatId chat_id = 1 [(.validate.rules) = {</code>
     * @param \Code\Common\V1\ChatId $var
     * @return $this
     */
    public function setChatId($var)
    {
        GPBUtil::checkMessage($var, \Code\Common\V1\ChatId::class);
        $this->chat_id = $var;

        return $this;
    }

    /**
     * The type of chat
     *
     * Generated from protobuf field <code>.code.chat.v2.ChatType type = 2 [(.validate.rules) = {</code>
     * @return int
     */
    public function getType()
    {
        return $this->type;
    }

    /**
     * The type of chat
     *
     * Generated from protobuf field <code>.code.chat.v2.ChatType type = 2 [(.validate.rules) = {</code>
     * @param int $var
     * @return $this
     */
    public function setType($var)
    {
        GPBUtil::checkEnum($var, \Code\Chat\V2\ChatType::class);
        $this->type = $var;

        return $this;
    }

    /**
     * The chat title, which will be localized by server when applicable
     *
     * Generated from protobuf field <code>string title = 3 [(.validate.rules) = {</code>
     * @return string
     */
    public function getTitle()
    {
        return $this->title;
    }

    /**
     * The chat title, which will be localized by server when applicable
     *
     * Generated from protobuf field <code>string title = 3 [(.validate.rules) = {</code>
     * @param string $var
     * @return $this
     */
    public function setTitle($var)
    {
        GPBUtil::checkString($var, True);
        $this->title = $var;

        return $this;
    }

    /**
     * The members in this chat
     * For NOTIFICATION chats, this list has exactly 1 item
     * For TWO_WAY chats, this list has exactly 2 items
     * todo: If we support group chats, then we'll likely return the first page
     *       or a prioritized list. The remaining members would be fetched via
     *       a new RPC.
     *
     * Generated from protobuf field <code>repeated .code.chat.v2.ChatMember members = 4 [(.validate.rules) = {</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getMembers()
    {
        return $this->members;
    }

    /**
     * The members in this chat
     * For NOTIFICATION chats, this list has exactly 1 item
     * For TWO_WAY chats, this list has exactly 2 items
     * todo: If we support group chats, then we'll likely return the first page
     *       or a prioritized list. The remaining members would be fetched via
     *       a new RPC.
     *
     * Generated from protobuf field <code>repeated .code.chat.v2.ChatMember members = 4 [(.validate.rules) = {</code>
     * @param array<\Code\Chat\V2\ChatMember>|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setMembers($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Code\Chat\V2\ChatMember::class);
        $this->members = $arr;

        return $this;
    }

    /**
     * Can the user mute this chat?
     *
     * Generated from protobuf field <code>bool can_mute = 5;</code>
     * @return bool
     */
    public function getCanMute()
    {
        return $this->can_mute;
    }

    /**
     * Can the user mute this chat?
     *
     * Generated from protobuf field <code>bool can_mute = 5;</code>
     * @param bool $var
     * @return $this
     */
    public function setCanMute($var)
    {
        GPBUtil::checkBool($var);
        $this->can_mute = $var;

        return $this;
    }

    /**
     * Can the user unsubscribe from this chat?
     *
     * Generated from protobuf field <code>bool can_unsubscribe = 6;</code>
     * @return bool
     */
    public function getCanUnsubscribe()
    {
        return $this->can_unsubscribe;
    }

    /**
     * Can the user unsubscribe from this chat?
     *
     * Generated from protobuf field <code>bool can_unsubscribe = 6;</code>
     * @param bool $var
     * @return $this
     */
    public function setCanUnsubscribe($var)
    {
        GPBUtil::checkBool($var);
        $this->can_unsubscribe = $var;

        return $this;
    }

    /**
     * Cursor value for this chat for reference in subsequent GetChatsRequest
     *
     * Generated from protobuf field <code>.code.chat.v2.Cursor cursor = 7;</code>
     * @return \Code\Chat\V2\Cursor|null
     */
    public function getCursor()
    {
        return $this->cursor;
    }

    public function hasCursor()
    {
        return isset($this->cursor);
    }

    public function clearCursor()
    {
        unset($this->cursor);
    }

    /**
     * Cursor value for this chat for reference in subsequent GetChatsRequest
     *
     * Generated from protobuf field <code>.code.chat.v2.Cursor cursor = 7;</code>
     * @param \Code\Chat\V2\Cursor $var
     * @return $this
     */
    public function setCursor($var)
    {
        GPBUtil::checkMessage($var, \Code\Chat\V2\Cursor::class);
        $this->cursor = $var;

        return $this;
    }

}

