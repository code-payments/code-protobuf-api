<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: chat/v1/chat_service.proto

namespace Code\Chat\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>code.chat.v1.StreamChatEventsResponse</code>
 */
class StreamChatEventsResponse extends \Google\Protobuf\Internal\Message
{
    protected $type;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Code\Chat\V1\ChatStreamEventBatch $events
     *     @type \Code\Common\V1\ServerPing $ping
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Chat\V1\ChatService::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>.code.chat.v1.ChatStreamEventBatch events = 1;</code>
     * @return \Code\Chat\V1\ChatStreamEventBatch|null
     */
    public function getEvents()
    {
        return $this->readOneof(1);
    }

    public function hasEvents()
    {
        return $this->hasOneof(1);
    }

    /**
     * Generated from protobuf field <code>.code.chat.v1.ChatStreamEventBatch events = 1;</code>
     * @param \Code\Chat\V1\ChatStreamEventBatch $var
     * @return $this
     */
    public function setEvents($var)
    {
        GPBUtil::checkMessage($var, \Code\Chat\V1\ChatStreamEventBatch::class);
        $this->writeOneof(1, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.code.common.v1.ServerPing ping = 2;</code>
     * @return \Code\Common\V1\ServerPing|null
     */
    public function getPing()
    {
        return $this->readOneof(2);
    }

    public function hasPing()
    {
        return $this->hasOneof(2);
    }

    /**
     * Generated from protobuf field <code>.code.common.v1.ServerPing ping = 2;</code>
     * @param \Code\Common\V1\ServerPing $var
     * @return $this
     */
    public function setPing($var)
    {
        GPBUtil::checkMessage($var, \Code\Common\V1\ServerPing::class);
        $this->writeOneof(2, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getType()
    {
        return $this->whichOneof("type");
    }

}

