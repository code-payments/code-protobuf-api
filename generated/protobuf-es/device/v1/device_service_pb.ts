// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file device/v1/device_service.proto (package code.device.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { AppInstallId, Signature, SolanaAccountId } from "../../common/v1/model_pb";

/**
 * @generated from message code.device.v1.RegisterLoggedInAccountsRequest
 */
export class RegisterLoggedInAccountsRequest extends Message<RegisterLoggedInAccountsRequest> {
  /**
   * @generated from field: code.common.v1.AppInstallId app_install = 1;
   */
  appInstall?: AppInstallId;

  /**
   * The set of owners logged into the app install. Setting an empty value
   * indicates there are no logged in users. We allow for more than one owner
   * in the spec with a repeated field to be flexible in the future.
   *
   * @generated from field: repeated code.common.v1.SolanaAccountId owners = 2;
   */
  owners: SolanaAccountId[] = [];

  /**
   * Signature values must appear in the exact order their respecitive signing
   * owner account appears in the owners field. All signatures should be generated
   * without any other signature values set.
   *
   * @generated from field: repeated code.common.v1.Signature signatures = 3;
   */
  signatures: Signature[] = [];

  constructor(data?: PartialMessage<RegisterLoggedInAccountsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "code.device.v1.RegisterLoggedInAccountsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "app_install", kind: "message", T: AppInstallId },
    { no: 2, name: "owners", kind: "message", T: SolanaAccountId, repeated: true },
    { no: 3, name: "signatures", kind: "message", T: Signature, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterLoggedInAccountsRequest {
    return new RegisterLoggedInAccountsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterLoggedInAccountsRequest {
    return new RegisterLoggedInAccountsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterLoggedInAccountsRequest {
    return new RegisterLoggedInAccountsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterLoggedInAccountsRequest | PlainMessage<RegisterLoggedInAccountsRequest> | undefined, b: RegisterLoggedInAccountsRequest | PlainMessage<RegisterLoggedInAccountsRequest> | undefined): boolean {
    return proto3.util.equals(RegisterLoggedInAccountsRequest, a, b);
  }
}

/**
 * @generated from message code.device.v1.RegisterLoggedInAccountsResponse
 */
export class RegisterLoggedInAccountsResponse extends Message<RegisterLoggedInAccountsResponse> {
  /**
   * @generated from field: code.device.v1.RegisterLoggedInAccountsResponse.Result result = 1;
   */
  result = RegisterLoggedInAccountsResponse_Result.OK;

  /**
   * Set of invalid owner accounts detected in the request. An owner account
   * can be invalid for several reasons: not phone verified, timelock account
   * unlocked, etc. Value is set when result is INVALID_OWNER.
   *
   * @generated from field: repeated code.common.v1.SolanaAccountId invalid_owners = 2;
   */
  invalidOwners: SolanaAccountId[] = [];

  constructor(data?: PartialMessage<RegisterLoggedInAccountsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "code.device.v1.RegisterLoggedInAccountsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "enum", T: proto3.getEnumType(RegisterLoggedInAccountsResponse_Result) },
    { no: 2, name: "invalid_owners", kind: "message", T: SolanaAccountId, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterLoggedInAccountsResponse {
    return new RegisterLoggedInAccountsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterLoggedInAccountsResponse {
    return new RegisterLoggedInAccountsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterLoggedInAccountsResponse {
    return new RegisterLoggedInAccountsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterLoggedInAccountsResponse | PlainMessage<RegisterLoggedInAccountsResponse> | undefined, b: RegisterLoggedInAccountsResponse | PlainMessage<RegisterLoggedInAccountsResponse> | undefined): boolean {
    return proto3.util.equals(RegisterLoggedInAccountsResponse, a, b);
  }
}

/**
 * @generated from enum code.device.v1.RegisterLoggedInAccountsResponse.Result
 */
export enum RegisterLoggedInAccountsResponse_Result {
  /**
   * @generated from enum value: OK = 0;
   */
  OK = 0,

  /**
   * @generated from enum value: INVALID_OWNER = 1;
   */
  INVALID_OWNER = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(RegisterLoggedInAccountsResponse_Result)
proto3.util.setEnumType(RegisterLoggedInAccountsResponse_Result, "code.device.v1.RegisterLoggedInAccountsResponse.Result", [
  { no: 0, name: "OK" },
  { no: 1, name: "INVALID_OWNER" },
]);

/**
 * @generated from message code.device.v1.GetLoggedInAccountsRequest
 */
export class GetLoggedInAccountsRequest extends Message<GetLoggedInAccountsRequest> {
  /**
   * @generated from field: code.common.v1.AppInstallId app_install = 1;
   */
  appInstall?: AppInstallId;

  constructor(data?: PartialMessage<GetLoggedInAccountsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "code.device.v1.GetLoggedInAccountsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "app_install", kind: "message", T: AppInstallId },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetLoggedInAccountsRequest {
    return new GetLoggedInAccountsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetLoggedInAccountsRequest {
    return new GetLoggedInAccountsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetLoggedInAccountsRequest {
    return new GetLoggedInAccountsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetLoggedInAccountsRequest | PlainMessage<GetLoggedInAccountsRequest> | undefined, b: GetLoggedInAccountsRequest | PlainMessage<GetLoggedInAccountsRequest> | undefined): boolean {
    return proto3.util.equals(GetLoggedInAccountsRequest, a, b);
  }
}

/**
 * @generated from message code.device.v1.GetLoggedInAccountsResponse
 */
export class GetLoggedInAccountsResponse extends Message<GetLoggedInAccountsResponse> {
  /**
   * @generated from field: code.device.v1.GetLoggedInAccountsResponse.Result result = 1;
   */
  result = GetLoggedInAccountsResponse_Result.OK;

  /**
   * @generated from field: repeated code.common.v1.SolanaAccountId owners = 2;
   */
  owners: SolanaAccountId[] = [];

  constructor(data?: PartialMessage<GetLoggedInAccountsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "code.device.v1.GetLoggedInAccountsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "enum", T: proto3.getEnumType(GetLoggedInAccountsResponse_Result) },
    { no: 2, name: "owners", kind: "message", T: SolanaAccountId, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetLoggedInAccountsResponse {
    return new GetLoggedInAccountsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetLoggedInAccountsResponse {
    return new GetLoggedInAccountsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetLoggedInAccountsResponse {
    return new GetLoggedInAccountsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetLoggedInAccountsResponse | PlainMessage<GetLoggedInAccountsResponse> | undefined, b: GetLoggedInAccountsResponse | PlainMessage<GetLoggedInAccountsResponse> | undefined): boolean {
    return proto3.util.equals(GetLoggedInAccountsResponse, a, b);
  }
}

/**
 * @generated from enum code.device.v1.GetLoggedInAccountsResponse.Result
 */
export enum GetLoggedInAccountsResponse_Result {
  /**
   * @generated from enum value: OK = 0;
   */
  OK = 0,
}
// Retrieve enum metadata with: proto3.getEnumType(GetLoggedInAccountsResponse_Result)
proto3.util.setEnumType(GetLoggedInAccountsResponse_Result, "code.device.v1.GetLoggedInAccountsResponse.Result", [
  { no: 0, name: "OK" },
]);

