// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file badge/v1/badge_service.proto (package code.badge.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Signature, SolanaAccountId } from "../../common/v1/model_pb";

/**
 * @generated from message code.badge.v1.ResetBadgeCountRequest
 */
export class ResetBadgeCountRequest extends Message<ResetBadgeCountRequest> {
  /**
   * The owner account to clear badge count
   *
   * @generated from field: code.common.v1.SolanaAccountId owner = 1;
   */
  owner?: SolanaAccountId;

  /**
   * The signature is of serialize(ResetBadgeCountRequest) without this field set
   * using the private key of the owner account. This provides an authentication
   * mechanism to the RPC.
   *
   * @generated from field: code.common.v1.Signature signature = 2;
   */
  signature?: Signature;

  constructor(data?: PartialMessage<ResetBadgeCountRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "code.badge.v1.ResetBadgeCountRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "owner", kind: "message", T: SolanaAccountId },
    { no: 2, name: "signature", kind: "message", T: Signature },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResetBadgeCountRequest {
    return new ResetBadgeCountRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResetBadgeCountRequest {
    return new ResetBadgeCountRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResetBadgeCountRequest {
    return new ResetBadgeCountRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ResetBadgeCountRequest | PlainMessage<ResetBadgeCountRequest> | undefined, b: ResetBadgeCountRequest | PlainMessage<ResetBadgeCountRequest> | undefined): boolean {
    return proto3.util.equals(ResetBadgeCountRequest, a, b);
  }
}

/**
 * @generated from message code.badge.v1.ResetBadgeCountResponse
 */
export class ResetBadgeCountResponse extends Message<ResetBadgeCountResponse> {
  /**
   * @generated from field: code.badge.v1.ResetBadgeCountResponse.Result result = 1;
   */
  result = ResetBadgeCountResponse_Result.OK;

  constructor(data?: PartialMessage<ResetBadgeCountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "code.badge.v1.ResetBadgeCountResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "enum", T: proto3.getEnumType(ResetBadgeCountResponse_Result) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResetBadgeCountResponse {
    return new ResetBadgeCountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResetBadgeCountResponse {
    return new ResetBadgeCountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResetBadgeCountResponse {
    return new ResetBadgeCountResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ResetBadgeCountResponse | PlainMessage<ResetBadgeCountResponse> | undefined, b: ResetBadgeCountResponse | PlainMessage<ResetBadgeCountResponse> | undefined): boolean {
    return proto3.util.equals(ResetBadgeCountResponse, a, b);
  }
}

/**
 * @generated from enum code.badge.v1.ResetBadgeCountResponse.Result
 */
export enum ResetBadgeCountResponse_Result {
  /**
   * @generated from enum value: OK = 0;
   */
  OK = 0,
}
// Retrieve enum metadata with: proto3.getEnumType(ResetBadgeCountResponse_Result)
proto3.util.setEnumType(ResetBadgeCountResponse_Result, "code.badge.v1.ResetBadgeCountResponse.Result", [
  { no: 0, name: "OK" },
]);

