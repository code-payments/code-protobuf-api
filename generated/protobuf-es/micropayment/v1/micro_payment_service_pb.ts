// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file micropayment/v1/micro_payment_service.proto (package code.micropayment.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { IntentId } from "../../common/v1/model_pb";

/**
 * @generated from message code.micropayment.v1.GetStatusRequest
 */
export class GetStatusRequest extends Message<GetStatusRequest> {
  /**
   * @generated from field: code.common.v1.IntentId intent_id = 1;
   */
  intentId?: IntentId;

  constructor(data?: PartialMessage<GetStatusRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "code.micropayment.v1.GetStatusRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "intent_id", kind: "message", T: IntentId },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetStatusRequest {
    return new GetStatusRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetStatusRequest {
    return new GetStatusRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetStatusRequest {
    return new GetStatusRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetStatusRequest | PlainMessage<GetStatusRequest> | undefined, b: GetStatusRequest | PlainMessage<GetStatusRequest> | undefined): boolean {
    return proto3.util.equals(GetStatusRequest, a, b);
  }
}

/**
 * @generated from message code.micropayment.v1.GetStatusResponse
 */
export class GetStatusResponse extends Message<GetStatusResponse> {
  /**
   * Does the payment request exist?
   *
   * @generated from field: bool exists = 1;
   */
  exists = false;

  /**
   * Has the user scanned the code at least once?
   *
   * @generated from field: bool code_scanned = 2;
   */
  codeScanned = false;

  /**
   * Has the user sumbmitted a payment?
   *
   * @generated from field: bool intent_submitted = 3;
   */
  intentSubmitted = false;

  constructor(data?: PartialMessage<GetStatusResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "code.micropayment.v1.GetStatusResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "exists", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "code_scanned", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "intent_submitted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetStatusResponse {
    return new GetStatusResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetStatusResponse {
    return new GetStatusResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetStatusResponse {
    return new GetStatusResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetStatusResponse | PlainMessage<GetStatusResponse> | undefined, b: GetStatusResponse | PlainMessage<GetStatusResponse> | undefined): boolean {
    return proto3.util.equals(GetStatusResponse, a, b);
  }
}

/**
 * @generated from message code.micropayment.v1.RegisterWebhookRequest
 */
export class RegisterWebhookRequest extends Message<RegisterWebhookRequest> {
  /**
   * @generated from field: code.common.v1.IntentId intent_id = 1;
   */
  intentId?: IntentId;

  /**
   * @generated from field: string url = 2;
   */
  url = "";

  constructor(data?: PartialMessage<RegisterWebhookRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "code.micropayment.v1.RegisterWebhookRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "intent_id", kind: "message", T: IntentId },
    { no: 2, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterWebhookRequest {
    return new RegisterWebhookRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterWebhookRequest {
    return new RegisterWebhookRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterWebhookRequest {
    return new RegisterWebhookRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterWebhookRequest | PlainMessage<RegisterWebhookRequest> | undefined, b: RegisterWebhookRequest | PlainMessage<RegisterWebhookRequest> | undefined): boolean {
    return proto3.util.equals(RegisterWebhookRequest, a, b);
  }
}

/**
 * @generated from message code.micropayment.v1.RegisterWebhookResponse
 */
export class RegisterWebhookResponse extends Message<RegisterWebhookResponse> {
  /**
   * @generated from field: code.micropayment.v1.RegisterWebhookResponse.Result result = 1;
   */
  result = RegisterWebhookResponse_Result.OK;

  constructor(data?: PartialMessage<RegisterWebhookResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "code.micropayment.v1.RegisterWebhookResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "enum", T: proto3.getEnumType(RegisterWebhookResponse_Result) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterWebhookResponse {
    return new RegisterWebhookResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterWebhookResponse {
    return new RegisterWebhookResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterWebhookResponse {
    return new RegisterWebhookResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterWebhookResponse | PlainMessage<RegisterWebhookResponse> | undefined, b: RegisterWebhookResponse | PlainMessage<RegisterWebhookResponse> | undefined): boolean {
    return proto3.util.equals(RegisterWebhookResponse, a, b);
  }
}

/**
 * @generated from enum code.micropayment.v1.RegisterWebhookResponse.Result
 */
export enum RegisterWebhookResponse_Result {
  /**
   * @generated from enum value: OK = 0;
   */
  OK = 0,

  /**
   * A webhook has already been registered
   *
   * @generated from enum value: ALREADY_REGISTERED = 1;
   */
  ALREADY_REGISTERED = 1,

  /**
   * A request does not exist for the provided intent ID
   *
   * @generated from enum value: REQUEST_NOT_FOUND = 2;
   */
  REQUEST_NOT_FOUND = 2,

  /**
   * A user has already submitted a payment
   *
   * @generated from enum value: INTENT_EXISTS = 3;
   */
  INTENT_EXISTS = 3,

  /**
   * The webhook URL is invalid
   *
   * @generated from enum value: INVALID_URL = 4;
   */
  INVALID_URL = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(RegisterWebhookResponse_Result)
proto3.util.setEnumType(RegisterWebhookResponse_Result, "code.micropayment.v1.RegisterWebhookResponse.Result", [
  { no: 0, name: "OK" },
  { no: 1, name: "ALREADY_REGISTERED" },
  { no: 2, name: "REQUEST_NOT_FOUND" },
  { no: 3, name: "INTENT_EXISTS" },
  { no: 4, name: "INVALID_URL" },
]);

