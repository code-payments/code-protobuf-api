// @generated by protoc-gen-connect-es v0.13.0 with parameter "target=ts"
// @generated from file chat/v2/chat_service.proto (package code.chat.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { AdvancePointerRequest, AdvancePointerResponse, GetChatsRequest, GetChatsResponse, GetMessagesRequest, GetMessagesResponse, NotifyIsTypingRequest, NotifyIsTypingResponse, SendMessageRequest, SendMessageResponse, SetMuteStateRequest, SetMuteStateResponse, StartChatRequest, StartChatResponse, StreamChatEventsRequest, StreamChatEventsResponse } from "./chat_service_pb";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * @generated from service code.chat.v2.Chat
 */
export const Chat = {
  typeName: "code.chat.v2.Chat",
  methods: {
    /**
     * GetChats gets the set of chats for an owner account using a paged API.
     * This RPC is aware of all identities tied to the owner account.
     *
     * @generated from rpc code.chat.v2.Chat.GetChats
     */
    getChats: {
      name: "GetChats",
      I: GetChatsRequest,
      O: GetChatsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetMessages gets the set of messages for a chat member using a paged API
     *
     * @generated from rpc code.chat.v2.Chat.GetMessages
     */
    getMessages: {
      name: "GetMessages",
      I: GetMessagesRequest,
      O: GetMessagesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * StreamChatEvents streams chat events in real-time. Chat events include
     * messages, pointer updates, etc.
     *
     * The streaming protocol is follows:
     *  1. Client initiates a stream by sending an OpenChatEventStream message.
     *  2. If an error is encoutered, a ChatStreamEventError message will be
     *     returned by server and the stream will be closed.
     *  3. Server will immediately flush initial chat state.
     *  4. New chat events will be pushed to the stream in real time as they
     *     are received.
     *
     * This RPC supports a keepalive protocol as follows:
     *   1. Client initiates a stream by sending an OpenChatEventStream message.
     *   2. Upon stream initialization, server begins the keepalive protocol.
     *   3. Server sends a ping to the client.
     *   4. Client responds with a pong as fast as possible, making note of
     *      the delay for when to expect the next ping.
     *   5. Steps 3 and 4 are repeated until the stream is explicitly terminated
     *      or is deemed to be unhealthy.
     *
     * Client notes:
     * * Client should be careful to process events async, so any responses to pings are
     *   not delayed.
     * * Clients should implement a reasonable backoff strategy upon continued timeout
     *   failures.
     * * Clients that abuse pong messages may have their streams terminated by server.
     *
     * At any point in the stream, server will respond with events in real time as
     * they are observed. Events sent over the stream should not affect the ping/pong
     * protocol timings.
     *
     * @generated from rpc code.chat.v2.Chat.StreamChatEvents
     */
    streamChatEvents: {
      name: "StreamChatEvents",
      I: StreamChatEventsRequest,
      O: StreamChatEventsResponse,
      kind: MethodKind.BiDiStreaming,
    },
    /**
     * StartChat starts a chat. The RPC call is idempotent and will use existing
     * chats whenever applicable within the context of message routing.
     *
     * @generated from rpc code.chat.v2.Chat.StartChat
     */
    startChat: {
      name: "StartChat",
      I: StartChatRequest,
      O: StartChatResponse,
      kind: MethodKind.Unary,
    },
    /**
     * SendMessage sends a message to a chat.
     *
     * @generated from rpc code.chat.v2.Chat.SendMessage
     */
    sendMessage: {
      name: "SendMessage",
      I: SendMessageRequest,
      O: SendMessageResponse,
      kind: MethodKind.Unary,
    },
    /**
     * AdvancePointer advances a pointer in message history for a chat member.
     *
     * @generated from rpc code.chat.v2.Chat.AdvancePointer
     */
    advancePointer: {
      name: "AdvancePointer",
      I: AdvancePointerRequest,
      O: AdvancePointerResponse,
      kind: MethodKind.Unary,
    },
    /**
     * SetMuteState configures a chat member's mute state.
     *
     * @generated from rpc code.chat.v2.Chat.SetMuteState
     */
    setMuteState: {
      name: "SetMuteState",
      I: SetMuteStateRequest,
      O: SetMuteStateResponse,
      kind: MethodKind.Unary,
    },
    /**
     * NotifyIsTypingRequest notifies a chat that the sending member is typing.
     *
     * These requests are transient, and may be dropped at any point.
     *
     * @generated from rpc code.chat.v2.Chat.NotifyIsTyping
     */
    notifyIsTyping: {
      name: "NotifyIsTyping",
      I: NotifyIsTypingRequest,
      O: NotifyIsTypingResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

