// @generated by protoc-gen-connect-es v0.13.0 with parameter "target=ts"
// @generated from file chat/v2/chat_service.proto (package code.chat.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { AdvancePointerRequest, AdvancePointerResponse, GetChatsRequest, GetChatsResponse, GetMessagesRequest, GetMessagesResponse, NotifyIsTypingRequest, NotifyIsTypingResponse, SendMessageRequest, SendMessageResponse, SetMuteStateRequest, SetMuteStateResponse, StartChatRequest, StartChatResponse, StreamChatEventsRequest, StreamChatEventsResponse, StreamMessagesRequest, StreamMessagesResponse } from "./chat_service_pb";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * @generated from service code.chat.v2.Chat
 */
export const Chat = {
  typeName: "code.chat.v2.Chat",
  methods: {
    /**
     * StreamChatEvents streams all chat events for the requesting user.
     *
     * Chat events will include any update to a chat, including:
     *   1. Metadata changes.
     *   2. Membership changes.
     *   3. Latest messages.
     *
     * The server will optionally filter out some events depending on load
     * and chat type. For example, Broadcast chats will not receive latest
     * messages.
     *
     * Clients should use GetMessages to backfill in any historical messages
     * for a chat. It should be sufficient to rely on ChatEvents for some types
     * of chats, but using StreamMessages provides a guarentee of message events
     * for all chats.
     *
     * @generated from rpc code.chat.v2.Chat.StreamChatEvents
     */
    streamChatEvents: {
      name: "StreamChatEvents",
      I: StreamChatEventsRequest,
      O: StreamChatEventsResponse,
      kind: MethodKind.BiDiStreaming,
    },
    /**
     * StreamMessages streams all messages/message states for the requested chat.
     *
     * By default, streams will resume messages from the last acknowledged delivery
     * pointer of the caller. This can be overridden by setting 'last_message',
     * 'latest_only'.
     *
     * @generated from rpc code.chat.v2.Chat.StreamMessages
     */
    streamMessages: {
      name: "StreamMessages",
      I: StreamMessagesRequest,
      O: StreamMessagesResponse,
      kind: MethodKind.BiDiStreaming,
    },
    /**
     * GetChats gets the set of chats for an owner account using a paged API.
     * This RPC is aware of all identities tied to the owner account.
     *
     * @generated from rpc code.chat.v2.Chat.GetChats
     */
    getChats: {
      name: "GetChats",
      I: GetChatsRequest,
      O: GetChatsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetMessages gets the set of messages for a chat member using a paged API
     *
     * @generated from rpc code.chat.v2.Chat.GetMessages
     */
    getMessages: {
      name: "GetMessages",
      I: GetMessagesRequest,
      O: GetMessagesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * StartChat starts a chat. The RPC call is idempotent and will use existing
     * chats whenever applicable within the context of message routing.
     *
     * @generated from rpc code.chat.v2.Chat.StartChat
     */
    startChat: {
      name: "StartChat",
      I: StartChatRequest,
      O: StartChatResponse,
      kind: MethodKind.Unary,
    },
    /**
     * SendMessage sends a message to a chat.
     *
     * @generated from rpc code.chat.v2.Chat.SendMessage
     */
    sendMessage: {
      name: "SendMessage",
      I: SendMessageRequest,
      O: SendMessageResponse,
      kind: MethodKind.Unary,
    },
    /**
     * AdvancePointer advances a pointer in message history for a chat member.
     *
     * @generated from rpc code.chat.v2.Chat.AdvancePointer
     */
    advancePointer: {
      name: "AdvancePointer",
      I: AdvancePointerRequest,
      O: AdvancePointerResponse,
      kind: MethodKind.Unary,
    },
    /**
     * SetMuteState configures a chat member's mute state.
     *
     * @generated from rpc code.chat.v2.Chat.SetMuteState
     */
    setMuteState: {
      name: "SetMuteState",
      I: SetMuteStateRequest,
      O: SetMuteStateResponse,
      kind: MethodKind.Unary,
    },
    /**
     * NotifyIsTypingRequest notifies a chat that the sending member is typing.
     *
     * These requests are transient, and may be dropped at any point.
     *
     * @generated from rpc code.chat.v2.Chat.NotifyIsTyping
     */
    notifyIsTyping: {
      name: "NotifyIsTyping",
      I: NotifyIsTypingRequest,
      O: NotifyIsTypingResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

