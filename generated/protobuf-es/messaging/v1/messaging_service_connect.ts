// @generated by protoc-gen-connect-es v0.13.0 with parameter "target=ts"
// @generated from file messaging/v1/messaging_service.proto (package code.messaging.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { AckMessagesRequest, AckMesssagesResponse, OpenMessageStreamRequest, OpenMessageStreamResponse, OpenMessageStreamWithKeepAliveRequest, OpenMessageStreamWithKeepAliveResponse, PollMessagesRequest, PollMessagesResponse, SendMessageRequest, SendMessageResponse } from "./messaging_service_pb";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * @generated from service code.messaging.v1.Messaging
 */
export const Messaging = {
  typeName: "code.messaging.v1.Messaging",
  methods: {
    /**
     * OpenMessageStream opens a stream of messages. Messages are routed using the
     * public key of a rendezvous keypair derived by both the sender and the
     * recipient of the messages. The sender may be a client or server.
     *
     * Messages are expected to be acked once they have been processed by the client.
     * Ack'd messages will no longer be delivered on future OpenMessageStream calls,
     * and are eligible for deletion from the service. Clients should, however, handle
     * duplicate delivery of messages.
     *
     * For grabbing a bill, the expected flow is as follows:
     *   1. The payment sender creates a cash scan code
     *   2. The payment sender calls OpenMessageStream on the rendezvous public key, which is
     *      derived by using sha256(scan payload) as the keypair seed.
     *   3. The payment recipient scans the code and uses SendMessage to send their account ID
     *      back to the sender via the rendezvous public key.
     *   4. The payment sender receives the message, submits the intent, and closes the stream.
     *
     * @generated from rpc code.messaging.v1.Messaging.OpenMessageStream
     */
    openMessageStream: {
      name: "OpenMessageStream",
      I: OpenMessageStreamRequest,
      O: OpenMessageStreamResponse,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * OpenMessageStreamWithKeepAlive is like OpenMessageStream, but enables a ping/pong
     * keepalive to determine the health of the stream at both the client and server.
     *
     * The keepalive protocol is as follows:
     *   1. Client initiates a stream by sending an OpenMessageStreamRequest.
     *   2. Upon stream initialization, server begins the keepalive protocol.
     *   3. Server sends a ping to the client.
     *   4. Client responds with a pong as fast as possible, making note of
     *      the delay for when to expect the next ping.
     *   5. Steps 3 and 4 are repeated until the stream is explicitly terminated
     *      or is deemed to be unhealthy.
     *
     * Client notes:
     * * Client should be careful to process messages async, so any responses to pings are
     *   not delayed.
     * * Clients should implement a reasonable backoff strategy upon continued timeout failures.
     * * Clients that abuse pong messages may have their streams terminated by server.
     *
     * At any point in the stream, server will respond with messages in real time as
     * they are observed. Messages sent over the stream should not affect the ping/pong
     * protocol timings. Individual protocols for payment flows remain the same, and are
     * documented in OpenMessageStream.
     *
     * Note: This API will enforce OpenMessageStreamRequest.signature is set as part of migration
     *       to this newer protocol
     *
     * @generated from rpc code.messaging.v1.Messaging.OpenMessageStreamWithKeepAlive
     */
    openMessageStreamWithKeepAlive: {
      name: "OpenMessageStreamWithKeepAlive",
      I: OpenMessageStreamWithKeepAliveRequest,
      O: OpenMessageStreamWithKeepAliveResponse,
      kind: MethodKind.BiDiStreaming,
    },
    /**
     * PollMessages is like OpenMessageStream, but uses a polling flow for receiving
     * messages. Updates are not real-time and depedent on the polling interval.
     * This RPC supports all message types.
     *
     * This is a temporary RPC until OpenMessageStream can be built out generically on
     * both client and server, while supporting things like multiple listeners.
     *
     * @generated from rpc code.messaging.v1.Messaging.PollMessages
     */
    pollMessages: {
      name: "PollMessages",
      I: PollMessagesRequest,
      O: PollMessagesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * AckMessages acks one or more messages that have been successfully delivered to
     * the client.
     *
     * @generated from rpc code.messaging.v1.Messaging.AckMessages
     */
    ackMessages: {
      name: "AckMessages",
      I: AckMessagesRequest,
      O: AckMesssagesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * SendMessage sends a message.
     *
     * @generated from rpc code.messaging.v1.Messaging.SendMessage
     */
    sendMessage: {
      name: "SendMessage",
      I: SendMessageRequest,
      O: SendMessageResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

