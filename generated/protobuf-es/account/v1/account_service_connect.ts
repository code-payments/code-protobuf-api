// @generated by protoc-gen-connect-es v0.13.0 with parameter "target=ts"
// @generated from file account/v1/account_service.proto (package code.account.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { GetTokenAccountInfosRequest, GetTokenAccountInfosResponse, IsCodeAccountRequest, IsCodeAccountResponse, LinkAdditionalAccountsRequest, LinkAdditionalAccountsResponse } from "./account_service_pb";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * @generated from service code.account.v1.Account
 */
export const Account = {
  typeName: "code.account.v1.Account",
  methods: {
    /**
     * IsCodeAccount returns whether an owner account is a Code account. This hints
     * to the client whether the account can be logged in, used for making payments,
     * etc.
     *
     * @generated from rpc code.account.v1.Account.IsCodeAccount
     */
    isCodeAccount: {
      name: "IsCodeAccount",
      I: IsCodeAccountRequest,
      O: IsCodeAccountResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetTokenAccountInfos returns token account metadata relevant to the Code owner
     * account.
     *
     * @generated from rpc code.account.v1.Account.GetTokenAccountInfos
     */
    getTokenAccountInfos: {
      name: "GetTokenAccountInfos",
      I: GetTokenAccountInfosRequest,
      O: GetTokenAccountInfosResponse,
      kind: MethodKind.Unary,
    },
    /**
     * LinkAdditionalAccounts allows a client to declare additional accounts to
     * be tracked and used within Code. The accounts declared in this RPC are not
     * managed by Code (ie. not a Timelock account), created externally and cannot
     * be linked automatically (ie. authority derived off user 12 words).
     *
     * @generated from rpc code.account.v1.Account.LinkAdditionalAccounts
     */
    linkAdditionalAccounts: {
      name: "LinkAdditionalAccounts",
      I: LinkAdditionalAccountsRequest,
      O: LinkAdditionalAccountsResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

