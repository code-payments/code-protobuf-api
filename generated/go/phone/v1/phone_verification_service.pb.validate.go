// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: phone/v1/phone_verification_service.proto

package phone

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on SendVerificationCodeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SendVerificationCodeRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetPhoneNumber() == nil {
		return SendVerificationCodeRequestValidationError{
			field:  "PhoneNumber",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetPhoneNumber()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendVerificationCodeRequestValidationError{
				field:  "PhoneNumber",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDeviceToken()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendVerificationCodeRequestValidationError{
				field:  "DeviceToken",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SendVerificationCodeRequestValidationError is the validation error returned
// by SendVerificationCodeRequest.Validate if the designated constraints
// aren't met.
type SendVerificationCodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendVerificationCodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendVerificationCodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendVerificationCodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendVerificationCodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendVerificationCodeRequestValidationError) ErrorName() string {
	return "SendVerificationCodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendVerificationCodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendVerificationCodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendVerificationCodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendVerificationCodeRequestValidationError{}

// Validate checks the field values on SendVerificationCodeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SendVerificationCodeResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Result

	return nil
}

// SendVerificationCodeResponseValidationError is the validation error returned
// by SendVerificationCodeResponse.Validate if the designated constraints
// aren't met.
type SendVerificationCodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendVerificationCodeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendVerificationCodeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendVerificationCodeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendVerificationCodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendVerificationCodeResponseValidationError) ErrorName() string {
	return "SendVerificationCodeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendVerificationCodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendVerificationCodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendVerificationCodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendVerificationCodeResponseValidationError{}

// Validate checks the field values on CheckVerificationCodeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CheckVerificationCodeRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetPhoneNumber() == nil {
		return CheckVerificationCodeRequestValidationError{
			field:  "PhoneNumber",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetPhoneNumber()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CheckVerificationCodeRequestValidationError{
				field:  "PhoneNumber",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetCode() == nil {
		return CheckVerificationCodeRequestValidationError{
			field:  "Code",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetCode()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CheckVerificationCodeRequestValidationError{
				field:  "Code",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CheckVerificationCodeRequestValidationError is the validation error returned
// by CheckVerificationCodeRequest.Validate if the designated constraints
// aren't met.
type CheckVerificationCodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckVerificationCodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckVerificationCodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckVerificationCodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckVerificationCodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckVerificationCodeRequestValidationError) ErrorName() string {
	return "CheckVerificationCodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckVerificationCodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckVerificationCodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckVerificationCodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckVerificationCodeRequestValidationError{}

// Validate checks the field values on CheckVerificationCodeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CheckVerificationCodeResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Result

	if v, ok := interface{}(m.GetLinkingToken()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CheckVerificationCodeResponseValidationError{
				field:  "LinkingToken",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CheckVerificationCodeResponseValidationError is the validation error
// returned by CheckVerificationCodeResponse.Validate if the designated
// constraints aren't met.
type CheckVerificationCodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckVerificationCodeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckVerificationCodeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckVerificationCodeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckVerificationCodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckVerificationCodeResponseValidationError) ErrorName() string {
	return "CheckVerificationCodeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CheckVerificationCodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckVerificationCodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckVerificationCodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckVerificationCodeResponseValidationError{}

// Validate checks the field values on GetAssociatedPhoneNumberRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetAssociatedPhoneNumberRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetOwnerAccountId() == nil {
		return GetAssociatedPhoneNumberRequestValidationError{
			field:  "OwnerAccountId",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetOwnerAccountId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAssociatedPhoneNumberRequestValidationError{
				field:  "OwnerAccountId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetSignature() == nil {
		return GetAssociatedPhoneNumberRequestValidationError{
			field:  "Signature",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetSignature()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAssociatedPhoneNumberRequestValidationError{
				field:  "Signature",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetAssociatedPhoneNumberRequestValidationError is the validation error
// returned by GetAssociatedPhoneNumberRequest.Validate if the designated
// constraints aren't met.
type GetAssociatedPhoneNumberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAssociatedPhoneNumberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAssociatedPhoneNumberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAssociatedPhoneNumberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAssociatedPhoneNumberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAssociatedPhoneNumberRequestValidationError) ErrorName() string {
	return "GetAssociatedPhoneNumberRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAssociatedPhoneNumberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAssociatedPhoneNumberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAssociatedPhoneNumberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAssociatedPhoneNumberRequestValidationError{}

// Validate checks the field values on GetAssociatedPhoneNumberResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetAssociatedPhoneNumberResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Result

	if v, ok := interface{}(m.GetPhoneNumber()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAssociatedPhoneNumberResponseValidationError{
				field:  "PhoneNumber",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IsLinked

	return nil
}

// GetAssociatedPhoneNumberResponseValidationError is the validation error
// returned by GetAssociatedPhoneNumberResponse.Validate if the designated
// constraints aren't met.
type GetAssociatedPhoneNumberResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAssociatedPhoneNumberResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAssociatedPhoneNumberResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAssociatedPhoneNumberResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAssociatedPhoneNumberResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAssociatedPhoneNumberResponseValidationError) ErrorName() string {
	return "GetAssociatedPhoneNumberResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAssociatedPhoneNumberResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAssociatedPhoneNumberResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAssociatedPhoneNumberResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAssociatedPhoneNumberResponseValidationError{}

// Validate checks the field values on VerificationCode with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *VerificationCode) Validate() error {
	if m == nil {
		return nil
	}

	if !_VerificationCode_Value_Pattern.MatchString(m.GetValue()) {
		return VerificationCodeValidationError{
			field:  "Value",
			reason: "value does not match regex pattern \"^[0-9]{4,10}$\"",
		}
	}

	return nil
}

// VerificationCodeValidationError is the validation error returned by
// VerificationCode.Validate if the designated constraints aren't met.
type VerificationCodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerificationCodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerificationCodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerificationCodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerificationCodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerificationCodeValidationError) ErrorName() string { return "VerificationCodeValidationError" }

// Error satisfies the builtin error interface
func (e VerificationCodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerificationCode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerificationCodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerificationCodeValidationError{}

var _VerificationCode_Value_Pattern = regexp.MustCompile("^[0-9]{4,10}$")

// Validate checks the field values on PhoneLinkingToken with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *PhoneLinkingToken) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetPhoneNumber() == nil {
		return PhoneLinkingTokenValidationError{
			field:  "PhoneNumber",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetPhoneNumber()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PhoneLinkingTokenValidationError{
				field:  "PhoneNumber",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetCode() == nil {
		return PhoneLinkingTokenValidationError{
			field:  "Code",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetCode()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PhoneLinkingTokenValidationError{
				field:  "Code",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// PhoneLinkingTokenValidationError is the validation error returned by
// PhoneLinkingToken.Validate if the designated constraints aren't met.
type PhoneLinkingTokenValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PhoneLinkingTokenValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PhoneLinkingTokenValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PhoneLinkingTokenValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PhoneLinkingTokenValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PhoneLinkingTokenValidationError) ErrorName() string {
	return "PhoneLinkingTokenValidationError"
}

// Error satisfies the builtin error interface
func (e PhoneLinkingTokenValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPhoneLinkingToken.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PhoneLinkingTokenValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PhoneLinkingTokenValidationError{}
