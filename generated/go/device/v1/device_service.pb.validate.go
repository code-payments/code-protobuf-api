// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: device/v1/device_service.proto

package device

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on RegisterLoggedInAccountsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterLoggedInAccountsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterLoggedInAccountsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RegisterLoggedInAccountsRequestMultiError, or nil if none found.
func (m *RegisterLoggedInAccountsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterLoggedInAccountsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetAppInstall() == nil {
		err := RegisterLoggedInAccountsRequestValidationError{
			field:  "AppInstall",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAppInstall()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegisterLoggedInAccountsRequestValidationError{
					field:  "AppInstall",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegisterLoggedInAccountsRequestValidationError{
					field:  "AppInstall",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAppInstall()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegisterLoggedInAccountsRequestValidationError{
				field:  "AppInstall",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetOwners()) > 1 {
		err := RegisterLoggedInAccountsRequestValidationError{
			field:  "Owners",
			reason: "value must contain no more than 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetOwners() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RegisterLoggedInAccountsRequestValidationError{
						field:  fmt.Sprintf("Owners[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RegisterLoggedInAccountsRequestValidationError{
						field:  fmt.Sprintf("Owners[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RegisterLoggedInAccountsRequestValidationError{
					field:  fmt.Sprintf("Owners[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(m.GetSignatures()) > 1 {
		err := RegisterLoggedInAccountsRequestValidationError{
			field:  "Signatures",
			reason: "value must contain no more than 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetSignatures() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RegisterLoggedInAccountsRequestValidationError{
						field:  fmt.Sprintf("Signatures[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RegisterLoggedInAccountsRequestValidationError{
						field:  fmt.Sprintf("Signatures[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RegisterLoggedInAccountsRequestValidationError{
					field:  fmt.Sprintf("Signatures[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RegisterLoggedInAccountsRequestMultiError(errors)
	}

	return nil
}

// RegisterLoggedInAccountsRequestMultiError is an error wrapping multiple
// validation errors returned by RegisterLoggedInAccountsRequest.ValidateAll()
// if the designated constraints aren't met.
type RegisterLoggedInAccountsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterLoggedInAccountsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterLoggedInAccountsRequestMultiError) AllErrors() []error { return m }

// RegisterLoggedInAccountsRequestValidationError is the validation error
// returned by RegisterLoggedInAccountsRequest.Validate if the designated
// constraints aren't met.
type RegisterLoggedInAccountsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterLoggedInAccountsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterLoggedInAccountsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterLoggedInAccountsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterLoggedInAccountsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterLoggedInAccountsRequestValidationError) ErrorName() string {
	return "RegisterLoggedInAccountsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterLoggedInAccountsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterLoggedInAccountsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterLoggedInAccountsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterLoggedInAccountsRequestValidationError{}

// Validate checks the field values on RegisterLoggedInAccountsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RegisterLoggedInAccountsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterLoggedInAccountsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RegisterLoggedInAccountsResponseMultiError, or nil if none found.
func (m *RegisterLoggedInAccountsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterLoggedInAccountsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(m.GetInvalidOwners()) > 1 {
		err := RegisterLoggedInAccountsResponseValidationError{
			field:  "InvalidOwners",
			reason: "value must contain no more than 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetInvalidOwners() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RegisterLoggedInAccountsResponseValidationError{
						field:  fmt.Sprintf("InvalidOwners[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RegisterLoggedInAccountsResponseValidationError{
						field:  fmt.Sprintf("InvalidOwners[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RegisterLoggedInAccountsResponseValidationError{
					field:  fmt.Sprintf("InvalidOwners[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RegisterLoggedInAccountsResponseMultiError(errors)
	}

	return nil
}

// RegisterLoggedInAccountsResponseMultiError is an error wrapping multiple
// validation errors returned by
// RegisterLoggedInAccountsResponse.ValidateAll() if the designated
// constraints aren't met.
type RegisterLoggedInAccountsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterLoggedInAccountsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterLoggedInAccountsResponseMultiError) AllErrors() []error { return m }

// RegisterLoggedInAccountsResponseValidationError is the validation error
// returned by RegisterLoggedInAccountsResponse.Validate if the designated
// constraints aren't met.
type RegisterLoggedInAccountsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterLoggedInAccountsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterLoggedInAccountsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterLoggedInAccountsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterLoggedInAccountsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterLoggedInAccountsResponseValidationError) ErrorName() string {
	return "RegisterLoggedInAccountsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterLoggedInAccountsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterLoggedInAccountsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterLoggedInAccountsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterLoggedInAccountsResponseValidationError{}

// Validate checks the field values on GetLoggedInAccountsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLoggedInAccountsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLoggedInAccountsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLoggedInAccountsRequestMultiError, or nil if none found.
func (m *GetLoggedInAccountsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLoggedInAccountsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetAppInstall() == nil {
		err := GetLoggedInAccountsRequestValidationError{
			field:  "AppInstall",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAppInstall()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetLoggedInAccountsRequestValidationError{
					field:  "AppInstall",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetLoggedInAccountsRequestValidationError{
					field:  "AppInstall",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAppInstall()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetLoggedInAccountsRequestValidationError{
				field:  "AppInstall",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetLoggedInAccountsRequestMultiError(errors)
	}

	return nil
}

// GetLoggedInAccountsRequestMultiError is an error wrapping multiple
// validation errors returned by GetLoggedInAccountsRequest.ValidateAll() if
// the designated constraints aren't met.
type GetLoggedInAccountsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLoggedInAccountsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLoggedInAccountsRequestMultiError) AllErrors() []error { return m }

// GetLoggedInAccountsRequestValidationError is the validation error returned
// by GetLoggedInAccountsRequest.Validate if the designated constraints aren't met.
type GetLoggedInAccountsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLoggedInAccountsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLoggedInAccountsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLoggedInAccountsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLoggedInAccountsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLoggedInAccountsRequestValidationError) ErrorName() string {
	return "GetLoggedInAccountsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetLoggedInAccountsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLoggedInAccountsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLoggedInAccountsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLoggedInAccountsRequestValidationError{}

// Validate checks the field values on GetLoggedInAccountsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLoggedInAccountsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLoggedInAccountsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLoggedInAccountsResponseMultiError, or nil if none found.
func (m *GetLoggedInAccountsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLoggedInAccountsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(m.GetOwners()) > 1 {
		err := GetLoggedInAccountsResponseValidationError{
			field:  "Owners",
			reason: "value must contain no more than 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetOwners() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetLoggedInAccountsResponseValidationError{
						field:  fmt.Sprintf("Owners[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetLoggedInAccountsResponseValidationError{
						field:  fmt.Sprintf("Owners[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetLoggedInAccountsResponseValidationError{
					field:  fmt.Sprintf("Owners[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetLoggedInAccountsResponseMultiError(errors)
	}

	return nil
}

// GetLoggedInAccountsResponseMultiError is an error wrapping multiple
// validation errors returned by GetLoggedInAccountsResponse.ValidateAll() if
// the designated constraints aren't met.
type GetLoggedInAccountsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLoggedInAccountsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLoggedInAccountsResponseMultiError) AllErrors() []error { return m }

// GetLoggedInAccountsResponseValidationError is the validation error returned
// by GetLoggedInAccountsResponse.Validate if the designated constraints
// aren't met.
type GetLoggedInAccountsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLoggedInAccountsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLoggedInAccountsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLoggedInAccountsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLoggedInAccountsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLoggedInAccountsResponseValidationError) ErrorName() string {
	return "GetLoggedInAccountsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetLoggedInAccountsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLoggedInAccountsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLoggedInAccountsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLoggedInAccountsResponseValidationError{}
