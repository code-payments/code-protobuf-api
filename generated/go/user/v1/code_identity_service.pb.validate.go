// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: user/v1/code_identity_service.proto

package user

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	transaction "github.com/code-payments/code-protobuf-api/generated/go/transaction/v2"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = transaction.AirdropType(0)
)

// Validate checks the field values on LinkAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LinkAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LinkAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LinkAccountRequestMultiError, or nil if none found.
func (m *LinkAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LinkAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOwnerAccountId() == nil {
		err := LinkAccountRequestValidationError{
			field:  "OwnerAccountId",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetOwnerAccountId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LinkAccountRequestValidationError{
					field:  "OwnerAccountId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LinkAccountRequestValidationError{
					field:  "OwnerAccountId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOwnerAccountId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LinkAccountRequestValidationError{
				field:  "OwnerAccountId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetSignature() == nil {
		err := LinkAccountRequestValidationError{
			field:  "Signature",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetSignature()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LinkAccountRequestValidationError{
					field:  "Signature",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LinkAccountRequestValidationError{
					field:  "Signature",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSignature()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LinkAccountRequestValidationError{
				field:  "Signature",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch v := m.Token.(type) {
	case *LinkAccountRequest_Phone:
		if v == nil {
			err := LinkAccountRequestValidationError{
				field:  "Token",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if m.GetPhone() == nil {
			err := LinkAccountRequestValidationError{
				field:  "Phone",
				reason: "value is required",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPhone()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LinkAccountRequestValidationError{
						field:  "Phone",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LinkAccountRequestValidationError{
						field:  "Phone",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPhone()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LinkAccountRequestValidationError{
					field:  "Phone",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return LinkAccountRequestMultiError(errors)
	}

	return nil
}

// LinkAccountRequestMultiError is an error wrapping multiple validation errors
// returned by LinkAccountRequest.ValidateAll() if the designated constraints
// aren't met.
type LinkAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LinkAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LinkAccountRequestMultiError) AllErrors() []error { return m }

// LinkAccountRequestValidationError is the validation error returned by
// LinkAccountRequest.Validate if the designated constraints aren't met.
type LinkAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LinkAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LinkAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LinkAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LinkAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LinkAccountRequestValidationError) ErrorName() string {
	return "LinkAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LinkAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLinkAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LinkAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LinkAccountRequestValidationError{}

// Validate checks the field values on LinkAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LinkAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LinkAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LinkAccountResponseMultiError, or nil if none found.
func (m *LinkAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LinkAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LinkAccountResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LinkAccountResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LinkAccountResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDataContainerId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LinkAccountResponseValidationError{
					field:  "DataContainerId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LinkAccountResponseValidationError{
					field:  "DataContainerId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDataContainerId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LinkAccountResponseValidationError{
				field:  "DataContainerId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch v := m.Metadata.(type) {
	case *LinkAccountResponse_Phone:
		if v == nil {
			err := LinkAccountResponseValidationError{
				field:  "Metadata",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if m.GetPhone() == nil {
			err := LinkAccountResponseValidationError{
				field:  "Phone",
				reason: "value is required",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPhone()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LinkAccountResponseValidationError{
						field:  "Phone",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LinkAccountResponseValidationError{
						field:  "Phone",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPhone()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LinkAccountResponseValidationError{
					field:  "Phone",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return LinkAccountResponseMultiError(errors)
	}

	return nil
}

// LinkAccountResponseMultiError is an error wrapping multiple validation
// errors returned by LinkAccountResponse.ValidateAll() if the designated
// constraints aren't met.
type LinkAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LinkAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LinkAccountResponseMultiError) AllErrors() []error { return m }

// LinkAccountResponseValidationError is the validation error returned by
// LinkAccountResponse.Validate if the designated constraints aren't met.
type LinkAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LinkAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LinkAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LinkAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LinkAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LinkAccountResponseValidationError) ErrorName() string {
	return "LinkAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LinkAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLinkAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LinkAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LinkAccountResponseValidationError{}

// Validate checks the field values on UnlinkAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnlinkAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnlinkAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnlinkAccountRequestMultiError, or nil if none found.
func (m *UnlinkAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnlinkAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOwnerAccountId() == nil {
		err := UnlinkAccountRequestValidationError{
			field:  "OwnerAccountId",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetOwnerAccountId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UnlinkAccountRequestValidationError{
					field:  "OwnerAccountId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UnlinkAccountRequestValidationError{
					field:  "OwnerAccountId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOwnerAccountId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UnlinkAccountRequestValidationError{
				field:  "OwnerAccountId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetSignature() == nil {
		err := UnlinkAccountRequestValidationError{
			field:  "Signature",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetSignature()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UnlinkAccountRequestValidationError{
					field:  "Signature",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UnlinkAccountRequestValidationError{
					field:  "Signature",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSignature()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UnlinkAccountRequestValidationError{
				field:  "Signature",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch v := m.IdentifyingFeature.(type) {
	case *UnlinkAccountRequest_PhoneNumber:
		if v == nil {
			err := UnlinkAccountRequestValidationError{
				field:  "IdentifyingFeature",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if m.GetPhoneNumber() == nil {
			err := UnlinkAccountRequestValidationError{
				field:  "PhoneNumber",
				reason: "value is required",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPhoneNumber()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UnlinkAccountRequestValidationError{
						field:  "PhoneNumber",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UnlinkAccountRequestValidationError{
						field:  "PhoneNumber",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPhoneNumber()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UnlinkAccountRequestValidationError{
					field:  "PhoneNumber",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return UnlinkAccountRequestMultiError(errors)
	}

	return nil
}

// UnlinkAccountRequestMultiError is an error wrapping multiple validation
// errors returned by UnlinkAccountRequest.ValidateAll() if the designated
// constraints aren't met.
type UnlinkAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnlinkAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnlinkAccountRequestMultiError) AllErrors() []error { return m }

// UnlinkAccountRequestValidationError is the validation error returned by
// UnlinkAccountRequest.Validate if the designated constraints aren't met.
type UnlinkAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnlinkAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnlinkAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnlinkAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnlinkAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnlinkAccountRequestValidationError) ErrorName() string {
	return "UnlinkAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnlinkAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnlinkAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnlinkAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnlinkAccountRequestValidationError{}

// Validate checks the field values on UnlinkAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnlinkAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnlinkAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnlinkAccountResponseMultiError, or nil if none found.
func (m *UnlinkAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UnlinkAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return UnlinkAccountResponseMultiError(errors)
	}

	return nil
}

// UnlinkAccountResponseMultiError is an error wrapping multiple validation
// errors returned by UnlinkAccountResponse.ValidateAll() if the designated
// constraints aren't met.
type UnlinkAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnlinkAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnlinkAccountResponseMultiError) AllErrors() []error { return m }

// UnlinkAccountResponseValidationError is the validation error returned by
// UnlinkAccountResponse.Validate if the designated constraints aren't met.
type UnlinkAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnlinkAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnlinkAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnlinkAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnlinkAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnlinkAccountResponseValidationError) ErrorName() string {
	return "UnlinkAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UnlinkAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnlinkAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnlinkAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnlinkAccountResponseValidationError{}

// Validate checks the field values on GetUserRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUserRequestMultiError,
// or nil if none found.
func (m *GetUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOwnerAccountId() == nil {
		err := GetUserRequestValidationError{
			field:  "OwnerAccountId",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetOwnerAccountId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserRequestValidationError{
					field:  "OwnerAccountId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserRequestValidationError{
					field:  "OwnerAccountId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOwnerAccountId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserRequestValidationError{
				field:  "OwnerAccountId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetSignature() == nil {
		err := GetUserRequestValidationError{
			field:  "Signature",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetSignature()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserRequestValidationError{
					field:  "Signature",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserRequestValidationError{
					field:  "Signature",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSignature()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserRequestValidationError{
				field:  "Signature",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch v := m.IdentifyingFeature.(type) {
	case *GetUserRequest_PhoneNumber:
		if v == nil {
			err := GetUserRequestValidationError{
				field:  "IdentifyingFeature",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if m.GetPhoneNumber() == nil {
			err := GetUserRequestValidationError{
				field:  "PhoneNumber",
				reason: "value is required",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPhoneNumber()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserRequestValidationError{
						field:  "PhoneNumber",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserRequestValidationError{
						field:  "PhoneNumber",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPhoneNumber()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserRequestValidationError{
					field:  "PhoneNumber",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return GetUserRequestMultiError(errors)
	}

	return nil
}

// GetUserRequestMultiError is an error wrapping multiple validation errors
// returned by GetUserRequest.ValidateAll() if the designated constraints
// aren't met.
type GetUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserRequestMultiError) AllErrors() []error { return m }

// GetUserRequestValidationError is the validation error returned by
// GetUserRequest.Validate if the designated constraints aren't met.
type GetUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserRequestValidationError) ErrorName() string { return "GetUserRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserRequestValidationError{}

// Validate checks the field values on GetUserResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserResponseMultiError, or nil if none found.
func (m *GetUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDataContainerId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserResponseValidationError{
					field:  "DataContainerId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserResponseValidationError{
					field:  "DataContainerId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDataContainerId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserResponseValidationError{
				field:  "DataContainerId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for EnableInternalFlags

	// no validation rules for EnableBuyModule

	switch v := m.Metadata.(type) {
	case *GetUserResponse_Phone:
		if v == nil {
			err := GetUserResponseValidationError{
				field:  "Metadata",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if m.GetPhone() == nil {
			err := GetUserResponseValidationError{
				field:  "Phone",
				reason: "value is required",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPhone()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserResponseValidationError{
						field:  "Phone",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserResponseValidationError{
						field:  "Phone",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPhone()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserResponseValidationError{
					field:  "Phone",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return GetUserResponseMultiError(errors)
	}

	return nil
}

// GetUserResponseMultiError is an error wrapping multiple validation errors
// returned by GetUserResponse.ValidateAll() if the designated constraints
// aren't met.
type GetUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserResponseMultiError) AllErrors() []error { return m }

// GetUserResponseValidationError is the validation error returned by
// GetUserResponse.Validate if the designated constraints aren't met.
type GetUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserResponseValidationError) ErrorName() string { return "GetUserResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserResponseValidationError{}

// Validate checks the field values on UpdatePreferencesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePreferencesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePreferencesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePreferencesRequestMultiError, or nil if none found.
func (m *UpdatePreferencesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePreferencesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOwnerAccountId() == nil {
		err := UpdatePreferencesRequestValidationError{
			field:  "OwnerAccountId",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetOwnerAccountId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePreferencesRequestValidationError{
					field:  "OwnerAccountId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePreferencesRequestValidationError{
					field:  "OwnerAccountId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOwnerAccountId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePreferencesRequestValidationError{
				field:  "OwnerAccountId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetContainerId() == nil {
		err := UpdatePreferencesRequestValidationError{
			field:  "ContainerId",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetContainerId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePreferencesRequestValidationError{
					field:  "ContainerId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePreferencesRequestValidationError{
					field:  "ContainerId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetContainerId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePreferencesRequestValidationError{
				field:  "ContainerId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetSignature() == nil {
		err := UpdatePreferencesRequestValidationError{
			field:  "Signature",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetSignature()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePreferencesRequestValidationError{
					field:  "Signature",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePreferencesRequestValidationError{
					field:  "Signature",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSignature()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePreferencesRequestValidationError{
				field:  "Signature",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetLocale() == nil {
		err := UpdatePreferencesRequestValidationError{
			field:  "Locale",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetLocale()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePreferencesRequestValidationError{
					field:  "Locale",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePreferencesRequestValidationError{
					field:  "Locale",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLocale()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePreferencesRequestValidationError{
				field:  "Locale",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdatePreferencesRequestMultiError(errors)
	}

	return nil
}

// UpdatePreferencesRequestMultiError is an error wrapping multiple validation
// errors returned by UpdatePreferencesRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdatePreferencesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePreferencesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePreferencesRequestMultiError) AllErrors() []error { return m }

// UpdatePreferencesRequestValidationError is the validation error returned by
// UpdatePreferencesRequest.Validate if the designated constraints aren't met.
type UpdatePreferencesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePreferencesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePreferencesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePreferencesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePreferencesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePreferencesRequestValidationError) ErrorName() string {
	return "UpdatePreferencesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePreferencesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePreferencesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePreferencesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePreferencesRequestValidationError{}

// Validate checks the field values on UpdatePreferencesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePreferencesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePreferencesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePreferencesResponseMultiError, or nil if none found.
func (m *UpdatePreferencesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePreferencesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return UpdatePreferencesResponseMultiError(errors)
	}

	return nil
}

// UpdatePreferencesResponseMultiError is an error wrapping multiple validation
// errors returned by UpdatePreferencesResponse.ValidateAll() if the
// designated constraints aren't met.
type UpdatePreferencesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePreferencesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePreferencesResponseMultiError) AllErrors() []error { return m }

// UpdatePreferencesResponseValidationError is the validation error returned by
// UpdatePreferencesResponse.Validate if the designated constraints aren't met.
type UpdatePreferencesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePreferencesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePreferencesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePreferencesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePreferencesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePreferencesResponseValidationError) ErrorName() string {
	return "UpdatePreferencesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePreferencesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePreferencesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePreferencesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePreferencesResponseValidationError{}

// Validate checks the field values on LoginToThirdPartyAppRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoginToThirdPartyAppRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginToThirdPartyAppRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoginToThirdPartyAppRequestMultiError, or nil if none found.
func (m *LoginToThirdPartyAppRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginToThirdPartyAppRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetIntentId() == nil {
		err := LoginToThirdPartyAppRequestValidationError{
			field:  "IntentId",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetIntentId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoginToThirdPartyAppRequestValidationError{
					field:  "IntentId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoginToThirdPartyAppRequestValidationError{
					field:  "IntentId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIntentId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoginToThirdPartyAppRequestValidationError{
				field:  "IntentId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetUserId() == nil {
		err := LoginToThirdPartyAppRequestValidationError{
			field:  "UserId",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetUserId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoginToThirdPartyAppRequestValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoginToThirdPartyAppRequestValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoginToThirdPartyAppRequestValidationError{
				field:  "UserId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetSignature() == nil {
		err := LoginToThirdPartyAppRequestValidationError{
			field:  "Signature",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetSignature()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoginToThirdPartyAppRequestValidationError{
					field:  "Signature",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoginToThirdPartyAppRequestValidationError{
					field:  "Signature",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSignature()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoginToThirdPartyAppRequestValidationError{
				field:  "Signature",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LoginToThirdPartyAppRequestMultiError(errors)
	}

	return nil
}

// LoginToThirdPartyAppRequestMultiError is an error wrapping multiple
// validation errors returned by LoginToThirdPartyAppRequest.ValidateAll() if
// the designated constraints aren't met.
type LoginToThirdPartyAppRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginToThirdPartyAppRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginToThirdPartyAppRequestMultiError) AllErrors() []error { return m }

// LoginToThirdPartyAppRequestValidationError is the validation error returned
// by LoginToThirdPartyAppRequest.Validate if the designated constraints
// aren't met.
type LoginToThirdPartyAppRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginToThirdPartyAppRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginToThirdPartyAppRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginToThirdPartyAppRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginToThirdPartyAppRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginToThirdPartyAppRequestValidationError) ErrorName() string {
	return "LoginToThirdPartyAppRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LoginToThirdPartyAppRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginToThirdPartyAppRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginToThirdPartyAppRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginToThirdPartyAppRequestValidationError{}

// Validate checks the field values on LoginToThirdPartyAppResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoginToThirdPartyAppResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginToThirdPartyAppResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoginToThirdPartyAppResponseMultiError, or nil if none found.
func (m *LoginToThirdPartyAppResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginToThirdPartyAppResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return LoginToThirdPartyAppResponseMultiError(errors)
	}

	return nil
}

// LoginToThirdPartyAppResponseMultiError is an error wrapping multiple
// validation errors returned by LoginToThirdPartyAppResponse.ValidateAll() if
// the designated constraints aren't met.
type LoginToThirdPartyAppResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginToThirdPartyAppResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginToThirdPartyAppResponseMultiError) AllErrors() []error { return m }

// LoginToThirdPartyAppResponseValidationError is the validation error returned
// by LoginToThirdPartyAppResponse.Validate if the designated constraints
// aren't met.
type LoginToThirdPartyAppResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginToThirdPartyAppResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginToThirdPartyAppResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginToThirdPartyAppResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginToThirdPartyAppResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginToThirdPartyAppResponseValidationError) ErrorName() string {
	return "LoginToThirdPartyAppResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LoginToThirdPartyAppResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginToThirdPartyAppResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginToThirdPartyAppResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginToThirdPartyAppResponseValidationError{}

// Validate checks the field values on GetLoginForThirdPartyAppRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLoginForThirdPartyAppRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLoginForThirdPartyAppRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetLoginForThirdPartyAppRequestMultiError, or nil if none found.
func (m *GetLoginForThirdPartyAppRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLoginForThirdPartyAppRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetIntentId() == nil {
		err := GetLoginForThirdPartyAppRequestValidationError{
			field:  "IntentId",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetIntentId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetLoginForThirdPartyAppRequestValidationError{
					field:  "IntentId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetLoginForThirdPartyAppRequestValidationError{
					field:  "IntentId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIntentId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetLoginForThirdPartyAppRequestValidationError{
				field:  "IntentId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetVerifier() == nil {
		err := GetLoginForThirdPartyAppRequestValidationError{
			field:  "Verifier",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetVerifier()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetLoginForThirdPartyAppRequestValidationError{
					field:  "Verifier",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetLoginForThirdPartyAppRequestValidationError{
					field:  "Verifier",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVerifier()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetLoginForThirdPartyAppRequestValidationError{
				field:  "Verifier",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetSignature() == nil {
		err := GetLoginForThirdPartyAppRequestValidationError{
			field:  "Signature",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetSignature()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetLoginForThirdPartyAppRequestValidationError{
					field:  "Signature",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetLoginForThirdPartyAppRequestValidationError{
					field:  "Signature",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSignature()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetLoginForThirdPartyAppRequestValidationError{
				field:  "Signature",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetLoginForThirdPartyAppRequestMultiError(errors)
	}

	return nil
}

// GetLoginForThirdPartyAppRequestMultiError is an error wrapping multiple
// validation errors returned by GetLoginForThirdPartyAppRequest.ValidateAll()
// if the designated constraints aren't met.
type GetLoginForThirdPartyAppRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLoginForThirdPartyAppRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLoginForThirdPartyAppRequestMultiError) AllErrors() []error { return m }

// GetLoginForThirdPartyAppRequestValidationError is the validation error
// returned by GetLoginForThirdPartyAppRequest.Validate if the designated
// constraints aren't met.
type GetLoginForThirdPartyAppRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLoginForThirdPartyAppRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLoginForThirdPartyAppRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLoginForThirdPartyAppRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLoginForThirdPartyAppRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLoginForThirdPartyAppRequestValidationError) ErrorName() string {
	return "GetLoginForThirdPartyAppRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetLoginForThirdPartyAppRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLoginForThirdPartyAppRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLoginForThirdPartyAppRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLoginForThirdPartyAppRequestValidationError{}

// Validate checks the field values on GetLoginForThirdPartyAppResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetLoginForThirdPartyAppResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLoginForThirdPartyAppResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetLoginForThirdPartyAppResponseMultiError, or nil if none found.
func (m *GetLoginForThirdPartyAppResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLoginForThirdPartyAppResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if all {
		switch v := interface{}(m.GetUserId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetLoginForThirdPartyAppResponseValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetLoginForThirdPartyAppResponseValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetLoginForThirdPartyAppResponseValidationError{
				field:  "UserId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetLoginForThirdPartyAppResponseMultiError(errors)
	}

	return nil
}

// GetLoginForThirdPartyAppResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetLoginForThirdPartyAppResponse.ValidateAll() if the designated
// constraints aren't met.
type GetLoginForThirdPartyAppResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLoginForThirdPartyAppResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLoginForThirdPartyAppResponseMultiError) AllErrors() []error { return m }

// GetLoginForThirdPartyAppResponseValidationError is the validation error
// returned by GetLoginForThirdPartyAppResponse.Validate if the designated
// constraints aren't met.
type GetLoginForThirdPartyAppResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLoginForThirdPartyAppResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLoginForThirdPartyAppResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLoginForThirdPartyAppResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLoginForThirdPartyAppResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLoginForThirdPartyAppResponseValidationError) ErrorName() string {
	return "GetLoginForThirdPartyAppResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetLoginForThirdPartyAppResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLoginForThirdPartyAppResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLoginForThirdPartyAppResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLoginForThirdPartyAppResponseValidationError{}

// Validate checks the field values on GetTwitterUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTwitterUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTwitterUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTwitterUserRequestMultiError, or nil if none found.
func (m *GetTwitterUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTwitterUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	oneofQueryPresent := false
	switch v := m.Query.(type) {
	case *GetTwitterUserRequest_Username:
		if v == nil {
			err := GetTwitterUserRequestValidationError{
				field:  "Query",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofQueryPresent = true

		if utf8.RuneCountInString(m.GetUsername()) > 15 {
			err := GetTwitterUserRequestValidationError{
				field:  "Username",
				reason: "value length must be at most 15 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	case *GetTwitterUserRequest_TipAddress:
		if v == nil {
			err := GetTwitterUserRequestValidationError{
				field:  "Query",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofQueryPresent = true

		if all {
			switch v := interface{}(m.GetTipAddress()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTwitterUserRequestValidationError{
						field:  "TipAddress",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTwitterUserRequestValidationError{
						field:  "TipAddress",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTipAddress()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTwitterUserRequestValidationError{
					field:  "TipAddress",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofQueryPresent {
		err := GetTwitterUserRequestValidationError{
			field:  "Query",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetTwitterUserRequestMultiError(errors)
	}

	return nil
}

// GetTwitterUserRequestMultiError is an error wrapping multiple validation
// errors returned by GetTwitterUserRequest.ValidateAll() if the designated
// constraints aren't met.
type GetTwitterUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTwitterUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTwitterUserRequestMultiError) AllErrors() []error { return m }

// GetTwitterUserRequestValidationError is the validation error returned by
// GetTwitterUserRequest.Validate if the designated constraints aren't met.
type GetTwitterUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTwitterUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTwitterUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTwitterUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTwitterUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTwitterUserRequestValidationError) ErrorName() string {
	return "GetTwitterUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTwitterUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTwitterUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTwitterUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTwitterUserRequestValidationError{}

// Validate checks the field values on GetTwitterUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTwitterUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTwitterUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTwitterUserResponseMultiError, or nil if none found.
func (m *GetTwitterUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTwitterUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if all {
		switch v := interface{}(m.GetTwitterUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTwitterUserResponseValidationError{
					field:  "TwitterUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTwitterUserResponseValidationError{
					field:  "TwitterUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTwitterUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTwitterUserResponseValidationError{
				field:  "TwitterUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTwitterUserResponseMultiError(errors)
	}

	return nil
}

// GetTwitterUserResponseMultiError is an error wrapping multiple validation
// errors returned by GetTwitterUserResponse.ValidateAll() if the designated
// constraints aren't met.
type GetTwitterUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTwitterUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTwitterUserResponseMultiError) AllErrors() []error { return m }

// GetTwitterUserResponseValidationError is the validation error returned by
// GetTwitterUserResponse.Validate if the designated constraints aren't met.
type GetTwitterUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTwitterUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTwitterUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTwitterUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTwitterUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTwitterUserResponseValidationError) ErrorName() string {
	return "GetTwitterUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTwitterUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTwitterUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTwitterUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTwitterUserResponseValidationError{}

// Validate checks the field values on User with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on User with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UserMultiError, or nil if none found.
func (m *User) ValidateAll() error {
	return m.validate(true)
}

func (m *User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() == nil {
		err := UserValidationError{
			field:  "Id",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetView() == nil {
		err := UserValidationError{
			field:  "View",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetView()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "View",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "View",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetView()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserValidationError{
				field:  "View",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserMultiError(errors)
	}

	return nil
}

// UserMultiError is an error wrapping multiple validation errors returned by
// User.ValidateAll() if the designated constraints aren't met.
type UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserMultiError) AllErrors() []error { return m }

// UserValidationError is the validation error returned by User.Validate if the
// designated constraints aren't met.
type UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserValidationError) ErrorName() string { return "UserValidationError" }

// Error satisfies the builtin error interface
func (e UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserValidationError{}

// Validate checks the field values on View with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *View) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on View with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ViewMultiError, or nil if none found.
func (m *View) ValidateAll() error {
	return m.validate(true)
}

func (m *View) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPhoneNumber() == nil {
		err := ViewValidationError{
			field:  "PhoneNumber",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPhoneNumber()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ViewValidationError{
					field:  "PhoneNumber",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ViewValidationError{
					field:  "PhoneNumber",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPhoneNumber()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ViewValidationError{
				field:  "PhoneNumber",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ViewMultiError(errors)
	}

	return nil
}

// ViewMultiError is an error wrapping multiple validation errors returned by
// View.ValidateAll() if the designated constraints aren't met.
type ViewMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ViewMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ViewMultiError) AllErrors() []error { return m }

// ViewValidationError is the validation error returned by View.Validate if the
// designated constraints aren't met.
type ViewValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ViewValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ViewValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ViewValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ViewValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ViewValidationError) ErrorName() string { return "ViewValidationError" }

// Error satisfies the builtin error interface
func (e ViewValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sView.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ViewValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ViewValidationError{}

// Validate checks the field values on PhoneMetadata with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PhoneMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PhoneMetadata with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PhoneMetadataMultiError, or
// nil if none found.
func (m *PhoneMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *PhoneMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsLinked

	if len(errors) > 0 {
		return PhoneMetadataMultiError(errors)
	}

	return nil
}

// PhoneMetadataMultiError is an error wrapping multiple validation errors
// returned by PhoneMetadata.ValidateAll() if the designated constraints
// aren't met.
type PhoneMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PhoneMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PhoneMetadataMultiError) AllErrors() []error { return m }

// PhoneMetadataValidationError is the validation error returned by
// PhoneMetadata.Validate if the designated constraints aren't met.
type PhoneMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PhoneMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PhoneMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PhoneMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PhoneMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PhoneMetadataValidationError) ErrorName() string { return "PhoneMetadataValidationError" }

// Error satisfies the builtin error interface
func (e PhoneMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPhoneMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PhoneMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PhoneMetadataValidationError{}

// Validate checks the field values on TwitterUser with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TwitterUser) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TwitterUser with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TwitterUserMultiError, or
// nil if none found.
func (m *TwitterUser) ValidateAll() error {
	return m.validate(true)
}

func (m *TwitterUser) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetTipAddress() == nil {
		err := TwitterUserValidationError{
			field:  "TipAddress",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetTipAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TwitterUserValidationError{
					field:  "TipAddress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TwitterUserValidationError{
					field:  "TipAddress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTipAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TwitterUserValidationError{
				field:  "TipAddress",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := utf8.RuneCountInString(m.GetUsername()); l < 1 || l > 15 {
		err := TwitterUserValidationError{
			field:  "Username",
			reason: "value length must be between 1 and 15 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 256 {
		err := TwitterUserValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 256 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetProfilePicUrl()); l < 1 || l > 2048 {
		err := TwitterUserValidationError{
			field:  "ProfilePicUrl",
			reason: "value length must be between 1 and 2048 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for VerifiedType

	// no validation rules for FollowerCount

	if len(errors) > 0 {
		return TwitterUserMultiError(errors)
	}

	return nil
}

// TwitterUserMultiError is an error wrapping multiple validation errors
// returned by TwitterUser.ValidateAll() if the designated constraints aren't met.
type TwitterUserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TwitterUserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TwitterUserMultiError) AllErrors() []error { return m }

// TwitterUserValidationError is the validation error returned by
// TwitterUser.Validate if the designated constraints aren't met.
type TwitterUserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TwitterUserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TwitterUserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TwitterUserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TwitterUserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TwitterUserValidationError) ErrorName() string { return "TwitterUserValidationError" }

// Error satisfies the builtin error interface
func (e TwitterUserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTwitterUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TwitterUserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TwitterUserValidationError{}
