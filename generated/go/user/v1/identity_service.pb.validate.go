// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: user/v1/identity_service.proto

package user

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on LinkAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *LinkAccountRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetOwnerAccountId() == nil {
		return LinkAccountRequestValidationError{
			field:  "OwnerAccountId",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetOwnerAccountId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LinkAccountRequestValidationError{
				field:  "OwnerAccountId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetSignature() == nil {
		return LinkAccountRequestValidationError{
			field:  "Signature",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetSignature()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LinkAccountRequestValidationError{
				field:  "Signature",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch m.Token.(type) {

	case *LinkAccountRequest_Phone:

		if m.GetPhone() == nil {
			return LinkAccountRequestValidationError{
				field:  "Phone",
				reason: "value is required",
			}
		}

		if v, ok := interface{}(m.GetPhone()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LinkAccountRequestValidationError{
					field:  "Phone",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// LinkAccountRequestValidationError is the validation error returned by
// LinkAccountRequest.Validate if the designated constraints aren't met.
type LinkAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LinkAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LinkAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LinkAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LinkAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LinkAccountRequestValidationError) ErrorName() string {
	return "LinkAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LinkAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLinkAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LinkAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LinkAccountRequestValidationError{}

// Validate checks the field values on LinkAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *LinkAccountResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Result

	if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LinkAccountResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDataContainerId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LinkAccountResponseValidationError{
				field:  "DataContainerId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch m.Metadata.(type) {

	case *LinkAccountResponse_Phone:

		if m.GetPhone() == nil {
			return LinkAccountResponseValidationError{
				field:  "Phone",
				reason: "value is required",
			}
		}

		if v, ok := interface{}(m.GetPhone()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LinkAccountResponseValidationError{
					field:  "Phone",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// LinkAccountResponseValidationError is the validation error returned by
// LinkAccountResponse.Validate if the designated constraints aren't met.
type LinkAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LinkAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LinkAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LinkAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LinkAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LinkAccountResponseValidationError) ErrorName() string {
	return "LinkAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LinkAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLinkAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LinkAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LinkAccountResponseValidationError{}

// Validate checks the field values on UnlinkAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UnlinkAccountRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetOwnerAccountId() == nil {
		return UnlinkAccountRequestValidationError{
			field:  "OwnerAccountId",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetOwnerAccountId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UnlinkAccountRequestValidationError{
				field:  "OwnerAccountId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetSignature() == nil {
		return UnlinkAccountRequestValidationError{
			field:  "Signature",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetSignature()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UnlinkAccountRequestValidationError{
				field:  "Signature",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch m.IdentifyingFeature.(type) {

	case *UnlinkAccountRequest_PhoneNumber:

		if m.GetPhoneNumber() == nil {
			return UnlinkAccountRequestValidationError{
				field:  "PhoneNumber",
				reason: "value is required",
			}
		}

		if v, ok := interface{}(m.GetPhoneNumber()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UnlinkAccountRequestValidationError{
					field:  "PhoneNumber",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// UnlinkAccountRequestValidationError is the validation error returned by
// UnlinkAccountRequest.Validate if the designated constraints aren't met.
type UnlinkAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnlinkAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnlinkAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnlinkAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnlinkAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnlinkAccountRequestValidationError) ErrorName() string {
	return "UnlinkAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnlinkAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnlinkAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnlinkAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnlinkAccountRequestValidationError{}

// Validate checks the field values on UnlinkAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UnlinkAccountResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Result

	return nil
}

// UnlinkAccountResponseValidationError is the validation error returned by
// UnlinkAccountResponse.Validate if the designated constraints aren't met.
type UnlinkAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnlinkAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnlinkAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnlinkAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnlinkAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnlinkAccountResponseValidationError) ErrorName() string {
	return "UnlinkAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UnlinkAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnlinkAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnlinkAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnlinkAccountResponseValidationError{}

// Validate checks the field values on GetUserRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetUserRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetOwnerAccountId() == nil {
		return GetUserRequestValidationError{
			field:  "OwnerAccountId",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetOwnerAccountId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserRequestValidationError{
				field:  "OwnerAccountId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetSignature() == nil {
		return GetUserRequestValidationError{
			field:  "Signature",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetSignature()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserRequestValidationError{
				field:  "Signature",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch m.IdentifyingFeature.(type) {

	case *GetUserRequest_PhoneNumber:

		if m.GetPhoneNumber() == nil {
			return GetUserRequestValidationError{
				field:  "PhoneNumber",
				reason: "value is required",
			}
		}

		if v, ok := interface{}(m.GetPhoneNumber()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserRequestValidationError{
					field:  "PhoneNumber",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetUserRequestValidationError is the validation error returned by
// GetUserRequest.Validate if the designated constraints aren't met.
type GetUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserRequestValidationError) ErrorName() string { return "GetUserRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserRequestValidationError{}

// Validate checks the field values on GetUserResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetUserResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Result

	if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDataContainerId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserResponseValidationError{
				field:  "DataContainerId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for EnableInternalFlags

	// no validation rules for EnableBuyModule

	switch m.Metadata.(type) {

	case *GetUserResponse_Phone:

		if m.GetPhone() == nil {
			return GetUserResponseValidationError{
				field:  "Phone",
				reason: "value is required",
			}
		}

		if v, ok := interface{}(m.GetPhone()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserResponseValidationError{
					field:  "Phone",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetUserResponseValidationError is the validation error returned by
// GetUserResponse.Validate if the designated constraints aren't met.
type GetUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserResponseValidationError) ErrorName() string { return "GetUserResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserResponseValidationError{}

// Validate checks the field values on UpdatePreferencesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdatePreferencesRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetOwnerAccountId() == nil {
		return UpdatePreferencesRequestValidationError{
			field:  "OwnerAccountId",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetOwnerAccountId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePreferencesRequestValidationError{
				field:  "OwnerAccountId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetContainerId() == nil {
		return UpdatePreferencesRequestValidationError{
			field:  "ContainerId",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetContainerId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePreferencesRequestValidationError{
				field:  "ContainerId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetSignature() == nil {
		return UpdatePreferencesRequestValidationError{
			field:  "Signature",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetSignature()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePreferencesRequestValidationError{
				field:  "Signature",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetLocale() == nil {
		return UpdatePreferencesRequestValidationError{
			field:  "Locale",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetLocale()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePreferencesRequestValidationError{
				field:  "Locale",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdatePreferencesRequestValidationError is the validation error returned by
// UpdatePreferencesRequest.Validate if the designated constraints aren't met.
type UpdatePreferencesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePreferencesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePreferencesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePreferencesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePreferencesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePreferencesRequestValidationError) ErrorName() string {
	return "UpdatePreferencesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePreferencesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePreferencesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePreferencesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePreferencesRequestValidationError{}

// Validate checks the field values on UpdatePreferencesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdatePreferencesResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Result

	return nil
}

// UpdatePreferencesResponseValidationError is the validation error returned by
// UpdatePreferencesResponse.Validate if the designated constraints aren't met.
type UpdatePreferencesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePreferencesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePreferencesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePreferencesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePreferencesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePreferencesResponseValidationError) ErrorName() string {
	return "UpdatePreferencesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePreferencesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePreferencesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePreferencesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePreferencesResponseValidationError{}

// Validate checks the field values on LoginToThirdPartyAppRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *LoginToThirdPartyAppRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetIntentId() == nil {
		return LoginToThirdPartyAppRequestValidationError{
			field:  "IntentId",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetIntentId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoginToThirdPartyAppRequestValidationError{
				field:  "IntentId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetUserId() == nil {
		return LoginToThirdPartyAppRequestValidationError{
			field:  "UserId",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetUserId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoginToThirdPartyAppRequestValidationError{
				field:  "UserId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetSignature() == nil {
		return LoginToThirdPartyAppRequestValidationError{
			field:  "Signature",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetSignature()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoginToThirdPartyAppRequestValidationError{
				field:  "Signature",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// LoginToThirdPartyAppRequestValidationError is the validation error returned
// by LoginToThirdPartyAppRequest.Validate if the designated constraints
// aren't met.
type LoginToThirdPartyAppRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginToThirdPartyAppRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginToThirdPartyAppRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginToThirdPartyAppRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginToThirdPartyAppRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginToThirdPartyAppRequestValidationError) ErrorName() string {
	return "LoginToThirdPartyAppRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LoginToThirdPartyAppRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginToThirdPartyAppRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginToThirdPartyAppRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginToThirdPartyAppRequestValidationError{}

// Validate checks the field values on LoginToThirdPartyAppResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *LoginToThirdPartyAppResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Result

	return nil
}

// LoginToThirdPartyAppResponseValidationError is the validation error returned
// by LoginToThirdPartyAppResponse.Validate if the designated constraints
// aren't met.
type LoginToThirdPartyAppResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginToThirdPartyAppResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginToThirdPartyAppResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginToThirdPartyAppResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginToThirdPartyAppResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginToThirdPartyAppResponseValidationError) ErrorName() string {
	return "LoginToThirdPartyAppResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LoginToThirdPartyAppResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginToThirdPartyAppResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginToThirdPartyAppResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginToThirdPartyAppResponseValidationError{}

// Validate checks the field values on GetLoginForThirdPartyAppRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetLoginForThirdPartyAppRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetIntentId() == nil {
		return GetLoginForThirdPartyAppRequestValidationError{
			field:  "IntentId",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetIntentId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetLoginForThirdPartyAppRequestValidationError{
				field:  "IntentId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetVerifier() == nil {
		return GetLoginForThirdPartyAppRequestValidationError{
			field:  "Verifier",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetVerifier()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetLoginForThirdPartyAppRequestValidationError{
				field:  "Verifier",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetSignature() == nil {
		return GetLoginForThirdPartyAppRequestValidationError{
			field:  "Signature",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetSignature()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetLoginForThirdPartyAppRequestValidationError{
				field:  "Signature",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetLoginForThirdPartyAppRequestValidationError is the validation error
// returned by GetLoginForThirdPartyAppRequest.Validate if the designated
// constraints aren't met.
type GetLoginForThirdPartyAppRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLoginForThirdPartyAppRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLoginForThirdPartyAppRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLoginForThirdPartyAppRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLoginForThirdPartyAppRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLoginForThirdPartyAppRequestValidationError) ErrorName() string {
	return "GetLoginForThirdPartyAppRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetLoginForThirdPartyAppRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLoginForThirdPartyAppRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLoginForThirdPartyAppRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLoginForThirdPartyAppRequestValidationError{}

// Validate checks the field values on GetLoginForThirdPartyAppResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetLoginForThirdPartyAppResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Result

	if v, ok := interface{}(m.GetUserId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetLoginForThirdPartyAppResponseValidationError{
				field:  "UserId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetLoginForThirdPartyAppResponseValidationError is the validation error
// returned by GetLoginForThirdPartyAppResponse.Validate if the designated
// constraints aren't met.
type GetLoginForThirdPartyAppResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLoginForThirdPartyAppResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLoginForThirdPartyAppResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLoginForThirdPartyAppResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLoginForThirdPartyAppResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLoginForThirdPartyAppResponseValidationError) ErrorName() string {
	return "GetLoginForThirdPartyAppResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetLoginForThirdPartyAppResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLoginForThirdPartyAppResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLoginForThirdPartyAppResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLoginForThirdPartyAppResponseValidationError{}

// Validate checks the field values on GetTwitterUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetTwitterUserRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetRequestor()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTwitterUserRequestValidationError{
				field:  "Requestor",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetSignature()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTwitterUserRequestValidationError{
				field:  "Signature",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch m.Query.(type) {

	case *GetTwitterUserRequest_Username:

		if utf8.RuneCountInString(m.GetUsername()) > 15 {
			return GetTwitterUserRequestValidationError{
				field:  "Username",
				reason: "value length must be at most 15 runes",
			}
		}

	case *GetTwitterUserRequest_TipAddress:

		if v, ok := interface{}(m.GetTipAddress()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTwitterUserRequestValidationError{
					field:  "TipAddress",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		return GetTwitterUserRequestValidationError{
			field:  "Query",
			reason: "value is required",
		}

	}

	return nil
}

// GetTwitterUserRequestValidationError is the validation error returned by
// GetTwitterUserRequest.Validate if the designated constraints aren't met.
type GetTwitterUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTwitterUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTwitterUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTwitterUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTwitterUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTwitterUserRequestValidationError) ErrorName() string {
	return "GetTwitterUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTwitterUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTwitterUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTwitterUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTwitterUserRequestValidationError{}

// Validate checks the field values on GetTwitterUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetTwitterUserResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Result

	if v, ok := interface{}(m.GetTwitterUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTwitterUserResponseValidationError{
				field:  "TwitterUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetTwitterUserResponseValidationError is the validation error returned by
// GetTwitterUserResponse.Validate if the designated constraints aren't met.
type GetTwitterUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTwitterUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTwitterUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTwitterUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTwitterUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTwitterUserResponseValidationError) ErrorName() string {
	return "GetTwitterUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTwitterUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTwitterUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTwitterUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTwitterUserResponseValidationError{}

// Validate checks the field values on User with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *User) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetId() == nil {
		return UserValidationError{
			field:  "Id",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetView() == nil {
		return UserValidationError{
			field:  "View",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetView()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserValidationError{
				field:  "View",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UserValidationError is the validation error returned by User.Validate if the
// designated constraints aren't met.
type UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserValidationError) ErrorName() string { return "UserValidationError" }

// Error satisfies the builtin error interface
func (e UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserValidationError{}

// Validate checks the field values on View with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *View) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetPhoneNumber() == nil {
		return ViewValidationError{
			field:  "PhoneNumber",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetPhoneNumber()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ViewValidationError{
				field:  "PhoneNumber",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ViewValidationError is the validation error returned by View.Validate if the
// designated constraints aren't met.
type ViewValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ViewValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ViewValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ViewValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ViewValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ViewValidationError) ErrorName() string { return "ViewValidationError" }

// Error satisfies the builtin error interface
func (e ViewValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sView.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ViewValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ViewValidationError{}

// Validate checks the field values on PhoneMetadata with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *PhoneMetadata) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for IsLinked

	return nil
}

// PhoneMetadataValidationError is the validation error returned by
// PhoneMetadata.Validate if the designated constraints aren't met.
type PhoneMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PhoneMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PhoneMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PhoneMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PhoneMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PhoneMetadataValidationError) ErrorName() string { return "PhoneMetadataValidationError" }

// Error satisfies the builtin error interface
func (e PhoneMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPhoneMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PhoneMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PhoneMetadataValidationError{}

// Validate checks the field values on TwitterUser with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *TwitterUser) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetTipAddress() == nil {
		return TwitterUserValidationError{
			field:  "TipAddress",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetTipAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TwitterUserValidationError{
				field:  "TipAddress",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := utf8.RuneCountInString(m.GetUsername()); l < 1 || l > 15 {
		return TwitterUserValidationError{
			field:  "Username",
			reason: "value length must be between 1 and 15 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 256 {
		return TwitterUserValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 256 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetProfilePicUrl()); l < 1 || l > 2048 {
		return TwitterUserValidationError{
			field:  "ProfilePicUrl",
			reason: "value length must be between 1 and 2048 runes, inclusive",
		}
	}

	// no validation rules for VerifiedType

	// no validation rules for FollowerCount

	if v, ok := interface{}(m.GetFriendshipCost()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TwitterUserValidationError{
				field:  "FriendshipCost",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IsFriend

	if v, ok := interface{}(m.GetFriendChatId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TwitterUserValidationError{
				field:  "FriendChatId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// TwitterUserValidationError is the validation error returned by
// TwitterUser.Validate if the designated constraints aren't met.
type TwitterUserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TwitterUserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TwitterUserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TwitterUserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TwitterUserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TwitterUserValidationError) ErrorName() string { return "TwitterUserValidationError" }

// Error satisfies the builtin error interface
func (e TwitterUserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTwitterUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TwitterUserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TwitterUserValidationError{}
