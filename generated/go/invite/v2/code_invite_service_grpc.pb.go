// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: invite/v2/code_invite_service.proto

package invite

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Invite_GetInviteCount_FullMethodName      = "/code.invite.v2.Invite/GetInviteCount"
	Invite_InvitePhoneNumber_FullMethodName   = "/code.invite.v2.Invite/InvitePhoneNumber"
	Invite_GetInvitationStatus_FullMethodName = "/code.invite.v2.Invite/GetInvitationStatus"
)

// InviteClient is the client API for Invite service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InviteClient interface {
	// GetInviteCount gets the number of invites that a user can send out.
	GetInviteCount(ctx context.Context, in *GetInviteCountRequest, opts ...grpc.CallOption) (*GetInviteCountResponse, error)
	// InvitePhoneNumber invites someone to join via their phone number. A phone number
	// can only be invited once by a unique user or invite code. This is to avoid having
	// a phone number consuming more than one invite count globally.
	InvitePhoneNumber(ctx context.Context, in *InvitePhoneNumberRequest, opts ...grpc.CallOption) (*InvitePhoneNumberResponse, error)
	// GetInvitationStatus gets a phone number's invitation status.
	GetInvitationStatus(ctx context.Context, in *GetInvitationStatusRequest, opts ...grpc.CallOption) (*GetInvitationStatusResponse, error)
}

type inviteClient struct {
	cc grpc.ClientConnInterface
}

func NewInviteClient(cc grpc.ClientConnInterface) InviteClient {
	return &inviteClient{cc}
}

func (c *inviteClient) GetInviteCount(ctx context.Context, in *GetInviteCountRequest, opts ...grpc.CallOption) (*GetInviteCountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInviteCountResponse)
	err := c.cc.Invoke(ctx, Invite_GetInviteCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inviteClient) InvitePhoneNumber(ctx context.Context, in *InvitePhoneNumberRequest, opts ...grpc.CallOption) (*InvitePhoneNumberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InvitePhoneNumberResponse)
	err := c.cc.Invoke(ctx, Invite_InvitePhoneNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inviteClient) GetInvitationStatus(ctx context.Context, in *GetInvitationStatusRequest, opts ...grpc.CallOption) (*GetInvitationStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInvitationStatusResponse)
	err := c.cc.Invoke(ctx, Invite_GetInvitationStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InviteServer is the server API for Invite service.
// All implementations must embed UnimplementedInviteServer
// for forward compatibility.
type InviteServer interface {
	// GetInviteCount gets the number of invites that a user can send out.
	GetInviteCount(context.Context, *GetInviteCountRequest) (*GetInviteCountResponse, error)
	// InvitePhoneNumber invites someone to join via their phone number. A phone number
	// can only be invited once by a unique user or invite code. This is to avoid having
	// a phone number consuming more than one invite count globally.
	InvitePhoneNumber(context.Context, *InvitePhoneNumberRequest) (*InvitePhoneNumberResponse, error)
	// GetInvitationStatus gets a phone number's invitation status.
	GetInvitationStatus(context.Context, *GetInvitationStatusRequest) (*GetInvitationStatusResponse, error)
	mustEmbedUnimplementedInviteServer()
}

// UnimplementedInviteServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInviteServer struct{}

func (UnimplementedInviteServer) GetInviteCount(context.Context, *GetInviteCountRequest) (*GetInviteCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInviteCount not implemented")
}
func (UnimplementedInviteServer) InvitePhoneNumber(context.Context, *InvitePhoneNumberRequest) (*InvitePhoneNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvitePhoneNumber not implemented")
}
func (UnimplementedInviteServer) GetInvitationStatus(context.Context, *GetInvitationStatusRequest) (*GetInvitationStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvitationStatus not implemented")
}
func (UnimplementedInviteServer) mustEmbedUnimplementedInviteServer() {}
func (UnimplementedInviteServer) testEmbeddedByValue()                {}

// UnsafeInviteServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InviteServer will
// result in compilation errors.
type UnsafeInviteServer interface {
	mustEmbedUnimplementedInviteServer()
}

func RegisterInviteServer(s grpc.ServiceRegistrar, srv InviteServer) {
	// If the following call pancis, it indicates UnimplementedInviteServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Invite_ServiceDesc, srv)
}

func _Invite_GetInviteCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInviteCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InviteServer).GetInviteCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Invite_GetInviteCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InviteServer).GetInviteCount(ctx, req.(*GetInviteCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Invite_InvitePhoneNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvitePhoneNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InviteServer).InvitePhoneNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Invite_InvitePhoneNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InviteServer).InvitePhoneNumber(ctx, req.(*InvitePhoneNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Invite_GetInvitationStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvitationStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InviteServer).GetInvitationStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Invite_GetInvitationStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InviteServer).GetInvitationStatus(ctx, req.(*GetInvitationStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Invite_ServiceDesc is the grpc.ServiceDesc for Invite service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Invite_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "code.invite.v2.Invite",
	HandlerType: (*InviteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInviteCount",
			Handler:    _Invite_GetInviteCount_Handler,
		},
		{
			MethodName: "InvitePhoneNumber",
			Handler:    _Invite_InvitePhoneNumber_Handler,
		},
		{
			MethodName: "GetInvitationStatus",
			Handler:    _Invite_GetInvitationStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "invite/v2/code_invite_service.proto",
}
