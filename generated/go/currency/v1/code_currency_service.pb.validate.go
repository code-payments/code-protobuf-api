// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: currency/v1/code_currency_service.proto

package currency

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetAllRatesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllRatesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllRatesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllRatesRequestMultiError, or nil if none found.
func (m *GetAllRatesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllRatesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAllRatesRequestValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAllRatesRequestValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAllRatesRequestValidationError{
				field:  "Timestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAllRatesRequestMultiError(errors)
	}

	return nil
}

// GetAllRatesRequestMultiError is an error wrapping multiple validation errors
// returned by GetAllRatesRequest.ValidateAll() if the designated constraints
// aren't met.
type GetAllRatesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllRatesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllRatesRequestMultiError) AllErrors() []error { return m }

// GetAllRatesRequestValidationError is the validation error returned by
// GetAllRatesRequest.Validate if the designated constraints aren't met.
type GetAllRatesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllRatesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllRatesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllRatesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllRatesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllRatesRequestValidationError) ErrorName() string {
	return "GetAllRatesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllRatesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllRatesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllRatesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllRatesRequestValidationError{}

// Validate checks the field values on GetAllRatesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllRatesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllRatesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllRatesResponseMultiError, or nil if none found.
func (m *GetAllRatesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllRatesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if m.GetAsOf() == nil {
		err := GetAllRatesResponseValidationError{
			field:  "AsOf",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	{
		sorted_keys := make([]string, len(m.GetRates()))
		i := 0
		for key := range m.GetRates() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetRates()[key]
			_ = val

			if !_GetAllRatesResponse_Rates_Pattern.MatchString(key) {
				err := GetAllRatesResponseValidationError{
					field:  fmt.Sprintf("Rates[%v]", key),
					reason: "value does not match regex pattern \"^[a-z]{3,4}$\"",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

			// no validation rules for Rates[key]
		}
	}

	if len(errors) > 0 {
		return GetAllRatesResponseMultiError(errors)
	}

	return nil
}

// GetAllRatesResponseMultiError is an error wrapping multiple validation
// errors returned by GetAllRatesResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAllRatesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllRatesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllRatesResponseMultiError) AllErrors() []error { return m }

// GetAllRatesResponseValidationError is the validation error returned by
// GetAllRatesResponse.Validate if the designated constraints aren't met.
type GetAllRatesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllRatesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllRatesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllRatesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllRatesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllRatesResponseValidationError) ErrorName() string {
	return "GetAllRatesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllRatesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllRatesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllRatesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllRatesResponseValidationError{}

var _GetAllRatesResponse_Rates_Pattern = regexp.MustCompile("^[a-z]{3,4}$")
