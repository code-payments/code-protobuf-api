// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: currency/v1/currency_service.proto

package currency

import (
	v1 "github.com/code-payments/code-protobuf-api/generated/go/common/v1"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetAllRatesResponse_Result int32

const (
	GetAllRatesResponse_OK GetAllRatesResponse_Result = 0
	// No currency data is available for the requested timestamp.
	GetAllRatesResponse_MISSING_DATA GetAllRatesResponse_Result = 1
)

// Enum value maps for GetAllRatesResponse_Result.
var (
	GetAllRatesResponse_Result_name = map[int32]string{
		0: "OK",
		1: "MISSING_DATA",
	}
	GetAllRatesResponse_Result_value = map[string]int32{
		"OK":           0,
		"MISSING_DATA": 1,
	}
)

func (x GetAllRatesResponse_Result) Enum() *GetAllRatesResponse_Result {
	p := new(GetAllRatesResponse_Result)
	*p = x
	return p
}

func (x GetAllRatesResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetAllRatesResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_currency_v1_currency_service_proto_enumTypes[0].Descriptor()
}

func (GetAllRatesResponse_Result) Type() protoreflect.EnumType {
	return &file_currency_v1_currency_service_proto_enumTypes[0]
}

func (x GetAllRatesResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetAllRatesResponse_Result.Descriptor instead.
func (GetAllRatesResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_currency_v1_currency_service_proto_rawDescGZIP(), []int{1, 0}
}

type GetMintsResponse_Result int32

const (
	GetMintsResponse_OK        GetMintsResponse_Result = 0
	GetMintsResponse_NOT_FOUND GetMintsResponse_Result = 1
)

// Enum value maps for GetMintsResponse_Result.
var (
	GetMintsResponse_Result_name = map[int32]string{
		0: "OK",
		1: "NOT_FOUND",
	}
	GetMintsResponse_Result_value = map[string]int32{
		"OK":        0,
		"NOT_FOUND": 1,
	}
)

func (x GetMintsResponse_Result) Enum() *GetMintsResponse_Result {
	p := new(GetMintsResponse_Result)
	*p = x
	return p
}

func (x GetMintsResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetMintsResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_currency_v1_currency_service_proto_enumTypes[1].Descriptor()
}

func (GetMintsResponse_Result) Type() protoreflect.EnumType {
	return &file_currency_v1_currency_service_proto_enumTypes[1]
}

func (x GetMintsResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetMintsResponse_Result.Descriptor instead.
func (GetMintsResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_currency_v1_currency_service_proto_rawDescGZIP(), []int{3, 0}
}

type GetAllRatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If timestamp is included, the returned rate will be the most recent available
	// exchange rate prior to the provided timestamp within the same day. Otherwise,
	// the latest rates will be returned.
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *GetAllRatesRequest) Reset() {
	*x = GetAllRatesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_currency_v1_currency_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllRatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllRatesRequest) ProtoMessage() {}

func (x *GetAllRatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_currency_v1_currency_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllRatesRequest.ProtoReflect.Descriptor instead.
func (*GetAllRatesRequest) Descriptor() ([]byte, []int) {
	return file_currency_v1_currency_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetAllRatesRequest) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type GetAllRatesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result GetAllRatesResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=code.currency.v1.GetAllRatesResponse_Result" json:"result,omitempty"`
	// The time the exchange rates were observed
	AsOf *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=as_of,json=asOf,proto3" json:"as_of,omitempty"`
	// The price of 1 core mint token in different currencies, keyed on 3- or 4-
	// letter lowercase currency code.
	Rates map[string]float64 `protobuf:"bytes,3,rep,name=rates,proto3" json:"rates,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
}

func (x *GetAllRatesResponse) Reset() {
	*x = GetAllRatesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_currency_v1_currency_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllRatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllRatesResponse) ProtoMessage() {}

func (x *GetAllRatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_currency_v1_currency_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllRatesResponse.ProtoReflect.Descriptor instead.
func (*GetAllRatesResponse) Descriptor() ([]byte, []int) {
	return file_currency_v1_currency_service_proto_rawDescGZIP(), []int{1}
}

func (x *GetAllRatesResponse) GetResult() GetAllRatesResponse_Result {
	if x != nil {
		return x.Result
	}
	return GetAllRatesResponse_OK
}

func (x *GetAllRatesResponse) GetAsOf() *timestamppb.Timestamp {
	if x != nil {
		return x.AsOf
	}
	return nil
}

func (x *GetAllRatesResponse) GetRates() map[string]float64 {
	if x != nil {
		return x.Rates
	}
	return nil
}

type GetMintsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addresses []*v1.SolanaAccountId `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (x *GetMintsRequest) Reset() {
	*x = GetMintsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_currency_v1_currency_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMintsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMintsRequest) ProtoMessage() {}

func (x *GetMintsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_currency_v1_currency_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMintsRequest.ProtoReflect.Descriptor instead.
func (*GetMintsRequest) Descriptor() ([]byte, []int) {
	return file_currency_v1_currency_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetMintsRequest) GetAddresses() []*v1.SolanaAccountId {
	if x != nil {
		return x.Addresses
	}
	return nil
}

type GetMintsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result            GetMintsResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=code.currency.v1.GetMintsResponse_Result" json:"result,omitempty"`
	MetadataByAddress map[string]*Mint        `protobuf:"bytes,2,rep,name=metadata_by_address,json=metadataByAddress,proto3" json:"metadata_by_address,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetMintsResponse) Reset() {
	*x = GetMintsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_currency_v1_currency_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMintsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMintsResponse) ProtoMessage() {}

func (x *GetMintsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_currency_v1_currency_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMintsResponse.ProtoReflect.Descriptor instead.
func (*GetMintsResponse) Descriptor() ([]byte, []int) {
	return file_currency_v1_currency_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetMintsResponse) GetResult() GetMintsResponse_Result {
	if x != nil {
		return x.Result
	}
	return GetMintsResponse_OK
}

func (x *GetMintsResponse) GetMetadataByAddress() map[string]*Mint {
	if x != nil {
		return x.MetadataByAddress
	}
	return nil
}

type Mint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Token mint address
	Address *v1.SolanaAccountId `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// The number of decimals configured for the mint
	Decimals uint32 `protobuf:"varint,2,opt,name=decimals,proto3" json:"decimals,omitempty"`
	// Currency name
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Currency ticker symbol
	Symbol string `protobuf:"bytes,4,opt,name=symbol,proto3" json:"symbol,omitempty"`
	// Available when a VM exists for the given mint, and can be used for deriving
	// VM deposit PDAs
	//
	// Note: Only currencies with a VM are useable for payments
	VmMetadata *VmMintMetadata `protobuf:"bytes,5,opt,name=vm_metadata,json=vmMetadata,proto3" json:"vm_metadata,omitempty"`
	// Available when created by the currency creator program, and can be used for
	// calculating price, market cap, etc. based on the exponential bonding curve
	CurrencyCreatorMetadata *CurrencyCreatorMintMetadata `protobuf:"bytes,6,opt,name=currency_creator_metadata,json=currencyCreatorMetadata,proto3" json:"currency_creator_metadata,omitempty"`
}

func (x *Mint) Reset() {
	*x = Mint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_currency_v1_currency_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mint) ProtoMessage() {}

func (x *Mint) ProtoReflect() protoreflect.Message {
	mi := &file_currency_v1_currency_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mint.ProtoReflect.Descriptor instead.
func (*Mint) Descriptor() ([]byte, []int) {
	return file_currency_v1_currency_service_proto_rawDescGZIP(), []int{4}
}

func (x *Mint) GetAddress() *v1.SolanaAccountId {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Mint) GetDecimals() uint32 {
	if x != nil {
		return x.Decimals
	}
	return 0
}

func (x *Mint) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Mint) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Mint) GetVmMetadata() *VmMintMetadata {
	if x != nil {
		return x.VmMetadata
	}
	return nil
}

func (x *Mint) GetCurrencyCreatorMetadata() *CurrencyCreatorMintMetadata {
	if x != nil {
		return x.CurrencyCreatorMetadata
	}
	return nil
}

type VmMintMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// VM address
	Vm *v1.SolanaAccountId `protobuf:"bytes,1,opt,name=vm,proto3" json:"vm,omitempty"`
	// Authority that subsidizes and authorizes all transactions against the VM
	Authority *v1.SolanaAccountId `protobuf:"bytes,2,opt,name=authority,proto3" json:"authority,omitempty"`
	// Lock duration of Virtual Timelock Accounts on the VM, currently hardcoded
	// to 21 days
	LockDurationInDays uint32 `protobuf:"varint,3,opt,name=lock_duration_in_days,json=lockDurationInDays,proto3" json:"lock_duration_in_days,omitempty"`
}

func (x *VmMintMetadata) Reset() {
	*x = VmMintMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_currency_v1_currency_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VmMintMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VmMintMetadata) ProtoMessage() {}

func (x *VmMintMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_currency_v1_currency_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VmMintMetadata.ProtoReflect.Descriptor instead.
func (*VmMintMetadata) Descriptor() ([]byte, []int) {
	return file_currency_v1_currency_service_proto_rawDescGZIP(), []int{5}
}

func (x *VmMintMetadata) GetVm() *v1.SolanaAccountId {
	if x != nil {
		return x.Vm
	}
	return nil
}

func (x *VmMintMetadata) GetAuthority() *v1.SolanaAccountId {
	if x != nil {
		return x.Authority
	}
	return nil
}

func (x *VmMintMetadata) GetLockDurationInDays() uint32 {
	if x != nil {
		return x.LockDurationInDays
	}
	return 0
}

type CurrencyCreatorMintMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Current circulating token supply
	SupplyFromBonding uint64 `protobuf:"varint,1,opt,name=supply_from_bonding,json=supplyFromBonding,proto3" json:"supply_from_bonding,omitempty"`
	// Current core mint tokens locked in the liquidity pool
	CoreMintTokensLocked uint64 `protobuf:"varint,2,opt,name=core_mint_tokens_locked,json=coreMintTokensLocked,proto3" json:"core_mint_tokens_locked,omitempty"`
	// Percent fee for buys in basis points, currently hardcoded to 0%
	BuyFeeBps uint32 `protobuf:"varint,3,opt,name=buy_fee_bps,json=buyFeeBps,proto3" json:"buy_fee_bps,omitempty"`
	// Precent fee for sells in basis points, currently hardcoded to 1%
	SellFeeBps uint32 `protobuf:"varint,4,opt,name=sell_fee_bps,json=sellFeeBps,proto3" json:"sell_fee_bps,omitempty"`
}

func (x *CurrencyCreatorMintMetadata) Reset() {
	*x = CurrencyCreatorMintMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_currency_v1_currency_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrencyCreatorMintMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyCreatorMintMetadata) ProtoMessage() {}

func (x *CurrencyCreatorMintMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_currency_v1_currency_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyCreatorMintMetadata.ProtoReflect.Descriptor instead.
func (*CurrencyCreatorMintMetadata) Descriptor() ([]byte, []int) {
	return file_currency_v1_currency_service_proto_rawDescGZIP(), []int{6}
}

func (x *CurrencyCreatorMintMetadata) GetSupplyFromBonding() uint64 {
	if x != nil {
		return x.SupplyFromBonding
	}
	return 0
}

func (x *CurrencyCreatorMintMetadata) GetCoreMintTokensLocked() uint64 {
	if x != nil {
		return x.CoreMintTokensLocked
	}
	return 0
}

func (x *CurrencyCreatorMintMetadata) GetBuyFeeBps() uint32 {
	if x != nil {
		return x.BuyFeeBps
	}
	return 0
}

func (x *CurrencyCreatorMintMetadata) GetSellFeeBps() uint32 {
	if x != nil {
		return x.SellFeeBps
	}
	return 0
}

var File_currency_v1_currency_service_proto protoreflect.FileDescriptor

var file_currency_v1_currency_service_proto_rawDesc = []byte{
	0x0a, 0x22, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x1a, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76,
	0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4e, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x52, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xda, 0x02, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x44, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2c, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3b, 0x0a, 0x05, 0x61, 0x73, 0x5f, 0x6f, 0x66, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0xb2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x04, 0x61, 0x73,
	0x4f, 0x66, 0x12, 0x62, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x42, 0x1a, 0xba, 0xe9, 0xc0, 0x03, 0x15, 0x9a, 0x01, 0x12, 0x22, 0x10, 0x72,
	0x0e, 0x32, 0x0c, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x7b, 0x33, 0x2c, 0x34, 0x7d, 0x24, 0x52,
	0x05, 0x72, 0x61, 0x74, 0x65, 0x73, 0x1a, 0x38, 0x0a, 0x0a, 0x52, 0x61, 0x74, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x22, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b,
	0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x41,
	0x54, 0x41, 0x10, 0x01, 0x22, 0x5f, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61,
	0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x0d, 0xba, 0xe9, 0xc0,
	0x03, 0x08, 0x92, 0x01, 0x05, 0x08, 0x01, 0x10, 0x80, 0x08, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0xbf, 0x02, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x4d, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x69, 0x0a,
	0x13, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x62, 0x79, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x4d, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42,
	0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x5c, 0x0a, 0x16, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x6e, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x1f, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f,
	0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x22, 0xdd, 0x02, 0x0a, 0x04, 0x4d, 0x69, 0x6e, 0x74,
	0x12, 0x45, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0xb2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x73, 0x12, 0x1f, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0b, 0xba, 0xe9, 0xc0, 0x03, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x20, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xba, 0xe9, 0xc0, 0x03, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18,
	0x08, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x41, 0x0a, 0x0b, 0x76, 0x6d, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x6d, 0x4d, 0x69, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x0a, 0x76, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x69, 0x0a, 0x19,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x4d, 0x69, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x17,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xd6, 0x01, 0x0a, 0x0e, 0x56, 0x6d, 0x4d, 0x69,
	0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x02, 0x76, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0xb2, 0x01,
	0x02, 0x08, 0x01, 0x52, 0x02, 0x76, 0x6d, 0x12, 0x49, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61,
	0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0,
	0x03, 0x05, 0xb2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x3c, 0x0a, 0x15, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x09, 0xba, 0xe9, 0xc0, 0x03, 0x04, 0x2a, 0x02, 0x08, 0x15, 0x52, 0x12, 0x6c, 0x6f,
	0x63, 0x6b, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x44, 0x61, 0x79, 0x73,
	0x22, 0xdc, 0x01, 0x0a, 0x1b, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x4d, 0x69, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x2e, 0x0a, 0x13, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x62, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x73,
	0x75, 0x70, 0x70, 0x6c, 0x79, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x35, 0x0a, 0x17, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x14, 0x63, 0x6f, 0x72, 0x65, 0x4d, 0x69, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x62, 0x75, 0x79, 0x5f, 0x66,
	0x65, 0x65, 0x5f, 0x62, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x09, 0xba, 0xe9,
	0xc0, 0x03, 0x04, 0x2a, 0x02, 0x08, 0x00, 0x52, 0x09, 0x62, 0x75, 0x79, 0x46, 0x65, 0x65, 0x42,
	0x70, 0x73, 0x12, 0x2b, 0x0a, 0x0c, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x62,
	0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x09, 0xba, 0xe9, 0xc0, 0x03, 0x04, 0x2a,
	0x02, 0x08, 0x64, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x46, 0x65, 0x65, 0x42, 0x70, 0x73, 0x32,
	0xb9, 0x01, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x5a, 0x0a, 0x0b,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x73, 0x12, 0x24, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x25, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x4d,
	0x69, 0x6e, 0x74, 0x73, 0x12, 0x21, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x69,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x7b, 0x0a, 0x1b, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x65, 0x6e, 0x2e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x5a, 0x4c, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x2d, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x2f, 0x67, 0x6f, 0x2f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2f, 0x76, 0x31, 0x3b,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0xa2, 0x02, 0x0d, 0x43, 0x50, 0x42, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_currency_v1_currency_service_proto_rawDescOnce sync.Once
	file_currency_v1_currency_service_proto_rawDescData = file_currency_v1_currency_service_proto_rawDesc
)

func file_currency_v1_currency_service_proto_rawDescGZIP() []byte {
	file_currency_v1_currency_service_proto_rawDescOnce.Do(func() {
		file_currency_v1_currency_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_currency_v1_currency_service_proto_rawDescData)
	})
	return file_currency_v1_currency_service_proto_rawDescData
}

var file_currency_v1_currency_service_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_currency_v1_currency_service_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_currency_v1_currency_service_proto_goTypes = []interface{}{
	(GetAllRatesResponse_Result)(0),     // 0: code.currency.v1.GetAllRatesResponse.Result
	(GetMintsResponse_Result)(0),        // 1: code.currency.v1.GetMintsResponse.Result
	(*GetAllRatesRequest)(nil),          // 2: code.currency.v1.GetAllRatesRequest
	(*GetAllRatesResponse)(nil),         // 3: code.currency.v1.GetAllRatesResponse
	(*GetMintsRequest)(nil),             // 4: code.currency.v1.GetMintsRequest
	(*GetMintsResponse)(nil),            // 5: code.currency.v1.GetMintsResponse
	(*Mint)(nil),                        // 6: code.currency.v1.Mint
	(*VmMintMetadata)(nil),              // 7: code.currency.v1.VmMintMetadata
	(*CurrencyCreatorMintMetadata)(nil), // 8: code.currency.v1.CurrencyCreatorMintMetadata
	nil,                                 // 9: code.currency.v1.GetAllRatesResponse.RatesEntry
	nil,                                 // 10: code.currency.v1.GetMintsResponse.MetadataByAddressEntry
	(*timestamppb.Timestamp)(nil),       // 11: google.protobuf.Timestamp
	(*v1.SolanaAccountId)(nil),          // 12: code.common.v1.SolanaAccountId
}
var file_currency_v1_currency_service_proto_depIdxs = []int32{
	11, // 0: code.currency.v1.GetAllRatesRequest.timestamp:type_name -> google.protobuf.Timestamp
	0,  // 1: code.currency.v1.GetAllRatesResponse.result:type_name -> code.currency.v1.GetAllRatesResponse.Result
	11, // 2: code.currency.v1.GetAllRatesResponse.as_of:type_name -> google.protobuf.Timestamp
	9,  // 3: code.currency.v1.GetAllRatesResponse.rates:type_name -> code.currency.v1.GetAllRatesResponse.RatesEntry
	12, // 4: code.currency.v1.GetMintsRequest.addresses:type_name -> code.common.v1.SolanaAccountId
	1,  // 5: code.currency.v1.GetMintsResponse.result:type_name -> code.currency.v1.GetMintsResponse.Result
	10, // 6: code.currency.v1.GetMintsResponse.metadata_by_address:type_name -> code.currency.v1.GetMintsResponse.MetadataByAddressEntry
	12, // 7: code.currency.v1.Mint.address:type_name -> code.common.v1.SolanaAccountId
	7,  // 8: code.currency.v1.Mint.vm_metadata:type_name -> code.currency.v1.VmMintMetadata
	8,  // 9: code.currency.v1.Mint.currency_creator_metadata:type_name -> code.currency.v1.CurrencyCreatorMintMetadata
	12, // 10: code.currency.v1.VmMintMetadata.vm:type_name -> code.common.v1.SolanaAccountId
	12, // 11: code.currency.v1.VmMintMetadata.authority:type_name -> code.common.v1.SolanaAccountId
	6,  // 12: code.currency.v1.GetMintsResponse.MetadataByAddressEntry.value:type_name -> code.currency.v1.Mint
	2,  // 13: code.currency.v1.Currency.GetAllRates:input_type -> code.currency.v1.GetAllRatesRequest
	4,  // 14: code.currency.v1.Currency.GetMints:input_type -> code.currency.v1.GetMintsRequest
	3,  // 15: code.currency.v1.Currency.GetAllRates:output_type -> code.currency.v1.GetAllRatesResponse
	5,  // 16: code.currency.v1.Currency.GetMints:output_type -> code.currency.v1.GetMintsResponse
	15, // [15:17] is the sub-list for method output_type
	13, // [13:15] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_currency_v1_currency_service_proto_init() }
func file_currency_v1_currency_service_proto_init() {
	if File_currency_v1_currency_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_currency_v1_currency_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllRatesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_currency_v1_currency_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllRatesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_currency_v1_currency_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMintsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_currency_v1_currency_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMintsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_currency_v1_currency_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_currency_v1_currency_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VmMintMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_currency_v1_currency_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrencyCreatorMintMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_currency_v1_currency_service_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_currency_v1_currency_service_proto_goTypes,
		DependencyIndexes: file_currency_v1_currency_service_proto_depIdxs,
		EnumInfos:         file_currency_v1_currency_service_proto_enumTypes,
		MessageInfos:      file_currency_v1_currency_service_proto_msgTypes,
	}.Build()
	File_currency_v1_currency_service_proto = out.File
	file_currency_v1_currency_service_proto_rawDesc = nil
	file_currency_v1_currency_service_proto_goTypes = nil
	file_currency_v1_currency_service_proto_depIdxs = nil
}
