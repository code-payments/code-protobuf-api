// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: account/v1/account_service.proto

package account

import (
	v1 "github.com/code-payments/code-protobuf-api/generated/go/common/v1"
	v2 "github.com/code-payments/code-protobuf-api/generated/go/transaction/v2"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IsCodeAccountResponse_Result int32

const (
	// The account is a Code account.
	IsCodeAccountResponse_OK IsCodeAccountResponse_Result = 0
	// The account is not a Code account.
	IsCodeAccountResponse_NOT_FOUND IsCodeAccountResponse_Result = 1
	// The account exists, but at least one timelock account is unlocked.
	IsCodeAccountResponse_UNLOCKED_TIMELOCK_ACCOUNT IsCodeAccountResponse_Result = 2
)

// Enum value maps for IsCodeAccountResponse_Result.
var (
	IsCodeAccountResponse_Result_name = map[int32]string{
		0: "OK",
		1: "NOT_FOUND",
		2: "UNLOCKED_TIMELOCK_ACCOUNT",
	}
	IsCodeAccountResponse_Result_value = map[string]int32{
		"OK":                        0,
		"NOT_FOUND":                 1,
		"UNLOCKED_TIMELOCK_ACCOUNT": 2,
	}
)

func (x IsCodeAccountResponse_Result) Enum() *IsCodeAccountResponse_Result {
	p := new(IsCodeAccountResponse_Result)
	*p = x
	return p
}

func (x IsCodeAccountResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IsCodeAccountResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_account_v1_account_service_proto_enumTypes[0].Descriptor()
}

func (IsCodeAccountResponse_Result) Type() protoreflect.EnumType {
	return &file_account_v1_account_service_proto_enumTypes[0]
}

func (x IsCodeAccountResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IsCodeAccountResponse_Result.Descriptor instead.
func (IsCodeAccountResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_account_v1_account_service_proto_rawDescGZIP(), []int{1, 0}
}

type GetTokenAccountInfosResponse_Result int32

const (
	GetTokenAccountInfosResponse_OK        GetTokenAccountInfosResponse_Result = 0
	GetTokenAccountInfosResponse_NOT_FOUND GetTokenAccountInfosResponse_Result = 1
)

// Enum value maps for GetTokenAccountInfosResponse_Result.
var (
	GetTokenAccountInfosResponse_Result_name = map[int32]string{
		0: "OK",
		1: "NOT_FOUND",
	}
	GetTokenAccountInfosResponse_Result_value = map[string]int32{
		"OK":        0,
		"NOT_FOUND": 1,
	}
)

func (x GetTokenAccountInfosResponse_Result) Enum() *GetTokenAccountInfosResponse_Result {
	p := new(GetTokenAccountInfosResponse_Result)
	*p = x
	return p
}

func (x GetTokenAccountInfosResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetTokenAccountInfosResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_account_v1_account_service_proto_enumTypes[1].Descriptor()
}

func (GetTokenAccountInfosResponse_Result) Type() protoreflect.EnumType {
	return &file_account_v1_account_service_proto_enumTypes[1]
}

func (x GetTokenAccountInfosResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetTokenAccountInfosResponse_Result.Descriptor instead.
func (GetTokenAccountInfosResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_account_v1_account_service_proto_rawDescGZIP(), []int{3, 0}
}

type TokenAccountInfo_BalanceSource int32

const (
	// The account's balance could not be determined. This may be returned when
	// the data source is unstable and a reliable balance cannot be determined.
	TokenAccountInfo_BALANCE_SOURCE_UNKNOWN TokenAccountInfo_BalanceSource = 0
	// The account's balance was fetched directly from a finalized state on the
	// blockchain.
	TokenAccountInfo_BALANCE_SOURCE_BLOCKCHAIN TokenAccountInfo_BalanceSource = 1
	// The account's balance was calculated using cached values in Code. Accuracy
	// is only guaranteed when management_state is LOCKED.
	TokenAccountInfo_BALANCE_SOURCE_CACHE TokenAccountInfo_BalanceSource = 2
)

// Enum value maps for TokenAccountInfo_BalanceSource.
var (
	TokenAccountInfo_BalanceSource_name = map[int32]string{
		0: "BALANCE_SOURCE_UNKNOWN",
		1: "BALANCE_SOURCE_BLOCKCHAIN",
		2: "BALANCE_SOURCE_CACHE",
	}
	TokenAccountInfo_BalanceSource_value = map[string]int32{
		"BALANCE_SOURCE_UNKNOWN":    0,
		"BALANCE_SOURCE_BLOCKCHAIN": 1,
		"BALANCE_SOURCE_CACHE":      2,
	}
)

func (x TokenAccountInfo_BalanceSource) Enum() *TokenAccountInfo_BalanceSource {
	p := new(TokenAccountInfo_BalanceSource)
	*p = x
	return p
}

func (x TokenAccountInfo_BalanceSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TokenAccountInfo_BalanceSource) Descriptor() protoreflect.EnumDescriptor {
	return file_account_v1_account_service_proto_enumTypes[2].Descriptor()
}

func (TokenAccountInfo_BalanceSource) Type() protoreflect.EnumType {
	return &file_account_v1_account_service_proto_enumTypes[2]
}

func (x TokenAccountInfo_BalanceSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TokenAccountInfo_BalanceSource.Descriptor instead.
func (TokenAccountInfo_BalanceSource) EnumDescriptor() ([]byte, []int) {
	return file_account_v1_account_service_proto_rawDescGZIP(), []int{4, 0}
}

type TokenAccountInfo_ManagementState int32

const (
	// The state of the account is unknown. This may be returned when the
	// data source is unstable and a reliable state cannot be determined.
	TokenAccountInfo_MANAGEMENT_STATE_UNKNOWN TokenAccountInfo_ManagementState = 0
	// Code does not maintain a management state and won't move funds for this
	// account.
	TokenAccountInfo_MANAGEMENT_STATE_NONE TokenAccountInfo_ManagementState = 1
	// The account is in the process of transitioning to the LOCKED state.
	TokenAccountInfo_MANAGEMENT_STATE_LOCKING TokenAccountInfo_ManagementState = 2
	// The account's funds are locked and Code has co-signing authority.
	TokenAccountInfo_MANAGEMENT_STATE_LOCKED TokenAccountInfo_ManagementState = 3
	// The account is in the process of transitioning to the UNLOCKED state.
	TokenAccountInfo_MANAGEMENT_STATE_UNLOCKING TokenAccountInfo_ManagementState = 4
	// The account's funds are unlocked and Code no longer has co-signing
	// authority. The account must transition to the LOCKED state to have
	// management capabilities.
	TokenAccountInfo_MANAGEMENT_STATE_UNLOCKED TokenAccountInfo_ManagementState = 5
	// The account is in the process of transitioning to the CLOSED state.
	TokenAccountInfo_MANAGEMENT_STATE_CLOSING TokenAccountInfo_ManagementState = 6
	// The account has been closed and doesn't exist on the blockchain.
	// Subsequently, it also has a zero balance.
	TokenAccountInfo_MANAGEMENT_STATE_CLOSED TokenAccountInfo_ManagementState = 7
)

// Enum value maps for TokenAccountInfo_ManagementState.
var (
	TokenAccountInfo_ManagementState_name = map[int32]string{
		0: "MANAGEMENT_STATE_UNKNOWN",
		1: "MANAGEMENT_STATE_NONE",
		2: "MANAGEMENT_STATE_LOCKING",
		3: "MANAGEMENT_STATE_LOCKED",
		4: "MANAGEMENT_STATE_UNLOCKING",
		5: "MANAGEMENT_STATE_UNLOCKED",
		6: "MANAGEMENT_STATE_CLOSING",
		7: "MANAGEMENT_STATE_CLOSED",
	}
	TokenAccountInfo_ManagementState_value = map[string]int32{
		"MANAGEMENT_STATE_UNKNOWN":   0,
		"MANAGEMENT_STATE_NONE":      1,
		"MANAGEMENT_STATE_LOCKING":   2,
		"MANAGEMENT_STATE_LOCKED":    3,
		"MANAGEMENT_STATE_UNLOCKING": 4,
		"MANAGEMENT_STATE_UNLOCKED":  5,
		"MANAGEMENT_STATE_CLOSING":   6,
		"MANAGEMENT_STATE_CLOSED":    7,
	}
)

func (x TokenAccountInfo_ManagementState) Enum() *TokenAccountInfo_ManagementState {
	p := new(TokenAccountInfo_ManagementState)
	*p = x
	return p
}

func (x TokenAccountInfo_ManagementState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TokenAccountInfo_ManagementState) Descriptor() protoreflect.EnumDescriptor {
	return file_account_v1_account_service_proto_enumTypes[3].Descriptor()
}

func (TokenAccountInfo_ManagementState) Type() protoreflect.EnumType {
	return &file_account_v1_account_service_proto_enumTypes[3]
}

func (x TokenAccountInfo_ManagementState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TokenAccountInfo_ManagementState.Descriptor instead.
func (TokenAccountInfo_ManagementState) EnumDescriptor() ([]byte, []int) {
	return file_account_v1_account_service_proto_rawDescGZIP(), []int{4, 1}
}

type TokenAccountInfo_BlockchainState int32

const (
	// The state of the account is unknown. This may be returned when the
	// data source is unstable and a reliable state cannot be determined.
	TokenAccountInfo_BLOCKCHAIN_STATE_UNKNOWN TokenAccountInfo_BlockchainState = 0
	// The account does not exist on the blockchain.
	TokenAccountInfo_BLOCKCHAIN_STATE_DOES_NOT_EXIST TokenAccountInfo_BlockchainState = 1
	// The account is created and exists on the blockchain.
	TokenAccountInfo_BLOCKCHAIN_STATE_EXISTS TokenAccountInfo_BlockchainState = 2
)

// Enum value maps for TokenAccountInfo_BlockchainState.
var (
	TokenAccountInfo_BlockchainState_name = map[int32]string{
		0: "BLOCKCHAIN_STATE_UNKNOWN",
		1: "BLOCKCHAIN_STATE_DOES_NOT_EXIST",
		2: "BLOCKCHAIN_STATE_EXISTS",
	}
	TokenAccountInfo_BlockchainState_value = map[string]int32{
		"BLOCKCHAIN_STATE_UNKNOWN":        0,
		"BLOCKCHAIN_STATE_DOES_NOT_EXIST": 1,
		"BLOCKCHAIN_STATE_EXISTS":         2,
	}
)

func (x TokenAccountInfo_BlockchainState) Enum() *TokenAccountInfo_BlockchainState {
	p := new(TokenAccountInfo_BlockchainState)
	*p = x
	return p
}

func (x TokenAccountInfo_BlockchainState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TokenAccountInfo_BlockchainState) Descriptor() protoreflect.EnumDescriptor {
	return file_account_v1_account_service_proto_enumTypes[4].Descriptor()
}

func (TokenAccountInfo_BlockchainState) Type() protoreflect.EnumType {
	return &file_account_v1_account_service_proto_enumTypes[4]
}

func (x TokenAccountInfo_BlockchainState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TokenAccountInfo_BlockchainState.Descriptor instead.
func (TokenAccountInfo_BlockchainState) EnumDescriptor() ([]byte, []int) {
	return file_account_v1_account_service_proto_rawDescGZIP(), []int{4, 2}
}

type TokenAccountInfo_ClaimState int32

const (
	// The account doesn't have a concept of being claimed, or the state
	// could not be fetched by server.
	TokenAccountInfo_CLAIM_STATE_UNKNOWN TokenAccountInfo_ClaimState = 0
	// The account has not yet been claimed.
	TokenAccountInfo_CLAIM_STATE_NOT_CLAIMED TokenAccountInfo_ClaimState = 1
	// The account is claimed. Attempting to claim it will fail.
	TokenAccountInfo_CLAIM_STATE_CLAIMED TokenAccountInfo_ClaimState = 2
	// The account hasn't been claimed, but is expired. Funds will move
	// back to the issuer. Attempting to claim it will fail.
	TokenAccountInfo_CLAIM_STATE_EXPIRED TokenAccountInfo_ClaimState = 3
)

// Enum value maps for TokenAccountInfo_ClaimState.
var (
	TokenAccountInfo_ClaimState_name = map[int32]string{
		0: "CLAIM_STATE_UNKNOWN",
		1: "CLAIM_STATE_NOT_CLAIMED",
		2: "CLAIM_STATE_CLAIMED",
		3: "CLAIM_STATE_EXPIRED",
	}
	TokenAccountInfo_ClaimState_value = map[string]int32{
		"CLAIM_STATE_UNKNOWN":     0,
		"CLAIM_STATE_NOT_CLAIMED": 1,
		"CLAIM_STATE_CLAIMED":     2,
		"CLAIM_STATE_EXPIRED":     3,
	}
)

func (x TokenAccountInfo_ClaimState) Enum() *TokenAccountInfo_ClaimState {
	p := new(TokenAccountInfo_ClaimState)
	*p = x
	return p
}

func (x TokenAccountInfo_ClaimState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TokenAccountInfo_ClaimState) Descriptor() protoreflect.EnumDescriptor {
	return file_account_v1_account_service_proto_enumTypes[5].Descriptor()
}

func (TokenAccountInfo_ClaimState) Type() protoreflect.EnumType {
	return &file_account_v1_account_service_proto_enumTypes[5]
}

func (x TokenAccountInfo_ClaimState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TokenAccountInfo_ClaimState.Descriptor instead.
func (TokenAccountInfo_ClaimState) EnumDescriptor() ([]byte, []int) {
	return file_account_v1_account_service_proto_rawDescGZIP(), []int{4, 3}
}

type IsCodeAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The owner account to check against.
	Owner *v1.SolanaAccountId `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	// The signature is of serialize(IsCodeAccountRequest) without this field set
	// using the private key of the owner account. This provides an authentication
	// mechanism to the RPC.
	Signature *v1.Signature `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *IsCodeAccountRequest) Reset() {
	*x = IsCodeAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_v1_account_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsCodeAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsCodeAccountRequest) ProtoMessage() {}

func (x *IsCodeAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_account_v1_account_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsCodeAccountRequest.ProtoReflect.Descriptor instead.
func (*IsCodeAccountRequest) Descriptor() ([]byte, []int) {
	return file_account_v1_account_service_proto_rawDescGZIP(), []int{0}
}

func (x *IsCodeAccountRequest) GetOwner() *v1.SolanaAccountId {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *IsCodeAccountRequest) GetSignature() *v1.Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type IsCodeAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result IsCodeAccountResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=code.account.v1.IsCodeAccountResponse_Result" json:"result,omitempty"`
}

func (x *IsCodeAccountResponse) Reset() {
	*x = IsCodeAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_v1_account_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsCodeAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsCodeAccountResponse) ProtoMessage() {}

func (x *IsCodeAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_account_v1_account_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsCodeAccountResponse.ProtoReflect.Descriptor instead.
func (*IsCodeAccountResponse) Descriptor() ([]byte, []int) {
	return file_account_v1_account_service_proto_rawDescGZIP(), []int{1}
}

func (x *IsCodeAccountResponse) GetResult() IsCodeAccountResponse_Result {
	if x != nil {
		return x.Result
	}
	return IsCodeAccountResponse_OK
}

type GetTokenAccountInfosRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The owner account, which can also be thought of as a parent account for this
	// RPC that links to one or more token accounts.
	Owner *v1.SolanaAccountId `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	// The signature is of serialize(GetTokenAccountInfosRequest) without this field set
	// using the private key of the owner account. This provides an authentication
	// mechanism to the RPC.
	Signature *v1.Signature `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *GetTokenAccountInfosRequest) Reset() {
	*x = GetTokenAccountInfosRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_v1_account_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTokenAccountInfosRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTokenAccountInfosRequest) ProtoMessage() {}

func (x *GetTokenAccountInfosRequest) ProtoReflect() protoreflect.Message {
	mi := &file_account_v1_account_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTokenAccountInfosRequest.ProtoReflect.Descriptor instead.
func (*GetTokenAccountInfosRequest) Descriptor() ([]byte, []int) {
	return file_account_v1_account_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetTokenAccountInfosRequest) GetOwner() *v1.SolanaAccountId {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *GetTokenAccountInfosRequest) GetSignature() *v1.Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type GetTokenAccountInfosResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result            GetTokenAccountInfosResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=code.account.v1.GetTokenAccountInfosResponse_Result" json:"result,omitempty"`
	TokenAccountInfos map[string]*TokenAccountInfo        `protobuf:"bytes,2,rep,name=token_account_infos,json=tokenAccountInfos,proto3" json:"token_account_infos,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetTokenAccountInfosResponse) Reset() {
	*x = GetTokenAccountInfosResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_v1_account_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTokenAccountInfosResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTokenAccountInfosResponse) ProtoMessage() {}

func (x *GetTokenAccountInfosResponse) ProtoReflect() protoreflect.Message {
	mi := &file_account_v1_account_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTokenAccountInfosResponse.ProtoReflect.Descriptor instead.
func (*GetTokenAccountInfosResponse) Descriptor() ([]byte, []int) {
	return file_account_v1_account_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetTokenAccountInfosResponse) GetResult() GetTokenAccountInfosResponse_Result {
	if x != nil {
		return x.Result
	}
	return GetTokenAccountInfosResponse_OK
}

func (x *GetTokenAccountInfosResponse) GetTokenAccountInfos() map[string]*TokenAccountInfo {
	if x != nil {
		return x.TokenAccountInfos
	}
	return nil
}

type TokenAccountInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The token account's address
	Address *v1.SolanaAccountId `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// The owner of the token account, which can also be thought of as a parent
	// account that links to one or more token accounts. This is provided when
	// available.
	Owner *v1.SolanaAccountId `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	// The token account's authority, which has access to moving funds for the
	// account. This can be the owner account under certain circumstances (eg.
	// ATA, primary account). This is provided when available.
	Authority *v1.SolanaAccountId `protobuf:"bytes,3,opt,name=authority,proto3" json:"authority,omitempty"`
	// The type of token account, which infers its intended use.
	AccountType v1.AccountType `protobuf:"varint,4,opt,name=account_type,json=accountType,proto3,enum=code.common.v1.AccountType" json:"account_type,omitempty"`
	// The account's derivation index for applicable account types. When this field
	// doesn't apply, a zero value is provided.
	Index uint64 `protobuf:"varint,5,opt,name=index,proto3" json:"index,omitempty"`
	// The source of truth for the balance calculation.
	BalanceSource TokenAccountInfo_BalanceSource `protobuf:"varint,6,opt,name=balance_source,json=balanceSource,proto3,enum=code.account.v1.TokenAccountInfo_BalanceSource" json:"balance_source,omitempty"`
	// The balance in quarks, as observed by Code. This may not reflect the value
	// on the blockchain and could be non-zero even if the account hasn't been created.
	// Use balance_source to determine how this value was calculated.
	Balance uint64 `protobuf:"varint,7,opt,name=balance,proto3" json:"balance,omitempty"`
	// The state of the account as it pertains to Code's ability to manage funds.
	ManagementState TokenAccountInfo_ManagementState `protobuf:"varint,8,opt,name=management_state,json=managementState,proto3,enum=code.account.v1.TokenAccountInfo_ManagementState" json:"management_state,omitempty"`
	// The state of the account on the blockchain.
	BlockchainState TokenAccountInfo_BlockchainState `protobuf:"varint,9,opt,name=blockchain_state,json=blockchainState,proto3,enum=code.account.v1.TokenAccountInfo_BlockchainState" json:"blockchain_state,omitempty"`
	// For temporary incoming accounts only. Flag indicates whether client must
	// actively try rotating it by issuing a ReceivePaymentsPrivately intent. In
	// general, clients should wait as long as possible until this flag is true
	// or requiring the funds to send their next payment.
	MustRotate bool `protobuf:"varint,10,opt,name=must_rotate,json=mustRotate,proto3" json:"must_rotate,omitempty"`
	// Whether an account is claimed. This only applies to relevant account types
	// (eg. REMOTE_SEND_GIFT_CARD).
	ClaimState TokenAccountInfo_ClaimState `protobuf:"varint,11,opt,name=claim_state,json=claimState,proto3,enum=code.account.v1.TokenAccountInfo_ClaimState" json:"claim_state,omitempty"`
	// For account types used as an intermediary for sending money between two
	// users (eg. REMOTE_SEND_GIFT_CARD), this represents the original exchange
	// data used to fund the account. Over time, this value will become stale:
	//  1. Exchange rates will fluctuate, so the total fiat amount will differ.
	//  2. External entities can deposit additional funds into the account, so
	//     the balance, in quarks, may be greater than the original quark value.
	//  3. The balance could have been received, so the total balance can show
	//     as zero.
	OriginalExchangeData *v2.ExchangeData `protobuf:"bytes,12,opt,name=original_exchange_data,json=originalExchangeData,proto3" json:"original_exchange_data,omitempty"`
	// The token account's mint
	Mint *v1.SolanaAccountId `protobuf:"bytes,13,opt,name=mint,proto3" json:"mint,omitempty"`
	// The number of decimals configured for the mint
	MintDecimals uint32 `protobuf:"varint,14,opt,name=mint_decimals,json=mintDecimals,proto3" json:"mint_decimals,omitempty"`
	// User-friendly display name for the mint
	MintDisplayName string `protobuf:"bytes,15,opt,name=mint_display_name,json=mintDisplayName,proto3" json:"mint_display_name,omitempty"`
}

func (x *TokenAccountInfo) Reset() {
	*x = TokenAccountInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_v1_account_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenAccountInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenAccountInfo) ProtoMessage() {}

func (x *TokenAccountInfo) ProtoReflect() protoreflect.Message {
	mi := &file_account_v1_account_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenAccountInfo.ProtoReflect.Descriptor instead.
func (*TokenAccountInfo) Descriptor() ([]byte, []int) {
	return file_account_v1_account_service_proto_rawDescGZIP(), []int{4}
}

func (x *TokenAccountInfo) GetAddress() *v1.SolanaAccountId {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *TokenAccountInfo) GetOwner() *v1.SolanaAccountId {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *TokenAccountInfo) GetAuthority() *v1.SolanaAccountId {
	if x != nil {
		return x.Authority
	}
	return nil
}

func (x *TokenAccountInfo) GetAccountType() v1.AccountType {
	if x != nil {
		return x.AccountType
	}
	return v1.AccountType(0)
}

func (x *TokenAccountInfo) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *TokenAccountInfo) GetBalanceSource() TokenAccountInfo_BalanceSource {
	if x != nil {
		return x.BalanceSource
	}
	return TokenAccountInfo_BALANCE_SOURCE_UNKNOWN
}

func (x *TokenAccountInfo) GetBalance() uint64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *TokenAccountInfo) GetManagementState() TokenAccountInfo_ManagementState {
	if x != nil {
		return x.ManagementState
	}
	return TokenAccountInfo_MANAGEMENT_STATE_UNKNOWN
}

func (x *TokenAccountInfo) GetBlockchainState() TokenAccountInfo_BlockchainState {
	if x != nil {
		return x.BlockchainState
	}
	return TokenAccountInfo_BLOCKCHAIN_STATE_UNKNOWN
}

func (x *TokenAccountInfo) GetMustRotate() bool {
	if x != nil {
		return x.MustRotate
	}
	return false
}

func (x *TokenAccountInfo) GetClaimState() TokenAccountInfo_ClaimState {
	if x != nil {
		return x.ClaimState
	}
	return TokenAccountInfo_CLAIM_STATE_UNKNOWN
}

func (x *TokenAccountInfo) GetOriginalExchangeData() *v2.ExchangeData {
	if x != nil {
		return x.OriginalExchangeData
	}
	return nil
}

func (x *TokenAccountInfo) GetMint() *v1.SolanaAccountId {
	if x != nil {
		return x.Mint
	}
	return nil
}

func (x *TokenAccountInfo) GetMintDecimals() uint32 {
	if x != nil {
		return x.MintDecimals
	}
	return 0
}

func (x *TokenAccountInfo) GetMintDisplayName() string {
	if x != nil {
		return x.MintDisplayName
	}
	return ""
}

var File_account_v1_account_service_proto protoreflect.FileDescriptor

var file_account_v1_account_service_proto_rawDesc = []byte{
	0x0a, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x1a, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x32, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9e, 0x01,
	0x0a, 0x14, 0x49, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02,
	0x10, 0x01, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01,
	0x02, 0x10, 0x01, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x9e,
	0x01, 0x0a, 0x15, 0x49, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x3e, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10,
	0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01,
	0x12, 0x1d, 0x0a, 0x19, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x02, 0x22,
	0xa5, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x41, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42,
	0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x05, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x12, 0x43, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xec, 0x02, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x74, 0x0a, 0x13, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x1a, 0x67, 0x0a, 0x16,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x1f, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46,
	0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x22, 0x8a, 0x0c, 0x0a, 0x10, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x45, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f,
	0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x0a, 0xba,
	0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x35, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x09, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f,
	0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x09, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x4a, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0xba, 0xe9, 0xc0,
	0x03, 0x05, 0x82, 0x01, 0x02, 0x20, 0x00, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x56, 0x0a, 0x0e, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x0d, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x5c, 0x0a, 0x10,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x5c, 0x0a, 0x10, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x75, 0x73, 0x74,
	0x5f, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6d,
	0x75, 0x73, 0x74, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4d, 0x0a, 0x0b, 0x63, 0x6c, 0x61,
	0x69, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x63, 0x6c,
	0x61, 0x69, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x57, 0x0a, 0x16, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x14, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x33, 0x0a, 0x04, 0x6d, 0x69, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x52, 0x04, 0x6d, 0x69, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x74, 0x5f, 0x64,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d,
	0x69, 0x6e, 0x74, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x12, 0x35, 0x0a, 0x11, 0x6d,
	0x69, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xba, 0xe9, 0xc0, 0x03, 0x04, 0x72, 0x02, 0x18,
	0x20, 0x52, 0x0f, 0x6d, 0x69, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x64, 0x0a, 0x0d, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x1d, 0x0a, 0x19, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x18,
	0x0a, 0x14, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x43, 0x41, 0x43, 0x48, 0x45, 0x10, 0x02, 0x22, 0xff, 0x01, 0x0a, 0x0f, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x18,
	0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x41,
	0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x49, 0x4e,
	0x47, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x03,
	0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x04,
	0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x05, 0x12,
	0x1c, 0x0a, 0x18, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x06, 0x12, 0x1b, 0x0a,
	0x17, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x07, 0x22, 0x71, 0x0a, 0x0f, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a,
	0x18, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x42,
	0x4c, 0x4f, 0x43, 0x4b, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x44, 0x4f, 0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x01,
	0x12, 0x1b, 0x0a, 0x17, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x02, 0x22, 0x74, 0x0a,
	0x0a, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x43,
	0x4c, 0x41, 0x49, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x45, 0x44, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4c,
	0x41, 0x49, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45,
	0x44, 0x10, 0x03, 0x32, 0xde, 0x01, 0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x5e, 0x0a, 0x0d, 0x49, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x25, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x73, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x2c, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x77, 0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x64, 0x65,
	0x69, 0x6e, 0x63, 0x2e, 0x67, 0x65, 0x6e, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x5a, 0x4a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x6f, 0x64, 0x65, 0x2d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x64,
	0x65, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x3b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0xa2, 0x02,
	0x0c, 0x43, 0x50, 0x42, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_account_v1_account_service_proto_rawDescOnce sync.Once
	file_account_v1_account_service_proto_rawDescData = file_account_v1_account_service_proto_rawDesc
)

func file_account_v1_account_service_proto_rawDescGZIP() []byte {
	file_account_v1_account_service_proto_rawDescOnce.Do(func() {
		file_account_v1_account_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_account_v1_account_service_proto_rawDescData)
	})
	return file_account_v1_account_service_proto_rawDescData
}

var file_account_v1_account_service_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_account_v1_account_service_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_account_v1_account_service_proto_goTypes = []interface{}{
	(IsCodeAccountResponse_Result)(0),        // 0: code.account.v1.IsCodeAccountResponse.Result
	(GetTokenAccountInfosResponse_Result)(0), // 1: code.account.v1.GetTokenAccountInfosResponse.Result
	(TokenAccountInfo_BalanceSource)(0),      // 2: code.account.v1.TokenAccountInfo.BalanceSource
	(TokenAccountInfo_ManagementState)(0),    // 3: code.account.v1.TokenAccountInfo.ManagementState
	(TokenAccountInfo_BlockchainState)(0),    // 4: code.account.v1.TokenAccountInfo.BlockchainState
	(TokenAccountInfo_ClaimState)(0),         // 5: code.account.v1.TokenAccountInfo.ClaimState
	(*IsCodeAccountRequest)(nil),             // 6: code.account.v1.IsCodeAccountRequest
	(*IsCodeAccountResponse)(nil),            // 7: code.account.v1.IsCodeAccountResponse
	(*GetTokenAccountInfosRequest)(nil),      // 8: code.account.v1.GetTokenAccountInfosRequest
	(*GetTokenAccountInfosResponse)(nil),     // 9: code.account.v1.GetTokenAccountInfosResponse
	(*TokenAccountInfo)(nil),                 // 10: code.account.v1.TokenAccountInfo
	nil,                                      // 11: code.account.v1.GetTokenAccountInfosResponse.TokenAccountInfosEntry
	(*v1.SolanaAccountId)(nil),               // 12: code.common.v1.SolanaAccountId
	(*v1.Signature)(nil),                     // 13: code.common.v1.Signature
	(v1.AccountType)(0),                      // 14: code.common.v1.AccountType
	(*v2.ExchangeData)(nil),                  // 15: code.transaction.v2.ExchangeData
}
var file_account_v1_account_service_proto_depIdxs = []int32{
	12, // 0: code.account.v1.IsCodeAccountRequest.owner:type_name -> code.common.v1.SolanaAccountId
	13, // 1: code.account.v1.IsCodeAccountRequest.signature:type_name -> code.common.v1.Signature
	0,  // 2: code.account.v1.IsCodeAccountResponse.result:type_name -> code.account.v1.IsCodeAccountResponse.Result
	12, // 3: code.account.v1.GetTokenAccountInfosRequest.owner:type_name -> code.common.v1.SolanaAccountId
	13, // 4: code.account.v1.GetTokenAccountInfosRequest.signature:type_name -> code.common.v1.Signature
	1,  // 5: code.account.v1.GetTokenAccountInfosResponse.result:type_name -> code.account.v1.GetTokenAccountInfosResponse.Result
	11, // 6: code.account.v1.GetTokenAccountInfosResponse.token_account_infos:type_name -> code.account.v1.GetTokenAccountInfosResponse.TokenAccountInfosEntry
	12, // 7: code.account.v1.TokenAccountInfo.address:type_name -> code.common.v1.SolanaAccountId
	12, // 8: code.account.v1.TokenAccountInfo.owner:type_name -> code.common.v1.SolanaAccountId
	12, // 9: code.account.v1.TokenAccountInfo.authority:type_name -> code.common.v1.SolanaAccountId
	14, // 10: code.account.v1.TokenAccountInfo.account_type:type_name -> code.common.v1.AccountType
	2,  // 11: code.account.v1.TokenAccountInfo.balance_source:type_name -> code.account.v1.TokenAccountInfo.BalanceSource
	3,  // 12: code.account.v1.TokenAccountInfo.management_state:type_name -> code.account.v1.TokenAccountInfo.ManagementState
	4,  // 13: code.account.v1.TokenAccountInfo.blockchain_state:type_name -> code.account.v1.TokenAccountInfo.BlockchainState
	5,  // 14: code.account.v1.TokenAccountInfo.claim_state:type_name -> code.account.v1.TokenAccountInfo.ClaimState
	15, // 15: code.account.v1.TokenAccountInfo.original_exchange_data:type_name -> code.transaction.v2.ExchangeData
	12, // 16: code.account.v1.TokenAccountInfo.mint:type_name -> code.common.v1.SolanaAccountId
	10, // 17: code.account.v1.GetTokenAccountInfosResponse.TokenAccountInfosEntry.value:type_name -> code.account.v1.TokenAccountInfo
	6,  // 18: code.account.v1.Account.IsCodeAccount:input_type -> code.account.v1.IsCodeAccountRequest
	8,  // 19: code.account.v1.Account.GetTokenAccountInfos:input_type -> code.account.v1.GetTokenAccountInfosRequest
	7,  // 20: code.account.v1.Account.IsCodeAccount:output_type -> code.account.v1.IsCodeAccountResponse
	9,  // 21: code.account.v1.Account.GetTokenAccountInfos:output_type -> code.account.v1.GetTokenAccountInfosResponse
	20, // [20:22] is the sub-list for method output_type
	18, // [18:20] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_account_v1_account_service_proto_init() }
func file_account_v1_account_service_proto_init() {
	if File_account_v1_account_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_account_v1_account_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsCodeAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_v1_account_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsCodeAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_v1_account_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTokenAccountInfosRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_v1_account_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTokenAccountInfosResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_v1_account_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenAccountInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_account_v1_account_service_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_account_v1_account_service_proto_goTypes,
		DependencyIndexes: file_account_v1_account_service_proto_depIdxs,
		EnumInfos:         file_account_v1_account_service_proto_enumTypes,
		MessageInfos:      file_account_v1_account_service_proto_msgTypes,
	}.Build()
	File_account_v1_account_service_proto = out.File
	file_account_v1_account_service_proto_rawDesc = nil
	file_account_v1_account_service_proto_goTypes = nil
	file_account_v1_account_service_proto_depIdxs = nil
}
