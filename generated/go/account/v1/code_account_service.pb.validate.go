// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: account/v1/code_account_service.proto

package account

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	common "github.com/code-payments/code-protobuf-api/generated/go/common/v1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = common.AccountType(0)
)

// Validate checks the field values on IsCodeAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IsCodeAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsCodeAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IsCodeAccountRequestMultiError, or nil if none found.
func (m *IsCodeAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IsCodeAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOwner() == nil {
		err := IsCodeAccountRequestValidationError{
			field:  "Owner",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetOwner()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IsCodeAccountRequestValidationError{
					field:  "Owner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IsCodeAccountRequestValidationError{
					field:  "Owner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOwner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IsCodeAccountRequestValidationError{
				field:  "Owner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetSignature() == nil {
		err := IsCodeAccountRequestValidationError{
			field:  "Signature",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetSignature()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IsCodeAccountRequestValidationError{
					field:  "Signature",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IsCodeAccountRequestValidationError{
					field:  "Signature",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSignature()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IsCodeAccountRequestValidationError{
				field:  "Signature",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IsCodeAccountRequestMultiError(errors)
	}

	return nil
}

// IsCodeAccountRequestMultiError is an error wrapping multiple validation
// errors returned by IsCodeAccountRequest.ValidateAll() if the designated
// constraints aren't met.
type IsCodeAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsCodeAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsCodeAccountRequestMultiError) AllErrors() []error { return m }

// IsCodeAccountRequestValidationError is the validation error returned by
// IsCodeAccountRequest.Validate if the designated constraints aren't met.
type IsCodeAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsCodeAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsCodeAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsCodeAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsCodeAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsCodeAccountRequestValidationError) ErrorName() string {
	return "IsCodeAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IsCodeAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsCodeAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsCodeAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsCodeAccountRequestValidationError{}

// Validate checks the field values on IsCodeAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IsCodeAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsCodeAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IsCodeAccountResponseMultiError, or nil if none found.
func (m *IsCodeAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IsCodeAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return IsCodeAccountResponseMultiError(errors)
	}

	return nil
}

// IsCodeAccountResponseMultiError is an error wrapping multiple validation
// errors returned by IsCodeAccountResponse.ValidateAll() if the designated
// constraints aren't met.
type IsCodeAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsCodeAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsCodeAccountResponseMultiError) AllErrors() []error { return m }

// IsCodeAccountResponseValidationError is the validation error returned by
// IsCodeAccountResponse.Validate if the designated constraints aren't met.
type IsCodeAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsCodeAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsCodeAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsCodeAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsCodeAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsCodeAccountResponseValidationError) ErrorName() string {
	return "IsCodeAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IsCodeAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsCodeAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsCodeAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsCodeAccountResponseValidationError{}

// Validate checks the field values on GetTokenAccountInfosRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTokenAccountInfosRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTokenAccountInfosRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTokenAccountInfosRequestMultiError, or nil if none found.
func (m *GetTokenAccountInfosRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTokenAccountInfosRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOwner() == nil {
		err := GetTokenAccountInfosRequestValidationError{
			field:  "Owner",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetOwner()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTokenAccountInfosRequestValidationError{
					field:  "Owner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTokenAccountInfosRequestValidationError{
					field:  "Owner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOwner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTokenAccountInfosRequestValidationError{
				field:  "Owner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetSignature() == nil {
		err := GetTokenAccountInfosRequestValidationError{
			field:  "Signature",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetSignature()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTokenAccountInfosRequestValidationError{
					field:  "Signature",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTokenAccountInfosRequestValidationError{
					field:  "Signature",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSignature()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTokenAccountInfosRequestValidationError{
				field:  "Signature",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTokenAccountInfosRequestMultiError(errors)
	}

	return nil
}

// GetTokenAccountInfosRequestMultiError is an error wrapping multiple
// validation errors returned by GetTokenAccountInfosRequest.ValidateAll() if
// the designated constraints aren't met.
type GetTokenAccountInfosRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTokenAccountInfosRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTokenAccountInfosRequestMultiError) AllErrors() []error { return m }

// GetTokenAccountInfosRequestValidationError is the validation error returned
// by GetTokenAccountInfosRequest.Validate if the designated constraints
// aren't met.
type GetTokenAccountInfosRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTokenAccountInfosRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTokenAccountInfosRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTokenAccountInfosRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTokenAccountInfosRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTokenAccountInfosRequestValidationError) ErrorName() string {
	return "GetTokenAccountInfosRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTokenAccountInfosRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTokenAccountInfosRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTokenAccountInfosRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTokenAccountInfosRequestValidationError{}

// Validate checks the field values on GetTokenAccountInfosResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTokenAccountInfosResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTokenAccountInfosResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTokenAccountInfosResponseMultiError, or nil if none found.
func (m *GetTokenAccountInfosResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTokenAccountInfosResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	{
		sorted_keys := make([]string, len(m.GetTokenAccountInfos()))
		i := 0
		for key := range m.GetTokenAccountInfos() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetTokenAccountInfos()[key]
			_ = val

			// no validation rules for TokenAccountInfos[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, GetTokenAccountInfosResponseValidationError{
							field:  fmt.Sprintf("TokenAccountInfos[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, GetTokenAccountInfosResponseValidationError{
							field:  fmt.Sprintf("TokenAccountInfos[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return GetTokenAccountInfosResponseValidationError{
						field:  fmt.Sprintf("TokenAccountInfos[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return GetTokenAccountInfosResponseMultiError(errors)
	}

	return nil
}

// GetTokenAccountInfosResponseMultiError is an error wrapping multiple
// validation errors returned by GetTokenAccountInfosResponse.ValidateAll() if
// the designated constraints aren't met.
type GetTokenAccountInfosResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTokenAccountInfosResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTokenAccountInfosResponseMultiError) AllErrors() []error { return m }

// GetTokenAccountInfosResponseValidationError is the validation error returned
// by GetTokenAccountInfosResponse.Validate if the designated constraints
// aren't met.
type GetTokenAccountInfosResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTokenAccountInfosResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTokenAccountInfosResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTokenAccountInfosResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTokenAccountInfosResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTokenAccountInfosResponseValidationError) ErrorName() string {
	return "GetTokenAccountInfosResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTokenAccountInfosResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTokenAccountInfosResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTokenAccountInfosResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTokenAccountInfosResponseValidationError{}

// Validate checks the field values on LinkAdditionalAccountsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LinkAdditionalAccountsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LinkAdditionalAccountsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// LinkAdditionalAccountsRequestMultiError, or nil if none found.
func (m *LinkAdditionalAccountsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LinkAdditionalAccountsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOwner() == nil {
		err := LinkAdditionalAccountsRequestValidationError{
			field:  "Owner",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetOwner()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LinkAdditionalAccountsRequestValidationError{
					field:  "Owner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LinkAdditionalAccountsRequestValidationError{
					field:  "Owner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOwner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LinkAdditionalAccountsRequestValidationError{
				field:  "Owner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetSwapAuthority() == nil {
		err := LinkAdditionalAccountsRequestValidationError{
			field:  "SwapAuthority",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetSwapAuthority()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LinkAdditionalAccountsRequestValidationError{
					field:  "SwapAuthority",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LinkAdditionalAccountsRequestValidationError{
					field:  "SwapAuthority",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSwapAuthority()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LinkAdditionalAccountsRequestValidationError{
				field:  "SwapAuthority",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetSignatures()) != 2 {
		err := LinkAdditionalAccountsRequestValidationError{
			field:  "Signatures",
			reason: "value must contain exactly 2 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetSignatures() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LinkAdditionalAccountsRequestValidationError{
						field:  fmt.Sprintf("Signatures[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LinkAdditionalAccountsRequestValidationError{
						field:  fmt.Sprintf("Signatures[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LinkAdditionalAccountsRequestValidationError{
					field:  fmt.Sprintf("Signatures[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return LinkAdditionalAccountsRequestMultiError(errors)
	}

	return nil
}

// LinkAdditionalAccountsRequestMultiError is an error wrapping multiple
// validation errors returned by LinkAdditionalAccountsRequest.ValidateAll()
// if the designated constraints aren't met.
type LinkAdditionalAccountsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LinkAdditionalAccountsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LinkAdditionalAccountsRequestMultiError) AllErrors() []error { return m }

// LinkAdditionalAccountsRequestValidationError is the validation error
// returned by LinkAdditionalAccountsRequest.Validate if the designated
// constraints aren't met.
type LinkAdditionalAccountsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LinkAdditionalAccountsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LinkAdditionalAccountsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LinkAdditionalAccountsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LinkAdditionalAccountsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LinkAdditionalAccountsRequestValidationError) ErrorName() string {
	return "LinkAdditionalAccountsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LinkAdditionalAccountsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLinkAdditionalAccountsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LinkAdditionalAccountsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LinkAdditionalAccountsRequestValidationError{}

// Validate checks the field values on LinkAdditionalAccountsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LinkAdditionalAccountsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LinkAdditionalAccountsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// LinkAdditionalAccountsResponseMultiError, or nil if none found.
func (m *LinkAdditionalAccountsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LinkAdditionalAccountsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return LinkAdditionalAccountsResponseMultiError(errors)
	}

	return nil
}

// LinkAdditionalAccountsResponseMultiError is an error wrapping multiple
// validation errors returned by LinkAdditionalAccountsResponse.ValidateAll()
// if the designated constraints aren't met.
type LinkAdditionalAccountsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LinkAdditionalAccountsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LinkAdditionalAccountsResponseMultiError) AllErrors() []error { return m }

// LinkAdditionalAccountsResponseValidationError is the validation error
// returned by LinkAdditionalAccountsResponse.Validate if the designated
// constraints aren't met.
type LinkAdditionalAccountsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LinkAdditionalAccountsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LinkAdditionalAccountsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LinkAdditionalAccountsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LinkAdditionalAccountsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LinkAdditionalAccountsResponseValidationError) ErrorName() string {
	return "LinkAdditionalAccountsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LinkAdditionalAccountsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLinkAdditionalAccountsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LinkAdditionalAccountsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LinkAdditionalAccountsResponseValidationError{}

// Validate checks the field values on TokenAccountInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TokenAccountInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TokenAccountInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TokenAccountInfoMultiError, or nil if none found.
func (m *TokenAccountInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *TokenAccountInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetAddress() == nil {
		err := TokenAccountInfoValidationError{
			field:  "Address",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TokenAccountInfoValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TokenAccountInfoValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TokenAccountInfoValidationError{
				field:  "Address",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOwner()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TokenAccountInfoValidationError{
					field:  "Owner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TokenAccountInfoValidationError{
					field:  "Owner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOwner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TokenAccountInfoValidationError{
				field:  "Owner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAuthority()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TokenAccountInfoValidationError{
					field:  "Authority",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TokenAccountInfoValidationError{
					field:  "Authority",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuthority()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TokenAccountInfoValidationError{
				field:  "Authority",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := _TokenAccountInfo_AccountType_NotInLookup[m.GetAccountType()]; ok {
		err := TokenAccountInfoValidationError{
			field:  "AccountType",
			reason: "value must not be in list [UNKNOWN]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Index

	// no validation rules for BalanceSource

	// no validation rules for Balance

	// no validation rules for ManagementState

	// no validation rules for BlockchainState

	// no validation rules for MustRotate

	// no validation rules for ClaimState

	if all {
		switch v := interface{}(m.GetOriginalExchangeData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TokenAccountInfoValidationError{
					field:  "OriginalExchangeData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TokenAccountInfoValidationError{
					field:  "OriginalExchangeData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOriginalExchangeData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TokenAccountInfoValidationError{
				field:  "OriginalExchangeData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMint()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TokenAccountInfoValidationError{
					field:  "Mint",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TokenAccountInfoValidationError{
					field:  "Mint",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMint()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TokenAccountInfoValidationError{
				field:  "Mint",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRelationship()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TokenAccountInfoValidationError{
					field:  "Relationship",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TokenAccountInfoValidationError{
					field:  "Relationship",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRelationship()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TokenAccountInfoValidationError{
				field:  "Relationship",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TokenAccountInfoValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TokenAccountInfoValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TokenAccountInfoValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TokenAccountInfoMultiError(errors)
	}

	return nil
}

// TokenAccountInfoMultiError is an error wrapping multiple validation errors
// returned by TokenAccountInfo.ValidateAll() if the designated constraints
// aren't met.
type TokenAccountInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TokenAccountInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TokenAccountInfoMultiError) AllErrors() []error { return m }

// TokenAccountInfoValidationError is the validation error returned by
// TokenAccountInfo.Validate if the designated constraints aren't met.
type TokenAccountInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TokenAccountInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TokenAccountInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TokenAccountInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TokenAccountInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TokenAccountInfoValidationError) ErrorName() string { return "TokenAccountInfoValidationError" }

// Error satisfies the builtin error interface
func (e TokenAccountInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTokenAccountInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TokenAccountInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TokenAccountInfoValidationError{}

var _TokenAccountInfo_AccountType_NotInLookup = map[common.AccountType]struct{}{
	0: {},
}
