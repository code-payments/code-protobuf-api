// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: account/v1/code_account_service.proto

package account

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Account_IsCodeAccount_FullMethodName          = "/code.account.v1.Account/IsCodeAccount"
	Account_GetTokenAccountInfos_FullMethodName   = "/code.account.v1.Account/GetTokenAccountInfos"
	Account_LinkAdditionalAccounts_FullMethodName = "/code.account.v1.Account/LinkAdditionalAccounts"
)

// AccountClient is the client API for Account service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountClient interface {
	// IsCodeAccount returns whether an owner account is a Code account. This hints
	// to the client whether the account can be logged in, used for making payments,
	// etc.
	IsCodeAccount(ctx context.Context, in *IsCodeAccountRequest, opts ...grpc.CallOption) (*IsCodeAccountResponse, error)
	// GetTokenAccountInfos returns token account metadata relevant to the Code owner
	// account.
	GetTokenAccountInfos(ctx context.Context, in *GetTokenAccountInfosRequest, opts ...grpc.CallOption) (*GetTokenAccountInfosResponse, error)
	// LinkAdditionalAccounts allows a client to declare additional accounts to
	// be tracked and used within Code. The accounts declared in this RPC are not
	// managed by Code (ie. not a Timelock account), created externally and cannot
	// be linked automatically (ie. authority derived off user 12 words).
	LinkAdditionalAccounts(ctx context.Context, in *LinkAdditionalAccountsRequest, opts ...grpc.CallOption) (*LinkAdditionalAccountsResponse, error)
}

type accountClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountClient(cc grpc.ClientConnInterface) AccountClient {
	return &accountClient{cc}
}

func (c *accountClient) IsCodeAccount(ctx context.Context, in *IsCodeAccountRequest, opts ...grpc.CallOption) (*IsCodeAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IsCodeAccountResponse)
	err := c.cc.Invoke(ctx, Account_IsCodeAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) GetTokenAccountInfos(ctx context.Context, in *GetTokenAccountInfosRequest, opts ...grpc.CallOption) (*GetTokenAccountInfosResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTokenAccountInfosResponse)
	err := c.cc.Invoke(ctx, Account_GetTokenAccountInfos_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) LinkAdditionalAccounts(ctx context.Context, in *LinkAdditionalAccountsRequest, opts ...grpc.CallOption) (*LinkAdditionalAccountsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LinkAdditionalAccountsResponse)
	err := c.cc.Invoke(ctx, Account_LinkAdditionalAccounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountServer is the server API for Account service.
// All implementations must embed UnimplementedAccountServer
// for forward compatibility.
type AccountServer interface {
	// IsCodeAccount returns whether an owner account is a Code account. This hints
	// to the client whether the account can be logged in, used for making payments,
	// etc.
	IsCodeAccount(context.Context, *IsCodeAccountRequest) (*IsCodeAccountResponse, error)
	// GetTokenAccountInfos returns token account metadata relevant to the Code owner
	// account.
	GetTokenAccountInfos(context.Context, *GetTokenAccountInfosRequest) (*GetTokenAccountInfosResponse, error)
	// LinkAdditionalAccounts allows a client to declare additional accounts to
	// be tracked and used within Code. The accounts declared in this RPC are not
	// managed by Code (ie. not a Timelock account), created externally and cannot
	// be linked automatically (ie. authority derived off user 12 words).
	LinkAdditionalAccounts(context.Context, *LinkAdditionalAccountsRequest) (*LinkAdditionalAccountsResponse, error)
	mustEmbedUnimplementedAccountServer()
}

// UnimplementedAccountServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAccountServer struct{}

func (UnimplementedAccountServer) IsCodeAccount(context.Context, *IsCodeAccountRequest) (*IsCodeAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsCodeAccount not implemented")
}
func (UnimplementedAccountServer) GetTokenAccountInfos(context.Context, *GetTokenAccountInfosRequest) (*GetTokenAccountInfosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokenAccountInfos not implemented")
}
func (UnimplementedAccountServer) LinkAdditionalAccounts(context.Context, *LinkAdditionalAccountsRequest) (*LinkAdditionalAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LinkAdditionalAccounts not implemented")
}
func (UnimplementedAccountServer) mustEmbedUnimplementedAccountServer() {}
func (UnimplementedAccountServer) testEmbeddedByValue()                 {}

// UnsafeAccountServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountServer will
// result in compilation errors.
type UnsafeAccountServer interface {
	mustEmbedUnimplementedAccountServer()
}

func RegisterAccountServer(s grpc.ServiceRegistrar, srv AccountServer) {
	// If the following call pancis, it indicates UnimplementedAccountServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Account_ServiceDesc, srv)
}

func _Account_IsCodeAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsCodeAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).IsCodeAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Account_IsCodeAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).IsCodeAccount(ctx, req.(*IsCodeAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_GetTokenAccountInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenAccountInfosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).GetTokenAccountInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Account_GetTokenAccountInfos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).GetTokenAccountInfos(ctx, req.(*GetTokenAccountInfosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_LinkAdditionalAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkAdditionalAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).LinkAdditionalAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Account_LinkAdditionalAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).LinkAdditionalAccounts(ctx, req.(*LinkAdditionalAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Account_ServiceDesc is the grpc.ServiceDesc for Account service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Account_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "code.account.v1.Account",
	HandlerType: (*AccountServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsCodeAccount",
			Handler:    _Account_IsCodeAccount_Handler,
		},
		{
			MethodName: "GetTokenAccountInfos",
			Handler:    _Account_GetTokenAccountInfos_Handler,
		},
		{
			MethodName: "LinkAdditionalAccounts",
			Handler:    _Account_LinkAdditionalAccounts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "account/v1/code_account_service.proto",
}
