// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: account/v1/account_service.proto

package account

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"

	common "github.com/code-payments/code-protobuf-api/generated/go/common/v1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}

	_ = common.AccountType(0)
)

// Validate checks the field values on IsCodeAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *IsCodeAccountRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetOwner() == nil {
		return IsCodeAccountRequestValidationError{
			field:  "Owner",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetOwner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IsCodeAccountRequestValidationError{
				field:  "Owner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetSignature() == nil {
		return IsCodeAccountRequestValidationError{
			field:  "Signature",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetSignature()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IsCodeAccountRequestValidationError{
				field:  "Signature",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// IsCodeAccountRequestValidationError is the validation error returned by
// IsCodeAccountRequest.Validate if the designated constraints aren't met.
type IsCodeAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsCodeAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsCodeAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsCodeAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsCodeAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsCodeAccountRequestValidationError) ErrorName() string {
	return "IsCodeAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IsCodeAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsCodeAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsCodeAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsCodeAccountRequestValidationError{}

// Validate checks the field values on IsCodeAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *IsCodeAccountResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Result

	return nil
}

// IsCodeAccountResponseValidationError is the validation error returned by
// IsCodeAccountResponse.Validate if the designated constraints aren't met.
type IsCodeAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsCodeAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsCodeAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsCodeAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsCodeAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsCodeAccountResponseValidationError) ErrorName() string {
	return "IsCodeAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IsCodeAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsCodeAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsCodeAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsCodeAccountResponseValidationError{}

// Validate checks the field values on GetTokenAccountInfosRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetTokenAccountInfosRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetOwner() == nil {
		return GetTokenAccountInfosRequestValidationError{
			field:  "Owner",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetOwner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTokenAccountInfosRequestValidationError{
				field:  "Owner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetSignature() == nil {
		return GetTokenAccountInfosRequestValidationError{
			field:  "Signature",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetSignature()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTokenAccountInfosRequestValidationError{
				field:  "Signature",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetTokenAccountInfosRequestValidationError is the validation error returned
// by GetTokenAccountInfosRequest.Validate if the designated constraints
// aren't met.
type GetTokenAccountInfosRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTokenAccountInfosRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTokenAccountInfosRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTokenAccountInfosRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTokenAccountInfosRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTokenAccountInfosRequestValidationError) ErrorName() string {
	return "GetTokenAccountInfosRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTokenAccountInfosRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTokenAccountInfosRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTokenAccountInfosRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTokenAccountInfosRequestValidationError{}

// Validate checks the field values on GetTokenAccountInfosResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetTokenAccountInfosResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Result

	// no validation rules for TokenAccountInfos

	return nil
}

// GetTokenAccountInfosResponseValidationError is the validation error returned
// by GetTokenAccountInfosResponse.Validate if the designated constraints
// aren't met.
type GetTokenAccountInfosResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTokenAccountInfosResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTokenAccountInfosResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTokenAccountInfosResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTokenAccountInfosResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTokenAccountInfosResponseValidationError) ErrorName() string {
	return "GetTokenAccountInfosResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTokenAccountInfosResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTokenAccountInfosResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTokenAccountInfosResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTokenAccountInfosResponseValidationError{}

// Validate checks the field values on LinkAdditionalAccountsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *LinkAdditionalAccountsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetOwner() == nil {
		return LinkAdditionalAccountsRequestValidationError{
			field:  "Owner",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetOwner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LinkAdditionalAccountsRequestValidationError{
				field:  "Owner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetSwapAuthority() == nil {
		return LinkAdditionalAccountsRequestValidationError{
			field:  "SwapAuthority",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetSwapAuthority()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LinkAdditionalAccountsRequestValidationError{
				field:  "SwapAuthority",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetSignatures()) != 2 {
		return LinkAdditionalAccountsRequestValidationError{
			field:  "Signatures",
			reason: "value must contain exactly 2 item(s)",
		}
	}

	for idx, item := range m.GetSignatures() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LinkAdditionalAccountsRequestValidationError{
					field:  fmt.Sprintf("Signatures[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// LinkAdditionalAccountsRequestValidationError is the validation error
// returned by LinkAdditionalAccountsRequest.Validate if the designated
// constraints aren't met.
type LinkAdditionalAccountsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LinkAdditionalAccountsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LinkAdditionalAccountsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LinkAdditionalAccountsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LinkAdditionalAccountsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LinkAdditionalAccountsRequestValidationError) ErrorName() string {
	return "LinkAdditionalAccountsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LinkAdditionalAccountsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLinkAdditionalAccountsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LinkAdditionalAccountsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LinkAdditionalAccountsRequestValidationError{}

// Validate checks the field values on LinkAdditionalAccountsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *LinkAdditionalAccountsResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Result

	return nil
}

// LinkAdditionalAccountsResponseValidationError is the validation error
// returned by LinkAdditionalAccountsResponse.Validate if the designated
// constraints aren't met.
type LinkAdditionalAccountsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LinkAdditionalAccountsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LinkAdditionalAccountsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LinkAdditionalAccountsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LinkAdditionalAccountsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LinkAdditionalAccountsResponseValidationError) ErrorName() string {
	return "LinkAdditionalAccountsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LinkAdditionalAccountsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLinkAdditionalAccountsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LinkAdditionalAccountsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LinkAdditionalAccountsResponseValidationError{}

// Validate checks the field values on TokenAccountInfo with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *TokenAccountInfo) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetAddress() == nil {
		return TokenAccountInfoValidationError{
			field:  "Address",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TokenAccountInfoValidationError{
				field:  "Address",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetOwner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TokenAccountInfoValidationError{
				field:  "Owner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetAuthority()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TokenAccountInfoValidationError{
				field:  "Authority",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := _TokenAccountInfo_AccountType_NotInLookup[m.GetAccountType()]; ok {
		return TokenAccountInfoValidationError{
			field:  "AccountType",
			reason: "value must not be in list [0]",
		}
	}

	// no validation rules for Index

	// no validation rules for BalanceSource

	// no validation rules for Balance

	// no validation rules for ManagementState

	// no validation rules for BlockchainState

	// no validation rules for ClaimState

	if v, ok := interface{}(m.GetOriginalExchangeData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TokenAccountInfoValidationError{
				field:  "OriginalExchangeData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetMint()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TokenAccountInfoValidationError{
				field:  "Mint",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TokenAccountInfoValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// TokenAccountInfoValidationError is the validation error returned by
// TokenAccountInfo.Validate if the designated constraints aren't met.
type TokenAccountInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TokenAccountInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TokenAccountInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TokenAccountInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TokenAccountInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TokenAccountInfoValidationError) ErrorName() string { return "TokenAccountInfoValidationError" }

// Error satisfies the builtin error interface
func (e TokenAccountInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTokenAccountInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TokenAccountInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TokenAccountInfoValidationError{}

var _TokenAccountInfo_AccountType_NotInLookup = map[common.AccountType]struct{}{
	0: {},
}
