// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: messaging/v1/messaging_service.proto

package messaging

import (
	v1 "github.com/code-payments/code-protobuf-api/generated/go/common/v1"
	v2 "github.com/code-payments/code-protobuf-api/generated/go/transaction/v2"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AckMesssagesResponse_Result int32

const (
	AckMesssagesResponse_OK AckMesssagesResponse_Result = 0
)

// Enum value maps for AckMesssagesResponse_Result.
var (
	AckMesssagesResponse_Result_name = map[int32]string{
		0: "OK",
	}
	AckMesssagesResponse_Result_value = map[string]int32{
		"OK": 0,
	}
)

func (x AckMesssagesResponse_Result) Enum() *AckMesssagesResponse_Result {
	p := new(AckMesssagesResponse_Result)
	*p = x
	return p
}

func (x AckMesssagesResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AckMesssagesResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_messaging_v1_messaging_service_proto_enumTypes[0].Descriptor()
}

func (AckMesssagesResponse_Result) Type() protoreflect.EnumType {
	return &file_messaging_v1_messaging_service_proto_enumTypes[0]
}

func (x AckMesssagesResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AckMesssagesResponse_Result.Descriptor instead.
func (AckMesssagesResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_messaging_v1_messaging_service_proto_rawDescGZIP(), []int{7, 0}
}

type SendMessageResponse_Result int32

const (
	SendMessageResponse_OK               SendMessageResponse_Result = 0
	SendMessageResponse_NO_ACTIVE_STREAM SendMessageResponse_Result = 1
)

// Enum value maps for SendMessageResponse_Result.
var (
	SendMessageResponse_Result_name = map[int32]string{
		0: "OK",
		1: "NO_ACTIVE_STREAM",
	}
	SendMessageResponse_Result_value = map[string]int32{
		"OK":               0,
		"NO_ACTIVE_STREAM": 1,
	}
)

func (x SendMessageResponse_Result) Enum() *SendMessageResponse_Result {
	p := new(SendMessageResponse_Result)
	*p = x
	return p
}

func (x SendMessageResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SendMessageResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_messaging_v1_messaging_service_proto_enumTypes[1].Descriptor()
}

func (SendMessageResponse_Result) Type() protoreflect.EnumType {
	return &file_messaging_v1_messaging_service_proto_enumTypes[1]
}

func (x SendMessageResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SendMessageResponse_Result.Descriptor instead.
func (SendMessageResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_messaging_v1_messaging_service_proto_rawDescGZIP(), []int{9, 0}
}

type OpenMessageStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RendezvousKey *RendezvousKey `protobuf:"bytes,1,opt,name=rendezvous_key,json=rendezvousKey,proto3" json:"rendezvous_key,omitempty"`
	// The signature is of serialize(OpenMessageStreamRequest) using rendezvous_key.
	//
	// todo: Make required once clients migrate
	Signature *v1.Signature `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *OpenMessageStreamRequest) Reset() {
	*x = OpenMessageStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_v1_messaging_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenMessageStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenMessageStreamRequest) ProtoMessage() {}

func (x *OpenMessageStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v1_messaging_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenMessageStreamRequest.ProtoReflect.Descriptor instead.
func (*OpenMessageStreamRequest) Descriptor() ([]byte, []int) {
	return file_messaging_v1_messaging_service_proto_rawDescGZIP(), []int{0}
}

func (x *OpenMessageStreamRequest) GetRendezvousKey() *RendezvousKey {
	if x != nil {
		return x.RendezvousKey
	}
	return nil
}

func (x *OpenMessageStreamRequest) GetSignature() *v1.Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type OpenMessageStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages []*Message `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (x *OpenMessageStreamResponse) Reset() {
	*x = OpenMessageStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_v1_messaging_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenMessageStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenMessageStreamResponse) ProtoMessage() {}

func (x *OpenMessageStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v1_messaging_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenMessageStreamResponse.ProtoReflect.Descriptor instead.
func (*OpenMessageStreamResponse) Descriptor() ([]byte, []int) {
	return file_messaging_v1_messaging_service_proto_rawDescGZIP(), []int{1}
}

func (x *OpenMessageStreamResponse) GetMessages() []*Message {
	if x != nil {
		return x.Messages
	}
	return nil
}

type OpenMessageStreamWithKeepAliveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to RequestOrPong:
	//
	//	*OpenMessageStreamWithKeepAliveRequest_Request
	//	*OpenMessageStreamWithKeepAliveRequest_Pong
	RequestOrPong isOpenMessageStreamWithKeepAliveRequest_RequestOrPong `protobuf_oneof:"requestOrPong"`
}

func (x *OpenMessageStreamWithKeepAliveRequest) Reset() {
	*x = OpenMessageStreamWithKeepAliveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_v1_messaging_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenMessageStreamWithKeepAliveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenMessageStreamWithKeepAliveRequest) ProtoMessage() {}

func (x *OpenMessageStreamWithKeepAliveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v1_messaging_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenMessageStreamWithKeepAliveRequest.ProtoReflect.Descriptor instead.
func (*OpenMessageStreamWithKeepAliveRequest) Descriptor() ([]byte, []int) {
	return file_messaging_v1_messaging_service_proto_rawDescGZIP(), []int{2}
}

func (m *OpenMessageStreamWithKeepAliveRequest) GetRequestOrPong() isOpenMessageStreamWithKeepAliveRequest_RequestOrPong {
	if m != nil {
		return m.RequestOrPong
	}
	return nil
}

func (x *OpenMessageStreamWithKeepAliveRequest) GetRequest() *OpenMessageStreamRequest {
	if x, ok := x.GetRequestOrPong().(*OpenMessageStreamWithKeepAliveRequest_Request); ok {
		return x.Request
	}
	return nil
}

func (x *OpenMessageStreamWithKeepAliveRequest) GetPong() *ClientPong {
	if x, ok := x.GetRequestOrPong().(*OpenMessageStreamWithKeepAliveRequest_Pong); ok {
		return x.Pong
	}
	return nil
}

type isOpenMessageStreamWithKeepAliveRequest_RequestOrPong interface {
	isOpenMessageStreamWithKeepAliveRequest_RequestOrPong()
}

type OpenMessageStreamWithKeepAliveRequest_Request struct {
	Request *OpenMessageStreamRequest `protobuf:"bytes,1,opt,name=request,proto3,oneof"`
}

type OpenMessageStreamWithKeepAliveRequest_Pong struct {
	Pong *ClientPong `protobuf:"bytes,2,opt,name=pong,proto3,oneof"`
}

func (*OpenMessageStreamWithKeepAliveRequest_Request) isOpenMessageStreamWithKeepAliveRequest_RequestOrPong() {
}

func (*OpenMessageStreamWithKeepAliveRequest_Pong) isOpenMessageStreamWithKeepAliveRequest_RequestOrPong() {
}

type OpenMessageStreamWithKeepAliveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ResponseOrPing:
	//
	//	*OpenMessageStreamWithKeepAliveResponse_Response
	//	*OpenMessageStreamWithKeepAliveResponse_Ping
	ResponseOrPing isOpenMessageStreamWithKeepAliveResponse_ResponseOrPing `protobuf_oneof:"responseOrPing"`
}

func (x *OpenMessageStreamWithKeepAliveResponse) Reset() {
	*x = OpenMessageStreamWithKeepAliveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_v1_messaging_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenMessageStreamWithKeepAliveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenMessageStreamWithKeepAliveResponse) ProtoMessage() {}

func (x *OpenMessageStreamWithKeepAliveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v1_messaging_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenMessageStreamWithKeepAliveResponse.ProtoReflect.Descriptor instead.
func (*OpenMessageStreamWithKeepAliveResponse) Descriptor() ([]byte, []int) {
	return file_messaging_v1_messaging_service_proto_rawDescGZIP(), []int{3}
}

func (m *OpenMessageStreamWithKeepAliveResponse) GetResponseOrPing() isOpenMessageStreamWithKeepAliveResponse_ResponseOrPing {
	if m != nil {
		return m.ResponseOrPing
	}
	return nil
}

func (x *OpenMessageStreamWithKeepAliveResponse) GetResponse() *OpenMessageStreamResponse {
	if x, ok := x.GetResponseOrPing().(*OpenMessageStreamWithKeepAliveResponse_Response); ok {
		return x.Response
	}
	return nil
}

func (x *OpenMessageStreamWithKeepAliveResponse) GetPing() *ServerPing {
	if x, ok := x.GetResponseOrPing().(*OpenMessageStreamWithKeepAliveResponse_Ping); ok {
		return x.Ping
	}
	return nil
}

type isOpenMessageStreamWithKeepAliveResponse_ResponseOrPing interface {
	isOpenMessageStreamWithKeepAliveResponse_ResponseOrPing()
}

type OpenMessageStreamWithKeepAliveResponse_Response struct {
	Response *OpenMessageStreamResponse `protobuf:"bytes,1,opt,name=response,proto3,oneof"`
}

type OpenMessageStreamWithKeepAliveResponse_Ping struct {
	Ping *ServerPing `protobuf:"bytes,2,opt,name=ping,proto3,oneof"`
}

func (*OpenMessageStreamWithKeepAliveResponse_Response) isOpenMessageStreamWithKeepAliveResponse_ResponseOrPing() {
}

func (*OpenMessageStreamWithKeepAliveResponse_Ping) isOpenMessageStreamWithKeepAliveResponse_ResponseOrPing() {
}

type PollMessagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RendezvousKey *RendezvousKey `protobuf:"bytes,1,opt,name=rendezvous_key,json=rendezvousKey,proto3" json:"rendezvous_key,omitempty"`
	// The signature is of serialize(PollMessagesRequest) using rendezvous_key.
	Signature *v1.Signature `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *PollMessagesRequest) Reset() {
	*x = PollMessagesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_v1_messaging_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PollMessagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollMessagesRequest) ProtoMessage() {}

func (x *PollMessagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v1_messaging_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollMessagesRequest.ProtoReflect.Descriptor instead.
func (*PollMessagesRequest) Descriptor() ([]byte, []int) {
	return file_messaging_v1_messaging_service_proto_rawDescGZIP(), []int{4}
}

func (x *PollMessagesRequest) GetRendezvousKey() *RendezvousKey {
	if x != nil {
		return x.RendezvousKey
	}
	return nil
}

func (x *PollMessagesRequest) GetSignature() *v1.Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type PollMessagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages []*Message `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (x *PollMessagesResponse) Reset() {
	*x = PollMessagesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_v1_messaging_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PollMessagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollMessagesResponse) ProtoMessage() {}

func (x *PollMessagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v1_messaging_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollMessagesResponse.ProtoReflect.Descriptor instead.
func (*PollMessagesResponse) Descriptor() ([]byte, []int) {
	return file_messaging_v1_messaging_service_proto_rawDescGZIP(), []int{5}
}

func (x *PollMessagesResponse) GetMessages() []*Message {
	if x != nil {
		return x.Messages
	}
	return nil
}

type AckMessagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RendezvousKey *RendezvousKey `protobuf:"bytes,1,opt,name=rendezvous_key,json=rendezvousKey,proto3" json:"rendezvous_key,omitempty"`
	MessageIds    []*MessageId   `protobuf:"bytes,2,rep,name=message_ids,json=messageIds,proto3" json:"message_ids,omitempty"`
}

func (x *AckMessagesRequest) Reset() {
	*x = AckMessagesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_v1_messaging_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AckMessagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckMessagesRequest) ProtoMessage() {}

func (x *AckMessagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v1_messaging_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckMessagesRequest.ProtoReflect.Descriptor instead.
func (*AckMessagesRequest) Descriptor() ([]byte, []int) {
	return file_messaging_v1_messaging_service_proto_rawDescGZIP(), []int{6}
}

func (x *AckMessagesRequest) GetRendezvousKey() *RendezvousKey {
	if x != nil {
		return x.RendezvousKey
	}
	return nil
}

func (x *AckMessagesRequest) GetMessageIds() []*MessageId {
	if x != nil {
		return x.MessageIds
	}
	return nil
}

type AckMesssagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result AckMesssagesResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=code.messaging.v1.AckMesssagesResponse_Result" json:"result,omitempty"`
}

func (x *AckMesssagesResponse) Reset() {
	*x = AckMesssagesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_v1_messaging_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AckMesssagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckMesssagesResponse) ProtoMessage() {}

func (x *AckMesssagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v1_messaging_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckMesssagesResponse.ProtoReflect.Descriptor instead.
func (*AckMesssagesResponse) Descriptor() ([]byte, []int) {
	return file_messaging_v1_messaging_service_proto_rawDescGZIP(), []int{7}
}

func (x *AckMesssagesResponse) GetResult() AckMesssagesResponse_Result {
	if x != nil {
		return x.Result
	}
	return AckMesssagesResponse_OK
}

type SendMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The message to send. Types of messages clients can send are restricted.
	Message *Message `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	// The rendezvous key that the message should be routed to.
	RendezvousKey *RendezvousKey `protobuf:"bytes,2,opt,name=rendezvous_key,json=rendezvousKey,proto3" json:"rendezvous_key,omitempty"`
	// The signature is of serialize(Message) using the PrivateKey of the keypair.
	Signature *v1.Signature `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *SendMessageRequest) Reset() {
	*x = SendMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_v1_messaging_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMessageRequest) ProtoMessage() {}

func (x *SendMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v1_messaging_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMessageRequest.ProtoReflect.Descriptor instead.
func (*SendMessageRequest) Descriptor() ([]byte, []int) {
	return file_messaging_v1_messaging_service_proto_rawDescGZIP(), []int{8}
}

func (x *SendMessageRequest) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *SendMessageRequest) GetRendezvousKey() *RendezvousKey {
	if x != nil {
		return x.RendezvousKey
	}
	return nil
}

func (x *SendMessageRequest) GetSignature() *v1.Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type SendMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result SendMessageResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=code.messaging.v1.SendMessageResponse_Result" json:"result,omitempty"`
	// Set if result == OK.
	MessageId *MessageId `protobuf:"bytes,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
}

func (x *SendMessageResponse) Reset() {
	*x = SendMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_v1_messaging_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMessageResponse) ProtoMessage() {}

func (x *SendMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v1_messaging_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMessageResponse.ProtoReflect.Descriptor instead.
func (*SendMessageResponse) Descriptor() ([]byte, []int) {
	return file_messaging_v1_messaging_service_proto_rawDescGZIP(), []int{9}
}

func (x *SendMessageResponse) GetResult() SendMessageResponse_Result {
	if x != nil {
		return x.Result
	}
	return SendMessageResponse_OK
}

func (x *SendMessageResponse) GetMessageId() *MessageId {
	if x != nil {
		return x.MessageId
	}
	return nil
}

// RendezvousKey is a unique key pair, typically derived from a scan code payload,
// which is used to establish a secure communication channel anonymously to coordinate
// a flow using messages.
type RendezvousKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *RendezvousKey) Reset() {
	*x = RendezvousKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_v1_messaging_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RendezvousKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RendezvousKey) ProtoMessage() {}

func (x *RendezvousKey) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v1_messaging_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RendezvousKey.ProtoReflect.Descriptor instead.
func (*RendezvousKey) Descriptor() ([]byte, []int) {
	return file_messaging_v1_messaging_service_proto_rawDescGZIP(), []int{10}
}

func (x *RendezvousKey) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// MessageId identifies a message. It is only guaranteed to be unique when
// paired with a destination (i.e. the rendezvous public key).
type MessageId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MessageId) Reset() {
	*x = MessageId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_v1_messaging_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageId) ProtoMessage() {}

func (x *MessageId) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v1_messaging_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageId.ProtoReflect.Descriptor instead.
func (*MessageId) Descriptor() ([]byte, []int) {
	return file_messaging_v1_messaging_service_proto_rawDescGZIP(), []int{11}
}

func (x *MessageId) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// Request that a pulled out bill be sent to the requested address.
//
// This message type is only initiated by clients.
type RequestToGrabBill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Requestor is the Kin token account on Solana to which a payment should be sent.
	RequestorAccount *v1.SolanaAccountId `protobuf:"bytes,1,opt,name=requestor_account,json=requestorAccount,proto3" json:"requestor_account,omitempty"`
}

func (x *RequestToGrabBill) Reset() {
	*x = RequestToGrabBill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_v1_messaging_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestToGrabBill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestToGrabBill) ProtoMessage() {}

func (x *RequestToGrabBill) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v1_messaging_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestToGrabBill.ProtoReflect.Descriptor instead.
func (*RequestToGrabBill) Descriptor() ([]byte, []int) {
	return file_messaging_v1_messaging_service_proto_rawDescGZIP(), []int{12}
}

func (x *RequestToGrabBill) GetRequestorAccount() *v1.SolanaAccountId {
	if x != nil {
		return x.RequestorAccount
	}
	return nil
}

// Request that a bill of a requested value is created and sent to the requested
// address.
//
// This message type is only initiated by clients.
type RequestToReceiveBill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Requestor is the Kin token account on Solana to which a payment should be sent.
	RequestorAccount *v1.SolanaAccountId `protobuf:"bytes,1,opt,name=requestor_account,json=requestorAccount,proto3" json:"requestor_account,omitempty"`
	// The exchange data for the requested bill value.
	//
	// Types that are assignable to ExchangeData:
	//
	//	*RequestToReceiveBill_Exact
	//	*RequestToReceiveBill_Partial
	ExchangeData isRequestToReceiveBill_ExchangeData `protobuf_oneof:"exchange_data"`
	// The third-party's domain name, which is its primary identifier. Server
	// guarantees to perform domain verification against the verifier account.
	Domain *v1.Domain `protobuf:"bytes,4,opt,name=domain,proto3" json:"domain,omitempty"`
	// Owner account owned by the third party used in domain verification.
	Verifier *v1.SolanaAccountId `protobuf:"bytes,5,opt,name=verifier,proto3" json:"verifier,omitempty"`
	// Signature of this message using the verifier private key, which in addition
	// to domain verification, authenticates the third party.
	Signature *v1.Signature `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`
	// Rendezvous key to avoid replay attacks
	RendezvousKey *RendezvousKey `protobuf:"bytes,7,opt,name=rendezvous_key,json=rendezvousKey,proto3" json:"rendezvous_key,omitempty"`
}

func (x *RequestToReceiveBill) Reset() {
	*x = RequestToReceiveBill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_v1_messaging_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestToReceiveBill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestToReceiveBill) ProtoMessage() {}

func (x *RequestToReceiveBill) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v1_messaging_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestToReceiveBill.ProtoReflect.Descriptor instead.
func (*RequestToReceiveBill) Descriptor() ([]byte, []int) {
	return file_messaging_v1_messaging_service_proto_rawDescGZIP(), []int{13}
}

func (x *RequestToReceiveBill) GetRequestorAccount() *v1.SolanaAccountId {
	if x != nil {
		return x.RequestorAccount
	}
	return nil
}

func (m *RequestToReceiveBill) GetExchangeData() isRequestToReceiveBill_ExchangeData {
	if m != nil {
		return m.ExchangeData
	}
	return nil
}

func (x *RequestToReceiveBill) GetExact() *v2.ExchangeData {
	if x, ok := x.GetExchangeData().(*RequestToReceiveBill_Exact); ok {
		return x.Exact
	}
	return nil
}

func (x *RequestToReceiveBill) GetPartial() *v2.ExchangeDataWithoutRate {
	if x, ok := x.GetExchangeData().(*RequestToReceiveBill_Partial); ok {
		return x.Partial
	}
	return nil
}

func (x *RequestToReceiveBill) GetDomain() *v1.Domain {
	if x != nil {
		return x.Domain
	}
	return nil
}

func (x *RequestToReceiveBill) GetVerifier() *v1.SolanaAccountId {
	if x != nil {
		return x.Verifier
	}
	return nil
}

func (x *RequestToReceiveBill) GetSignature() *v1.Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *RequestToReceiveBill) GetRendezvousKey() *RendezvousKey {
	if x != nil {
		return x.RendezvousKey
	}
	return nil
}

type isRequestToReceiveBill_ExchangeData interface {
	isRequestToReceiveBill_ExchangeData()
}

type RequestToReceiveBill_Exact struct {
	// An exact amount of Kin. Payment is guaranteed to transfer the specified
	// quarks in the requested currency and exchange rate.
	//
	// Only supports Kin. Use exchange_data.partial for fiat amounts.
	Exact *v2.ExchangeData `protobuf:"bytes,2,opt,name=exact,proto3,oneof"`
}

type RequestToReceiveBill_Partial struct {
	// Fiat amount request. The amount of Kin is determined at time of payment
	// with a recent exchange rate provided by the paying client and validatd
	// by server.
	//
	// Only supports fiat amounts. Use exchange_data.exact for Kin.
	Partial *v2.ExchangeDataWithoutRate `protobuf:"bytes,3,opt,name=partial,proto3,oneof"`
}

func (*RequestToReceiveBill_Exact) isRequestToReceiveBill_ExchangeData() {}

func (*RequestToReceiveBill_Partial) isRequestToReceiveBill_ExchangeData() {}

// A status update on a stream to indicate a scan code was scanned. This can appear
// multiple times for the same stream.
//
// This message type is only initiated by client
type CodeScanned struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp the client scanned the code
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *CodeScanned) Reset() {
	*x = CodeScanned{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_v1_messaging_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeScanned) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeScanned) ProtoMessage() {}

func (x *CodeScanned) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v1_messaging_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeScanned.ProtoReflect.Descriptor instead.
func (*CodeScanned) Descriptor() ([]byte, []int) {
	return file_messaging_v1_messaging_service_proto_rawDescGZIP(), []int{14}
}

func (x *CodeScanned) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

// Payment is rejected by the client
//
// This message type is only initiated by clients
type ClientRejectedPayment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntentId *v1.IntentId `protobuf:"bytes,1,opt,name=intent_id,json=intentId,proto3" json:"intent_id,omitempty"`
}

func (x *ClientRejectedPayment) Reset() {
	*x = ClientRejectedPayment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_v1_messaging_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientRejectedPayment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientRejectedPayment) ProtoMessage() {}

func (x *ClientRejectedPayment) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v1_messaging_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientRejectedPayment.ProtoReflect.Descriptor instead.
func (*ClientRejectedPayment) Descriptor() ([]byte, []int) {
	return file_messaging_v1_messaging_service_proto_rawDescGZIP(), []int{15}
}

func (x *ClientRejectedPayment) GetIntentId() *v1.IntentId {
	if x != nil {
		return x.IntentId
	}
	return nil
}

// Intent was submitted via SubmitIntent
//
// This message type is only initiated by server
type IntentSubmitted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntentId *v1.IntentId `protobuf:"bytes,1,opt,name=intent_id,json=intentId,proto3" json:"intent_id,omitempty"`
	Metadata *v2.Metadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *IntentSubmitted) Reset() {
	*x = IntentSubmitted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_v1_messaging_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntentSubmitted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntentSubmitted) ProtoMessage() {}

func (x *IntentSubmitted) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v1_messaging_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntentSubmitted.ProtoReflect.Descriptor instead.
func (*IntentSubmitted) Descriptor() ([]byte, []int) {
	return file_messaging_v1_messaging_service_proto_rawDescGZIP(), []int{16}
}

func (x *IntentSubmitted) GetIntentId() *v1.IntentId {
	if x != nil {
		return x.IntentId
	}
	return nil
}

func (x *IntentSubmitted) GetMetadata() *v2.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Webhook was successfully called
//
// This message type is only initiated by server
type WebhookCalled struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Estimated time webhook was received
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *WebhookCalled) Reset() {
	*x = WebhookCalled{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_v1_messaging_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebhookCalled) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebhookCalled) ProtoMessage() {}

func (x *WebhookCalled) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v1_messaging_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebhookCalled.ProtoReflect.Descriptor instead.
func (*WebhookCalled) Descriptor() ([]byte, []int) {
	return file_messaging_v1_messaging_service_proto_rawDescGZIP(), []int{17}
}

func (x *WebhookCalled) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

// Request that an account logs in
//
// This message type is only initiated by third-parties through the SDK.
type RequestToLogin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The third-party's domain name, which is its primary identifier. Server
	// guarantees to perform domain verification against the verifier account.
	//
	// Clients should expect subdomains for future feature compatiblity, but must
	// use the ASCII base domain in the RELATIONSHIP account derivation strategy.
	Domain *v1.Domain `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	// Random nonce to include for signing in LoginAttempt
	Nonce *v1.SolanaAccountId `protobuf:"bytes,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// Timestamp the request was created
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Owner account owned by the third party used in domain verification.
	Verifier *v1.SolanaAccountId `protobuf:"bytes,4,opt,name=verifier,proto3" json:"verifier,omitempty"`
	// Signature of this message using the verifier private key, which in addition
	// to domain verification, authenticates the third party.
	Signature *v1.Signature `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
	// Rendezvous key to avoid replay attacks
	RendezvousKey *RendezvousKey `protobuf:"bytes,6,opt,name=rendezvous_key,json=rendezvousKey,proto3" json:"rendezvous_key,omitempty"`
}

func (x *RequestToLogin) Reset() {
	*x = RequestToLogin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_v1_messaging_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestToLogin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestToLogin) ProtoMessage() {}

func (x *RequestToLogin) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v1_messaging_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestToLogin.ProtoReflect.Descriptor instead.
func (*RequestToLogin) Descriptor() ([]byte, []int) {
	return file_messaging_v1_messaging_service_proto_rawDescGZIP(), []int{18}
}

func (x *RequestToLogin) GetDomain() *v1.Domain {
	if x != nil {
		return x.Domain
	}
	return nil
}

func (x *RequestToLogin) GetNonce() *v1.SolanaAccountId {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *RequestToLogin) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *RequestToLogin) GetVerifier() *v1.SolanaAccountId {
	if x != nil {
		return x.Verifier
	}
	return nil
}

func (x *RequestToLogin) GetSignature() *v1.Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *RequestToLogin) GetRendezvousKey() *RendezvousKey {
	if x != nil {
		return x.RendezvousKey
	}
	return nil
}

// Attempt to login
//
// This message type is only initiated by user clients
type LoginAttempt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Derived owner account from a user's 12 words, which is uniquely used with
	// the third party as identified by the domain.
	UserId *v1.SolanaAccountId `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// Domain value provided in the RequestToLogin message
	Domain *v1.Domain `protobuf:"bytes,3,opt,name=domain,proto3" json:"domain,omitempty"`
	// Nonce value provided in the RequestToLogin message
	Nonce *v1.SolanaAccountId `protobuf:"bytes,4,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// Timestamp the attempt was created
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Signature of this message using the user_id private key, which
	// authenticates the user.
	Signature *v1.Signature `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`
	// Rendezvous key to avoid replay attacks
	RendezvousKey *RendezvousKey `protobuf:"bytes,7,opt,name=rendezvous_key,json=rendezvousKey,proto3" json:"rendezvous_key,omitempty"`
}

func (x *LoginAttempt) Reset() {
	*x = LoginAttempt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_v1_messaging_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginAttempt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginAttempt) ProtoMessage() {}

func (x *LoginAttempt) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v1_messaging_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginAttempt.ProtoReflect.Descriptor instead.
func (*LoginAttempt) Descriptor() ([]byte, []int) {
	return file_messaging_v1_messaging_service_proto_rawDescGZIP(), []int{19}
}

func (x *LoginAttempt) GetUserId() *v1.SolanaAccountId {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *LoginAttempt) GetDomain() *v1.Domain {
	if x != nil {
		return x.Domain
	}
	return nil
}

func (x *LoginAttempt) GetNonce() *v1.SolanaAccountId {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *LoginAttempt) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *LoginAttempt) GetSignature() *v1.Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *LoginAttempt) GetRendezvousKey() *RendezvousKey {
	if x != nil {
		return x.RendezvousKey
	}
	return nil
}

type LoginRejected struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp the login was rejected
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *LoginRejected) Reset() {
	*x = LoginRejected{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_v1_messaging_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginRejected) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginRejected) ProtoMessage() {}

func (x *LoginRejected) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v1_messaging_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginRejected.ProtoReflect.Descriptor instead.
func (*LoginRejected) Descriptor() ([]byte, []int) {
	return file_messaging_v1_messaging_service_proto_rawDescGZIP(), []int{20}
}

func (x *LoginRejected) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

// Client has received an aidrop from server
//
// This message type is only initiated by server.
type AirdropReceived struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of airdrop received
	AirdropType v2.AirdropType `protobuf:"varint,1,opt,name=airdrop_type,json=airdropType,proto3,enum=code.transaction.v2.AirdropType" json:"airdrop_type,omitempty"`
	// Exchange data relating to the amount of Kin and fiat value of the airdrop
	ExchangeData *v2.ExchangeData `protobuf:"bytes,2,opt,name=exchange_data,json=exchangeData,proto3" json:"exchange_data,omitempty"`
	// Time the airdrop was received
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *AirdropReceived) Reset() {
	*x = AirdropReceived{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_v1_messaging_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AirdropReceived) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AirdropReceived) ProtoMessage() {}

func (x *AirdropReceived) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v1_messaging_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AirdropReceived.ProtoReflect.Descriptor instead.
func (*AirdropReceived) Descriptor() ([]byte, []int) {
	return file_messaging_v1_messaging_service_proto_rawDescGZIP(), []int{21}
}

func (x *AirdropReceived) GetAirdropType() v2.AirdropType {
	if x != nil {
		return x.AirdropType
	}
	return v2.AirdropType(0)
}

func (x *AirdropReceived) GetExchangeData() *v2.ExchangeData {
	if x != nil {
		return x.ExchangeData
	}
	return nil
}

func (x *AirdropReceived) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MessageId is the Id of the message. This ID is generated by the
	// server, and will _always_ be set when receiving a message.
	//
	// Server generates the message to:
	//  1. Reserve the ability for any future ID changes
	//  2. Prevent clients attempting to collide message IDs.
	Id *MessageId `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The signature sent from SendMessageRequest, which will be injected by server.
	// This enables clients to ensure no MITM attacks were performed to hijack contents
	// of the typed message. This is only applicable for messages not generated by server.
	SendMessageRequestSignature *v1.Signature `protobuf:"bytes,3,opt,name=send_message_request_signature,json=sendMessageRequestSignature,proto3" json:"send_message_request_signature,omitempty"`
	// Next field number is 13
	//
	// Types that are assignable to Kind:
	//
	//	*Message_RequestToGrabBill
	//	*Message_RequestToReceiveBill
	//	*Message_CodeScanned
	//	*Message_ClientRejectedPayment
	//	*Message_IntentSubmitted
	//	*Message_WebhookCalled
	//	*Message_RequestToLogin
	//	*Message_LoginAttempt
	//	*Message_LoginRejected
	//	*Message_AirdropReceived
	Kind isMessage_Kind `protobuf_oneof:"kind"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_v1_messaging_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v1_messaging_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_messaging_v1_messaging_service_proto_rawDescGZIP(), []int{22}
}

func (x *Message) GetId() *MessageId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Message) GetSendMessageRequestSignature() *v1.Signature {
	if x != nil {
		return x.SendMessageRequestSignature
	}
	return nil
}

func (m *Message) GetKind() isMessage_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *Message) GetRequestToGrabBill() *RequestToGrabBill {
	if x, ok := x.GetKind().(*Message_RequestToGrabBill); ok {
		return x.RequestToGrabBill
	}
	return nil
}

func (x *Message) GetRequestToReceiveBill() *RequestToReceiveBill {
	if x, ok := x.GetKind().(*Message_RequestToReceiveBill); ok {
		return x.RequestToReceiveBill
	}
	return nil
}

func (x *Message) GetCodeScanned() *CodeScanned {
	if x, ok := x.GetKind().(*Message_CodeScanned); ok {
		return x.CodeScanned
	}
	return nil
}

func (x *Message) GetClientRejectedPayment() *ClientRejectedPayment {
	if x, ok := x.GetKind().(*Message_ClientRejectedPayment); ok {
		return x.ClientRejectedPayment
	}
	return nil
}

func (x *Message) GetIntentSubmitted() *IntentSubmitted {
	if x, ok := x.GetKind().(*Message_IntentSubmitted); ok {
		return x.IntentSubmitted
	}
	return nil
}

func (x *Message) GetWebhookCalled() *WebhookCalled {
	if x, ok := x.GetKind().(*Message_WebhookCalled); ok {
		return x.WebhookCalled
	}
	return nil
}

func (x *Message) GetRequestToLogin() *RequestToLogin {
	if x, ok := x.GetKind().(*Message_RequestToLogin); ok {
		return x.RequestToLogin
	}
	return nil
}

func (x *Message) GetLoginAttempt() *LoginAttempt {
	if x, ok := x.GetKind().(*Message_LoginAttempt); ok {
		return x.LoginAttempt
	}
	return nil
}

func (x *Message) GetLoginRejected() *LoginRejected {
	if x, ok := x.GetKind().(*Message_LoginRejected); ok {
		return x.LoginRejected
	}
	return nil
}

func (x *Message) GetAirdropReceived() *AirdropReceived {
	if x, ok := x.GetKind().(*Message_AirdropReceived); ok {
		return x.AirdropReceived
	}
	return nil
}

type isMessage_Kind interface {
	isMessage_Kind()
}

type Message_RequestToGrabBill struct {
	RequestToGrabBill *RequestToGrabBill `protobuf:"bytes,2,opt,name=request_to_grab_bill,json=requestToGrabBill,proto3,oneof"`
}

type Message_RequestToReceiveBill struct {
	RequestToReceiveBill *RequestToReceiveBill `protobuf:"bytes,5,opt,name=request_to_receive_bill,json=requestToReceiveBill,proto3,oneof"`
}

type Message_CodeScanned struct {
	CodeScanned *CodeScanned `protobuf:"bytes,6,opt,name=code_scanned,json=codeScanned,proto3,oneof"`
}

type Message_ClientRejectedPayment struct {
	ClientRejectedPayment *ClientRejectedPayment `protobuf:"bytes,7,opt,name=client_rejected_payment,json=clientRejectedPayment,proto3,oneof"`
}

type Message_IntentSubmitted struct {
	IntentSubmitted *IntentSubmitted `protobuf:"bytes,8,opt,name=intent_submitted,json=intentSubmitted,proto3,oneof"`
}

type Message_WebhookCalled struct {
	WebhookCalled *WebhookCalled `protobuf:"bytes,9,opt,name=webhook_called,json=webhookCalled,proto3,oneof"`
}

type Message_RequestToLogin struct {
	RequestToLogin *RequestToLogin `protobuf:"bytes,10,opt,name=request_to_login,json=requestToLogin,proto3,oneof"`
}

type Message_LoginAttempt struct {
	LoginAttempt *LoginAttempt `protobuf:"bytes,11,opt,name=login_attempt,json=loginAttempt,proto3,oneof"`
}

type Message_LoginRejected struct {
	LoginRejected *LoginRejected `protobuf:"bytes,12,opt,name=login_rejected,json=loginRejected,proto3,oneof"`
}

type Message_AirdropReceived struct {
	AirdropReceived *AirdropReceived `protobuf:"bytes,4,opt,name=airdrop_received,json=airdropReceived,proto3,oneof"`
}

func (*Message_RequestToGrabBill) isMessage_Kind() {}

func (*Message_RequestToReceiveBill) isMessage_Kind() {}

func (*Message_CodeScanned) isMessage_Kind() {}

func (*Message_ClientRejectedPayment) isMessage_Kind() {}

func (*Message_IntentSubmitted) isMessage_Kind() {}

func (*Message_WebhookCalled) isMessage_Kind() {}

func (*Message_RequestToLogin) isMessage_Kind() {}

func (*Message_LoginAttempt) isMessage_Kind() {}

func (*Message_LoginRejected) isMessage_Kind() {}

func (*Message_AirdropReceived) isMessage_Kind() {}

type ServerPing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp the ping was sent on the stream, for client to get a sense
	// of potential network latency
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// The delay server will apply before sending the next ping
	PingDelay *durationpb.Duration `protobuf:"bytes,2,opt,name=ping_delay,json=pingDelay,proto3" json:"ping_delay,omitempty"`
}

func (x *ServerPing) Reset() {
	*x = ServerPing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_v1_messaging_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerPing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerPing) ProtoMessage() {}

func (x *ServerPing) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v1_messaging_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerPing.ProtoReflect.Descriptor instead.
func (*ServerPing) Descriptor() ([]byte, []int) {
	return file_messaging_v1_messaging_service_proto_rawDescGZIP(), []int{23}
}

func (x *ServerPing) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *ServerPing) GetPingDelay() *durationpb.Duration {
	if x != nil {
		return x.PingDelay
	}
	return nil
}

type ClientPong struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp the Pong was sent on the stream, for server to get a sense
	// of potential network latency
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *ClientPong) Reset() {
	*x = ClientPong{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_v1_messaging_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientPong) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientPong) ProtoMessage() {}

func (x *ClientPong) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v1_messaging_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientPong.ProtoReflect.Descriptor instead.
func (*ClientPong) Descriptor() ([]byte, []int) {
	return file_messaging_v1_messaging_service_proto_rawDescGZIP(), []int{24}
}

func (x *ClientPong) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

var File_messaging_v1_messaging_service_proto protoreflect.FileDescriptor

var file_messaging_v1_messaging_service_proto_rawDesc = []byte{
	0x0a, 0x24, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x1a, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x28, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x32,
	0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb4, 0x01, 0x0a, 0x18, 0x4f, 0x70, 0x65, 0x6e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x53, 0x0a, 0x0e, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x7a, 0x76, 0x6f, 0x75, 0x73, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x6e, 0x64, 0x65, 0x7a, 0x76, 0x6f, 0x75, 0x73, 0x4b, 0x65, 0x79, 0x42, 0x0a, 0xba, 0xe9, 0xc0,
	0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0d, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x7a, 0x76,
	0x6f, 0x75, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x43, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x00,
	0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x62, 0x0a, 0x19, 0x4f,
	0x70, 0x65, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0d, 0xba, 0xe9, 0xc0, 0x03, 0x08, 0x92, 0x01, 0x05,
	0x08, 0x01, 0x10, 0x80, 0x08, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22,
	0xbd, 0x01, 0x0a, 0x25, 0x4f, 0x70, 0x65, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x57, 0x69, 0x74, 0x68, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69,
	0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x07, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x33, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x6e, 0x67, 0x48,
	0x00, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x42, 0x16, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x4f, 0x72, 0x50, 0x6f, 0x6e, 0x67, 0x12, 0x05, 0xb8, 0xe9, 0xc0, 0x03, 0x01, 0x22,
	0xc2, 0x01, 0x0a, 0x26, 0x4f, 0x70, 0x65, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x57, 0x69, 0x74, 0x68, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69,
	0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50,
	0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x42, 0x17, 0x0a, 0x0e, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4f, 0x72, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x05, 0xb8,
	0xe9, 0xc0, 0x03, 0x01, 0x22, 0xaf, 0x01, 0x0a, 0x13, 0x50, 0x6f, 0x6c, 0x6c, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x0e,
	0x72, 0x65, 0x6e, 0x64, 0x65, 0x7a, 0x76, 0x6f, 0x75, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x7a, 0x76,
	0x6f, 0x75, 0x73, 0x4b, 0x65, 0x79, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02,
	0x10, 0x01, 0x52, 0x0d, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x7a, 0x76, 0x6f, 0x75, 0x73, 0x4b, 0x65,
	0x79, 0x12, 0x43, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42,
	0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x5d, 0x0a, 0x14, 0x50, 0x6f, 0x6c, 0x6c, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45,
	0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0d, 0xba, 0xe9,
	0xc0, 0x03, 0x08, 0x92, 0x01, 0x05, 0x08, 0x00, 0x10, 0x80, 0x08, 0x52, 0x08, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0xb7, 0x01, 0x0a, 0x12, 0x41, 0x63, 0x6b, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x0e,
	0x72, 0x65, 0x6e, 0x64, 0x65, 0x7a, 0x76, 0x6f, 0x75, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x7a, 0x76,
	0x6f, 0x75, 0x73, 0x4b, 0x65, 0x79, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02,
	0x10, 0x01, 0x52, 0x0d, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x7a, 0x76, 0x6f, 0x75, 0x73, 0x4b, 0x65,
	0x79, 0x12, 0x4c, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x42, 0x0d, 0xba, 0xe9, 0xc0, 0x03, 0x08, 0x92, 0x01, 0x05, 0x08, 0x01,
	0x10, 0x80, 0x08, 0x52, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x73, 0x22,
	0x70, 0x0a, 0x14, 0x41, 0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x6b, 0x4d,
	0x65, 0x73, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x10, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10,
	0x00, 0x22, 0xf0, 0x01, 0x0a, 0x12, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10,
	0x01, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x53, 0x0a, 0x0e, 0x72, 0x65,
	0x6e, 0x64, 0x65, 0x7a, 0x76, 0x6f, 0x75, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x7a, 0x76, 0x6f, 0x75,
	0x73, 0x4b, 0x65, 0x79, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x0d, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x7a, 0x76, 0x6f, 0x75, 0x73, 0x4b, 0x65, 0x79, 0x12,
	0x43, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x0a, 0xba,
	0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x22, 0xc1, 0x01, 0x0a, 0x13, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x3b, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x22, 0x26, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b,
	0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f,
	0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x10, 0x01, 0x22, 0x32, 0x0a, 0x0d, 0x52, 0x65, 0x6e, 0x64,
	0x65, 0x7a, 0x76, 0x6f, 0x75, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x0b, 0xba, 0xe9, 0xc0, 0x03, 0x06, 0x7a,
	0x04, 0x10, 0x20, 0x18, 0x20, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2e, 0x0a, 0x09,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x0b, 0xba, 0xe9, 0xc0, 0x03, 0x06, 0x7a,
	0x04, 0x10, 0x10, 0x18, 0x10, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x6d, 0x0a, 0x11,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x47, 0x72, 0x61, 0x62, 0x42, 0x69, 0x6c,
	0x6c, 0x12, 0x58, 0x0a, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f,
	0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x0a, 0xba,
	0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xfc, 0x03, 0x0a, 0x14,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x42, 0x69, 0x6c, 0x6c, 0x12, 0x58, 0x0a, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x10, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39,
	0x0a, 0x05, 0x65, 0x78, 0x61, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x32, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x48, 0x00, 0x52, 0x05, 0x65, 0x78, 0x61, 0x63, 0x74, 0x12, 0x48, 0x0a, 0x07, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32,
	0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x57, 0x69, 0x74,
	0x68, 0x6f, 0x75, 0x74, 0x52, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x06, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x12, 0x3b, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x37, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x47, 0x0a, 0x0e, 0x72, 0x65, 0x6e,
	0x64, 0x65, 0x7a, 0x76, 0x6f, 0x75, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x7a, 0x76, 0x6f, 0x75, 0x73,
	0x4b, 0x65, 0x79, 0x52, 0x0d, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x7a, 0x76, 0x6f, 0x75, 0x73, 0x4b,
	0x65, 0x79, 0x42, 0x16, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x05, 0xb8, 0xe9, 0xc0, 0x03, 0x01, 0x22, 0x53, 0x0a, 0x0b, 0x43, 0x6f,
	0x64, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0xb2,
	0x01, 0x02, 0x08, 0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22,
	0x5a, 0x0a, 0x15, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10,
	0x01, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x9b, 0x01, 0x0a, 0x0f,
	0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x12,
	0x41, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9,
	0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x45, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x55, 0x0a, 0x0d, 0x57, 0x65, 0x62,
	0x68, 0x6f, 0x6f, 0x6b, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05,
	0xb2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x22, 0xb8, 0x03, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x12, 0x3a, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x42, 0x0a, 0xba, 0xe9, 0xc0,
	0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12,
	0x41, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42,
	0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x05, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x12, 0x44, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0xb2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x47, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61,
	0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0,
	0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x43, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42,
	0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x53, 0x0a, 0x0e, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x7a,
	0x76, 0x6f, 0x75, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x7a, 0x76, 0x6f, 0x75, 0x73, 0x4b, 0x65, 0x79,
	0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0d, 0x72, 0x65,
	0x6e, 0x64, 0x65, 0x7a, 0x76, 0x6f, 0x75, 0x73, 0x4b, 0x65, 0x79, 0x22, 0xb3, 0x03, 0x0a, 0x0c,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x12, 0x44, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x0a,
	0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x3a, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03,
	0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x41,
	0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x0a,
	0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x12, 0x44, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0xb2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x43, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10,
	0x01, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x53, 0x0a, 0x0e,
	0x72, 0x65, 0x6e, 0x64, 0x65, 0x7a, 0x76, 0x6f, 0x75, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x7a, 0x76,
	0x6f, 0x75, 0x73, 0x4b, 0x65, 0x79, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02,
	0x10, 0x01, 0x52, 0x0d, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x7a, 0x76, 0x6f, 0x75, 0x73, 0x4b, 0x65,
	0x79, 0x22, 0x55, 0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x12, 0x44, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0xb2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xfc, 0x01, 0x0a, 0x0f, 0x41, 0x69, 0x72,
	0x64, 0x72, 0x6f, 0x70, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x4f, 0x0a, 0x0c,
	0x61, 0x69, 0x72, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x69, 0x72, 0x64, 0x72, 0x6f, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x82, 0x01, 0x02, 0x20, 0x00,
	0x52, 0x0b, 0x61, 0x69, 0x72, 0x64, 0x72, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x52, 0x0a,
	0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01,
	0x02, 0x10, 0x01, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x44, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0xb2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xf1, 0x07, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x42, 0x0a, 0xba,
	0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x6a, 0x0a,
	0x1e, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x00, 0x52, 0x1b, 0x73, 0x65,
	0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x57, 0x0a, 0x14, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x67, 0x72, 0x61, 0x62, 0x5f, 0x62, 0x69, 0x6c,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x54, 0x6f, 0x47, 0x72, 0x61, 0x62, 0x42, 0x69, 0x6c, 0x6c, 0x48, 0x00, 0x52,
	0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x47, 0x72, 0x61, 0x62, 0x42, 0x69,
	0x6c, 0x6c, 0x12, 0x60, 0x0a, 0x17, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x6f,
	0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54,
	0x6f, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x14,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x42, 0x69, 0x6c, 0x6c, 0x12, 0x43, 0x0a, 0x0c, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x63, 0x61,
	0x6e, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x6f,
	0x64, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x62, 0x0a, 0x17, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x15, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x4f, 0x0a,
	0x10, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0f, 0x69,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x12, 0x49,
	0x0a, 0x0e, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0d, 0x77, 0x65, 0x62, 0x68,
	0x6f, 0x6f, 0x6b, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x4d, 0x0a, 0x10, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54,
	0x6f, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x54, 0x6f, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x46, 0x0a, 0x0d, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x48, 0x00, 0x52, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x12, 0x49, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0d, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x4f, 0x0a, 0x10, 0x61,
	0x69, 0x72, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x69, 0x72, 0x64, 0x72, 0x6f,
	0x70, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0f, 0x61, 0x69, 0x72,
	0x64, 0x72, 0x6f, 0x70, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x42, 0x0d, 0x0a, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x12, 0x05, 0xb8, 0xe9, 0xc0, 0x03, 0x01, 0x22, 0x98, 0x01, 0x0a, 0x0a,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x44, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05,
	0xb2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x44, 0x0a, 0x0a, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0xaa, 0x01, 0x02, 0x08, 0x01, 0x52, 0x09, 0x70, 0x69, 0x6e,
	0x67, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x22, 0x52, 0x0a, 0x0a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x50, 0x6f, 0x6e, 0x67, 0x12, 0x44, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0xb2, 0x01, 0x02, 0x08, 0x01, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x32, 0xb7, 0x04, 0x0a, 0x09, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x70, 0x0a, 0x11, 0x4f, 0x70, 0x65, 0x6e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x2b, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x99, 0x01, 0x0a, 0x1e, 0x4f,
	0x70, 0x65, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x57, 0x69, 0x74, 0x68, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x38, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x57, 0x69, 0x74, 0x68, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x6e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x57, 0x69, 0x74,
	0x68, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x5f, 0x0a, 0x0c, 0x50, 0x6f, 0x6c, 0x6c, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x26, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x0b, 0x41, 0x63, 0x6b, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x25, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x6b, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x25, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x7f, 0x0a, 0x1c, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x64, 0x65,
	0x69, 0x6e, 0x63, 0x2e, 0x67, 0x65, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x5a, 0x4e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x63, 0x6f, 0x64, 0x65, 0x2d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63,
	0x6f, 0x64, 0x65, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2d, 0x61, 0x70, 0x69,
	0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x3b, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0xa2, 0x02, 0x0e, 0x43, 0x50, 0x42, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_messaging_v1_messaging_service_proto_rawDescOnce sync.Once
	file_messaging_v1_messaging_service_proto_rawDescData = file_messaging_v1_messaging_service_proto_rawDesc
)

func file_messaging_v1_messaging_service_proto_rawDescGZIP() []byte {
	file_messaging_v1_messaging_service_proto_rawDescOnce.Do(func() {
		file_messaging_v1_messaging_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_messaging_v1_messaging_service_proto_rawDescData)
	})
	return file_messaging_v1_messaging_service_proto_rawDescData
}

var file_messaging_v1_messaging_service_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_messaging_v1_messaging_service_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_messaging_v1_messaging_service_proto_goTypes = []interface{}{
	(AckMesssagesResponse_Result)(0),               // 0: code.messaging.v1.AckMesssagesResponse.Result
	(SendMessageResponse_Result)(0),                // 1: code.messaging.v1.SendMessageResponse.Result
	(*OpenMessageStreamRequest)(nil),               // 2: code.messaging.v1.OpenMessageStreamRequest
	(*OpenMessageStreamResponse)(nil),              // 3: code.messaging.v1.OpenMessageStreamResponse
	(*OpenMessageStreamWithKeepAliveRequest)(nil),  // 4: code.messaging.v1.OpenMessageStreamWithKeepAliveRequest
	(*OpenMessageStreamWithKeepAliveResponse)(nil), // 5: code.messaging.v1.OpenMessageStreamWithKeepAliveResponse
	(*PollMessagesRequest)(nil),                    // 6: code.messaging.v1.PollMessagesRequest
	(*PollMessagesResponse)(nil),                   // 7: code.messaging.v1.PollMessagesResponse
	(*AckMessagesRequest)(nil),                     // 8: code.messaging.v1.AckMessagesRequest
	(*AckMesssagesResponse)(nil),                   // 9: code.messaging.v1.AckMesssagesResponse
	(*SendMessageRequest)(nil),                     // 10: code.messaging.v1.SendMessageRequest
	(*SendMessageResponse)(nil),                    // 11: code.messaging.v1.SendMessageResponse
	(*RendezvousKey)(nil),                          // 12: code.messaging.v1.RendezvousKey
	(*MessageId)(nil),                              // 13: code.messaging.v1.MessageId
	(*RequestToGrabBill)(nil),                      // 14: code.messaging.v1.RequestToGrabBill
	(*RequestToReceiveBill)(nil),                   // 15: code.messaging.v1.RequestToReceiveBill
	(*CodeScanned)(nil),                            // 16: code.messaging.v1.CodeScanned
	(*ClientRejectedPayment)(nil),                  // 17: code.messaging.v1.ClientRejectedPayment
	(*IntentSubmitted)(nil),                        // 18: code.messaging.v1.IntentSubmitted
	(*WebhookCalled)(nil),                          // 19: code.messaging.v1.WebhookCalled
	(*RequestToLogin)(nil),                         // 20: code.messaging.v1.RequestToLogin
	(*LoginAttempt)(nil),                           // 21: code.messaging.v1.LoginAttempt
	(*LoginRejected)(nil),                          // 22: code.messaging.v1.LoginRejected
	(*AirdropReceived)(nil),                        // 23: code.messaging.v1.AirdropReceived
	(*Message)(nil),                                // 24: code.messaging.v1.Message
	(*ServerPing)(nil),                             // 25: code.messaging.v1.ServerPing
	(*ClientPong)(nil),                             // 26: code.messaging.v1.ClientPong
	(*v1.Signature)(nil),                           // 27: code.common.v1.Signature
	(*v1.SolanaAccountId)(nil),                     // 28: code.common.v1.SolanaAccountId
	(*v2.ExchangeData)(nil),                        // 29: code.transaction.v2.ExchangeData
	(*v2.ExchangeDataWithoutRate)(nil),             // 30: code.transaction.v2.ExchangeDataWithoutRate
	(*v1.Domain)(nil),                              // 31: code.common.v1.Domain
	(*timestamppb.Timestamp)(nil),                  // 32: google.protobuf.Timestamp
	(*v1.IntentId)(nil),                            // 33: code.common.v1.IntentId
	(*v2.Metadata)(nil),                            // 34: code.transaction.v2.Metadata
	(v2.AirdropType)(0),                            // 35: code.transaction.v2.AirdropType
	(*durationpb.Duration)(nil),                    // 36: google.protobuf.Duration
}
var file_messaging_v1_messaging_service_proto_depIdxs = []int32{
	12, // 0: code.messaging.v1.OpenMessageStreamRequest.rendezvous_key:type_name -> code.messaging.v1.RendezvousKey
	27, // 1: code.messaging.v1.OpenMessageStreamRequest.signature:type_name -> code.common.v1.Signature
	24, // 2: code.messaging.v1.OpenMessageStreamResponse.messages:type_name -> code.messaging.v1.Message
	2,  // 3: code.messaging.v1.OpenMessageStreamWithKeepAliveRequest.request:type_name -> code.messaging.v1.OpenMessageStreamRequest
	26, // 4: code.messaging.v1.OpenMessageStreamWithKeepAliveRequest.pong:type_name -> code.messaging.v1.ClientPong
	3,  // 5: code.messaging.v1.OpenMessageStreamWithKeepAliveResponse.response:type_name -> code.messaging.v1.OpenMessageStreamResponse
	25, // 6: code.messaging.v1.OpenMessageStreamWithKeepAliveResponse.ping:type_name -> code.messaging.v1.ServerPing
	12, // 7: code.messaging.v1.PollMessagesRequest.rendezvous_key:type_name -> code.messaging.v1.RendezvousKey
	27, // 8: code.messaging.v1.PollMessagesRequest.signature:type_name -> code.common.v1.Signature
	24, // 9: code.messaging.v1.PollMessagesResponse.messages:type_name -> code.messaging.v1.Message
	12, // 10: code.messaging.v1.AckMessagesRequest.rendezvous_key:type_name -> code.messaging.v1.RendezvousKey
	13, // 11: code.messaging.v1.AckMessagesRequest.message_ids:type_name -> code.messaging.v1.MessageId
	0,  // 12: code.messaging.v1.AckMesssagesResponse.result:type_name -> code.messaging.v1.AckMesssagesResponse.Result
	24, // 13: code.messaging.v1.SendMessageRequest.message:type_name -> code.messaging.v1.Message
	12, // 14: code.messaging.v1.SendMessageRequest.rendezvous_key:type_name -> code.messaging.v1.RendezvousKey
	27, // 15: code.messaging.v1.SendMessageRequest.signature:type_name -> code.common.v1.Signature
	1,  // 16: code.messaging.v1.SendMessageResponse.result:type_name -> code.messaging.v1.SendMessageResponse.Result
	13, // 17: code.messaging.v1.SendMessageResponse.message_id:type_name -> code.messaging.v1.MessageId
	28, // 18: code.messaging.v1.RequestToGrabBill.requestor_account:type_name -> code.common.v1.SolanaAccountId
	28, // 19: code.messaging.v1.RequestToReceiveBill.requestor_account:type_name -> code.common.v1.SolanaAccountId
	29, // 20: code.messaging.v1.RequestToReceiveBill.exact:type_name -> code.transaction.v2.ExchangeData
	30, // 21: code.messaging.v1.RequestToReceiveBill.partial:type_name -> code.transaction.v2.ExchangeDataWithoutRate
	31, // 22: code.messaging.v1.RequestToReceiveBill.domain:type_name -> code.common.v1.Domain
	28, // 23: code.messaging.v1.RequestToReceiveBill.verifier:type_name -> code.common.v1.SolanaAccountId
	27, // 24: code.messaging.v1.RequestToReceiveBill.signature:type_name -> code.common.v1.Signature
	12, // 25: code.messaging.v1.RequestToReceiveBill.rendezvous_key:type_name -> code.messaging.v1.RendezvousKey
	32, // 26: code.messaging.v1.CodeScanned.timestamp:type_name -> google.protobuf.Timestamp
	33, // 27: code.messaging.v1.ClientRejectedPayment.intent_id:type_name -> code.common.v1.IntentId
	33, // 28: code.messaging.v1.IntentSubmitted.intent_id:type_name -> code.common.v1.IntentId
	34, // 29: code.messaging.v1.IntentSubmitted.metadata:type_name -> code.transaction.v2.Metadata
	32, // 30: code.messaging.v1.WebhookCalled.timestamp:type_name -> google.protobuf.Timestamp
	31, // 31: code.messaging.v1.RequestToLogin.domain:type_name -> code.common.v1.Domain
	28, // 32: code.messaging.v1.RequestToLogin.nonce:type_name -> code.common.v1.SolanaAccountId
	32, // 33: code.messaging.v1.RequestToLogin.timestamp:type_name -> google.protobuf.Timestamp
	28, // 34: code.messaging.v1.RequestToLogin.verifier:type_name -> code.common.v1.SolanaAccountId
	27, // 35: code.messaging.v1.RequestToLogin.signature:type_name -> code.common.v1.Signature
	12, // 36: code.messaging.v1.RequestToLogin.rendezvous_key:type_name -> code.messaging.v1.RendezvousKey
	28, // 37: code.messaging.v1.LoginAttempt.user_id:type_name -> code.common.v1.SolanaAccountId
	31, // 38: code.messaging.v1.LoginAttempt.domain:type_name -> code.common.v1.Domain
	28, // 39: code.messaging.v1.LoginAttempt.nonce:type_name -> code.common.v1.SolanaAccountId
	32, // 40: code.messaging.v1.LoginAttempt.timestamp:type_name -> google.protobuf.Timestamp
	27, // 41: code.messaging.v1.LoginAttempt.signature:type_name -> code.common.v1.Signature
	12, // 42: code.messaging.v1.LoginAttempt.rendezvous_key:type_name -> code.messaging.v1.RendezvousKey
	32, // 43: code.messaging.v1.LoginRejected.timestamp:type_name -> google.protobuf.Timestamp
	35, // 44: code.messaging.v1.AirdropReceived.airdrop_type:type_name -> code.transaction.v2.AirdropType
	29, // 45: code.messaging.v1.AirdropReceived.exchange_data:type_name -> code.transaction.v2.ExchangeData
	32, // 46: code.messaging.v1.AirdropReceived.timestamp:type_name -> google.protobuf.Timestamp
	13, // 47: code.messaging.v1.Message.id:type_name -> code.messaging.v1.MessageId
	27, // 48: code.messaging.v1.Message.send_message_request_signature:type_name -> code.common.v1.Signature
	14, // 49: code.messaging.v1.Message.request_to_grab_bill:type_name -> code.messaging.v1.RequestToGrabBill
	15, // 50: code.messaging.v1.Message.request_to_receive_bill:type_name -> code.messaging.v1.RequestToReceiveBill
	16, // 51: code.messaging.v1.Message.code_scanned:type_name -> code.messaging.v1.CodeScanned
	17, // 52: code.messaging.v1.Message.client_rejected_payment:type_name -> code.messaging.v1.ClientRejectedPayment
	18, // 53: code.messaging.v1.Message.intent_submitted:type_name -> code.messaging.v1.IntentSubmitted
	19, // 54: code.messaging.v1.Message.webhook_called:type_name -> code.messaging.v1.WebhookCalled
	20, // 55: code.messaging.v1.Message.request_to_login:type_name -> code.messaging.v1.RequestToLogin
	21, // 56: code.messaging.v1.Message.login_attempt:type_name -> code.messaging.v1.LoginAttempt
	22, // 57: code.messaging.v1.Message.login_rejected:type_name -> code.messaging.v1.LoginRejected
	23, // 58: code.messaging.v1.Message.airdrop_received:type_name -> code.messaging.v1.AirdropReceived
	32, // 59: code.messaging.v1.ServerPing.timestamp:type_name -> google.protobuf.Timestamp
	36, // 60: code.messaging.v1.ServerPing.ping_delay:type_name -> google.protobuf.Duration
	32, // 61: code.messaging.v1.ClientPong.timestamp:type_name -> google.protobuf.Timestamp
	2,  // 62: code.messaging.v1.Messaging.OpenMessageStream:input_type -> code.messaging.v1.OpenMessageStreamRequest
	4,  // 63: code.messaging.v1.Messaging.OpenMessageStreamWithKeepAlive:input_type -> code.messaging.v1.OpenMessageStreamWithKeepAliveRequest
	6,  // 64: code.messaging.v1.Messaging.PollMessages:input_type -> code.messaging.v1.PollMessagesRequest
	8,  // 65: code.messaging.v1.Messaging.AckMessages:input_type -> code.messaging.v1.AckMessagesRequest
	10, // 66: code.messaging.v1.Messaging.SendMessage:input_type -> code.messaging.v1.SendMessageRequest
	3,  // 67: code.messaging.v1.Messaging.OpenMessageStream:output_type -> code.messaging.v1.OpenMessageStreamResponse
	5,  // 68: code.messaging.v1.Messaging.OpenMessageStreamWithKeepAlive:output_type -> code.messaging.v1.OpenMessageStreamWithKeepAliveResponse
	7,  // 69: code.messaging.v1.Messaging.PollMessages:output_type -> code.messaging.v1.PollMessagesResponse
	9,  // 70: code.messaging.v1.Messaging.AckMessages:output_type -> code.messaging.v1.AckMesssagesResponse
	11, // 71: code.messaging.v1.Messaging.SendMessage:output_type -> code.messaging.v1.SendMessageResponse
	67, // [67:72] is the sub-list for method output_type
	62, // [62:67] is the sub-list for method input_type
	62, // [62:62] is the sub-list for extension type_name
	62, // [62:62] is the sub-list for extension extendee
	0,  // [0:62] is the sub-list for field type_name
}

func init() { file_messaging_v1_messaging_service_proto_init() }
func file_messaging_v1_messaging_service_proto_init() {
	if File_messaging_v1_messaging_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_messaging_v1_messaging_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenMessageStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_v1_messaging_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenMessageStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_v1_messaging_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenMessageStreamWithKeepAliveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_v1_messaging_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenMessageStreamWithKeepAliveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_v1_messaging_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PollMessagesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_v1_messaging_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PollMessagesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_v1_messaging_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AckMessagesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_v1_messaging_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AckMesssagesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_v1_messaging_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_v1_messaging_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_v1_messaging_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RendezvousKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_v1_messaging_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_v1_messaging_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestToGrabBill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_v1_messaging_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestToReceiveBill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_v1_messaging_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeScanned); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_v1_messaging_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientRejectedPayment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_v1_messaging_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntentSubmitted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_v1_messaging_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebhookCalled); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_v1_messaging_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestToLogin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_v1_messaging_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginAttempt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_v1_messaging_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginRejected); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_v1_messaging_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AirdropReceived); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_v1_messaging_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_v1_messaging_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerPing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_v1_messaging_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientPong); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_messaging_v1_messaging_service_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*OpenMessageStreamWithKeepAliveRequest_Request)(nil),
		(*OpenMessageStreamWithKeepAliveRequest_Pong)(nil),
	}
	file_messaging_v1_messaging_service_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*OpenMessageStreamWithKeepAliveResponse_Response)(nil),
		(*OpenMessageStreamWithKeepAliveResponse_Ping)(nil),
	}
	file_messaging_v1_messaging_service_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*RequestToReceiveBill_Exact)(nil),
		(*RequestToReceiveBill_Partial)(nil),
	}
	file_messaging_v1_messaging_service_proto_msgTypes[22].OneofWrappers = []interface{}{
		(*Message_RequestToGrabBill)(nil),
		(*Message_RequestToReceiveBill)(nil),
		(*Message_CodeScanned)(nil),
		(*Message_ClientRejectedPayment)(nil),
		(*Message_IntentSubmitted)(nil),
		(*Message_WebhookCalled)(nil),
		(*Message_RequestToLogin)(nil),
		(*Message_LoginAttempt)(nil),
		(*Message_LoginRejected)(nil),
		(*Message_AirdropReceived)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_messaging_v1_messaging_service_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_messaging_v1_messaging_service_proto_goTypes,
		DependencyIndexes: file_messaging_v1_messaging_service_proto_depIdxs,
		EnumInfos:         file_messaging_v1_messaging_service_proto_enumTypes,
		MessageInfos:      file_messaging_v1_messaging_service_proto_msgTypes,
	}.Build()
	File_messaging_v1_messaging_service_proto = out.File
	file_messaging_v1_messaging_service_proto_rawDesc = nil
	file_messaging_v1_messaging_service_proto_goTypes = nil
	file_messaging_v1_messaging_service_proto_depIdxs = nil
}
