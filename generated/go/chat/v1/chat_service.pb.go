// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v3.21.12
// source: chat/v1/chat_service.proto

package chat

import (
	v1 "github.com/code-payments/code-protobuf-api/generated/go/common/v1"
	v2 "github.com/code-payments/code-protobuf-api/generated/go/transaction/v2"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetChatsRequest_Direction int32

const (
	GetChatsRequest_ASC  GetChatsRequest_Direction = 0
	GetChatsRequest_DESC GetChatsRequest_Direction = 1
)

// Enum value maps for GetChatsRequest_Direction.
var (
	GetChatsRequest_Direction_name = map[int32]string{
		0: "ASC",
		1: "DESC",
	}
	GetChatsRequest_Direction_value = map[string]int32{
		"ASC":  0,
		"DESC": 1,
	}
)

func (x GetChatsRequest_Direction) Enum() *GetChatsRequest_Direction {
	p := new(GetChatsRequest_Direction)
	*p = x
	return p
}

func (x GetChatsRequest_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetChatsRequest_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_v1_chat_service_proto_enumTypes[0].Descriptor()
}

func (GetChatsRequest_Direction) Type() protoreflect.EnumType {
	return &file_chat_v1_chat_service_proto_enumTypes[0]
}

func (x GetChatsRequest_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetChatsRequest_Direction.Descriptor instead.
func (GetChatsRequest_Direction) EnumDescriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{0, 0}
}

type GetChatsResponse_Result int32

const (
	GetChatsResponse_OK        GetChatsResponse_Result = 0
	GetChatsResponse_NOT_FOUND GetChatsResponse_Result = 1
)

// Enum value maps for GetChatsResponse_Result.
var (
	GetChatsResponse_Result_name = map[int32]string{
		0: "OK",
		1: "NOT_FOUND",
	}
	GetChatsResponse_Result_value = map[string]int32{
		"OK":        0,
		"NOT_FOUND": 1,
	}
)

func (x GetChatsResponse_Result) Enum() *GetChatsResponse_Result {
	p := new(GetChatsResponse_Result)
	*p = x
	return p
}

func (x GetChatsResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetChatsResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_v1_chat_service_proto_enumTypes[1].Descriptor()
}

func (GetChatsResponse_Result) Type() protoreflect.EnumType {
	return &file_chat_v1_chat_service_proto_enumTypes[1]
}

func (x GetChatsResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetChatsResponse_Result.Descriptor instead.
func (GetChatsResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{1, 0}
}

type GetMessagesRequest_Direction int32

const (
	GetMessagesRequest_ASC  GetMessagesRequest_Direction = 0
	GetMessagesRequest_DESC GetMessagesRequest_Direction = 1
)

// Enum value maps for GetMessagesRequest_Direction.
var (
	GetMessagesRequest_Direction_name = map[int32]string{
		0: "ASC",
		1: "DESC",
	}
	GetMessagesRequest_Direction_value = map[string]int32{
		"ASC":  0,
		"DESC": 1,
	}
)

func (x GetMessagesRequest_Direction) Enum() *GetMessagesRequest_Direction {
	p := new(GetMessagesRequest_Direction)
	*p = x
	return p
}

func (x GetMessagesRequest_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetMessagesRequest_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_v1_chat_service_proto_enumTypes[2].Descriptor()
}

func (GetMessagesRequest_Direction) Type() protoreflect.EnumType {
	return &file_chat_v1_chat_service_proto_enumTypes[2]
}

func (x GetMessagesRequest_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetMessagesRequest_Direction.Descriptor instead.
func (GetMessagesRequest_Direction) EnumDescriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{2, 0}
}

type GetMessagesResponse_Result int32

const (
	GetMessagesResponse_OK        GetMessagesResponse_Result = 0
	GetMessagesResponse_NOT_FOUND GetMessagesResponse_Result = 1
)

// Enum value maps for GetMessagesResponse_Result.
var (
	GetMessagesResponse_Result_name = map[int32]string{
		0: "OK",
		1: "NOT_FOUND",
	}
	GetMessagesResponse_Result_value = map[string]int32{
		"OK":        0,
		"NOT_FOUND": 1,
	}
)

func (x GetMessagesResponse_Result) Enum() *GetMessagesResponse_Result {
	p := new(GetMessagesResponse_Result)
	*p = x
	return p
}

func (x GetMessagesResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetMessagesResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_v1_chat_service_proto_enumTypes[3].Descriptor()
}

func (GetMessagesResponse_Result) Type() protoreflect.EnumType {
	return &file_chat_v1_chat_service_proto_enumTypes[3]
}

func (x GetMessagesResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetMessagesResponse_Result.Descriptor instead.
func (GetMessagesResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{3, 0}
}

type AdvancePointerResponse_Result int32

const (
	AdvancePointerResponse_OK                AdvancePointerResponse_Result = 0
	AdvancePointerResponse_CHAT_NOT_FOUND    AdvancePointerResponse_Result = 1
	AdvancePointerResponse_MESSAGE_NOT_FOUND AdvancePointerResponse_Result = 2
)

// Enum value maps for AdvancePointerResponse_Result.
var (
	AdvancePointerResponse_Result_name = map[int32]string{
		0: "OK",
		1: "CHAT_NOT_FOUND",
		2: "MESSAGE_NOT_FOUND",
	}
	AdvancePointerResponse_Result_value = map[string]int32{
		"OK":                0,
		"CHAT_NOT_FOUND":    1,
		"MESSAGE_NOT_FOUND": 2,
	}
)

func (x AdvancePointerResponse_Result) Enum() *AdvancePointerResponse_Result {
	p := new(AdvancePointerResponse_Result)
	*p = x
	return p
}

func (x AdvancePointerResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdvancePointerResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_v1_chat_service_proto_enumTypes[4].Descriptor()
}

func (AdvancePointerResponse_Result) Type() protoreflect.EnumType {
	return &file_chat_v1_chat_service_proto_enumTypes[4]
}

func (x AdvancePointerResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdvancePointerResponse_Result.Descriptor instead.
func (AdvancePointerResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{5, 0}
}

type SetMuteStateResponse_Result int32

const (
	SetMuteStateResponse_OK             SetMuteStateResponse_Result = 0
	SetMuteStateResponse_CHAT_NOT_FOUND SetMuteStateResponse_Result = 1
	SetMuteStateResponse_CANT_MUTE      SetMuteStateResponse_Result = 2
)

// Enum value maps for SetMuteStateResponse_Result.
var (
	SetMuteStateResponse_Result_name = map[int32]string{
		0: "OK",
		1: "CHAT_NOT_FOUND",
		2: "CANT_MUTE",
	}
	SetMuteStateResponse_Result_value = map[string]int32{
		"OK":             0,
		"CHAT_NOT_FOUND": 1,
		"CANT_MUTE":      2,
	}
)

func (x SetMuteStateResponse_Result) Enum() *SetMuteStateResponse_Result {
	p := new(SetMuteStateResponse_Result)
	*p = x
	return p
}

func (x SetMuteStateResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SetMuteStateResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_v1_chat_service_proto_enumTypes[5].Descriptor()
}

func (SetMuteStateResponse_Result) Type() protoreflect.EnumType {
	return &file_chat_v1_chat_service_proto_enumTypes[5]
}

func (x SetMuteStateResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SetMuteStateResponse_Result.Descriptor instead.
func (SetMuteStateResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{7, 0}
}

type SetSubscriptionStateResponse_Result int32

const (
	SetSubscriptionStateResponse_OK               SetSubscriptionStateResponse_Result = 0
	SetSubscriptionStateResponse_CHAT_NOT_FOUND   SetSubscriptionStateResponse_Result = 1
	SetSubscriptionStateResponse_CANT_UNSUBSCRIBE SetSubscriptionStateResponse_Result = 2
)

// Enum value maps for SetSubscriptionStateResponse_Result.
var (
	SetSubscriptionStateResponse_Result_name = map[int32]string{
		0: "OK",
		1: "CHAT_NOT_FOUND",
		2: "CANT_UNSUBSCRIBE",
	}
	SetSubscriptionStateResponse_Result_value = map[string]int32{
		"OK":               0,
		"CHAT_NOT_FOUND":   1,
		"CANT_UNSUBSCRIBE": 2,
	}
)

func (x SetSubscriptionStateResponse_Result) Enum() *SetSubscriptionStateResponse_Result {
	p := new(SetSubscriptionStateResponse_Result)
	*p = x
	return p
}

func (x SetSubscriptionStateResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SetSubscriptionStateResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_v1_chat_service_proto_enumTypes[6].Descriptor()
}

func (SetSubscriptionStateResponse_Result) Type() protoreflect.EnumType {
	return &file_chat_v1_chat_service_proto_enumTypes[6]
}

func (x SetSubscriptionStateResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SetSubscriptionStateResponse_Result.Descriptor instead.
func (SetSubscriptionStateResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{9, 0}
}

type SendMessageResponse_Result int32

const (
	SendMessageResponse_OK SendMessageResponse_Result = 0
)

// Enum value maps for SendMessageResponse_Result.
var (
	SendMessageResponse_Result_name = map[int32]string{
		0: "OK",
	}
	SendMessageResponse_Result_value = map[string]int32{
		"OK": 0,
	}
)

func (x SendMessageResponse_Result) Enum() *SendMessageResponse_Result {
	p := new(SendMessageResponse_Result)
	*p = x
	return p
}

func (x SendMessageResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SendMessageResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_v1_chat_service_proto_enumTypes[7].Descriptor()
}

func (SendMessageResponse_Result) Type() protoreflect.EnumType {
	return &file_chat_v1_chat_service_proto_enumTypes[7]
}

func (x SendMessageResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SendMessageResponse_Result.Descriptor instead.
func (SendMessageResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{16, 0}
}

type Pointer_Kind int32

const (
	Pointer_UNKNOWN   Pointer_Kind = 0
	Pointer_READ      Pointer_Kind = 1
	Pointer_DELIVERED Pointer_Kind = 2
	Pointer_SENT      Pointer_Kind = 3 // Probably always inferred by OK result in SendMessageResponse
)

// Enum value maps for Pointer_Kind.
var (
	Pointer_Kind_name = map[int32]string{
		0: "UNKNOWN",
		1: "READ",
		2: "DELIVERED",
		3: "SENT",
	}
	Pointer_Kind_value = map[string]int32{
		"UNKNOWN":   0,
		"READ":      1,
		"DELIVERED": 2,
		"SENT":      3,
	}
)

func (x Pointer_Kind) Enum() *Pointer_Kind {
	p := new(Pointer_Kind)
	*p = x
	return p
}

func (x Pointer_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Pointer_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_v1_chat_service_proto_enumTypes[8].Descriptor()
}

func (Pointer_Kind) Type() protoreflect.EnumType {
	return &file_chat_v1_chat_service_proto_enumTypes[8]
}

func (x Pointer_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Pointer_Kind.Descriptor instead.
func (Pointer_Kind) EnumDescriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{20, 0}
}

type ExchangeDataContent_Verb int32

const (
	ExchangeDataContent_UNKNOWN      ExchangeDataContent_Verb = 0
	ExchangeDataContent_GAVE         ExchangeDataContent_Verb = 1
	ExchangeDataContent_RECEIVED     ExchangeDataContent_Verb = 2
	ExchangeDataContent_WITHDREW     ExchangeDataContent_Verb = 3
	ExchangeDataContent_DEPOSITED    ExchangeDataContent_Verb = 4
	ExchangeDataContent_SENT         ExchangeDataContent_Verb = 5
	ExchangeDataContent_RETURNED     ExchangeDataContent_Verb = 6
	ExchangeDataContent_SPENT        ExchangeDataContent_Verb = 7
	ExchangeDataContent_PAID         ExchangeDataContent_Verb = 8
	ExchangeDataContent_PURCHASED    ExchangeDataContent_Verb = 9
	ExchangeDataContent_RECEIVED_TIP ExchangeDataContent_Verb = 10
	ExchangeDataContent_SENT_TIP     ExchangeDataContent_Verb = 11
)

// Enum value maps for ExchangeDataContent_Verb.
var (
	ExchangeDataContent_Verb_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "GAVE",
		2:  "RECEIVED",
		3:  "WITHDREW",
		4:  "DEPOSITED",
		5:  "SENT",
		6:  "RETURNED",
		7:  "SPENT",
		8:  "PAID",
		9:  "PURCHASED",
		10: "RECEIVED_TIP",
		11: "SENT_TIP",
	}
	ExchangeDataContent_Verb_value = map[string]int32{
		"UNKNOWN":      0,
		"GAVE":         1,
		"RECEIVED":     2,
		"WITHDREW":     3,
		"DEPOSITED":    4,
		"SENT":         5,
		"RETURNED":     6,
		"SPENT":        7,
		"PAID":         8,
		"PURCHASED":    9,
		"RECEIVED_TIP": 10,
		"SENT_TIP":     11,
	}
)

func (x ExchangeDataContent_Verb) Enum() *ExchangeDataContent_Verb {
	p := new(ExchangeDataContent_Verb)
	*p = x
	return p
}

func (x ExchangeDataContent_Verb) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExchangeDataContent_Verb) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_v1_chat_service_proto_enumTypes[9].Descriptor()
}

func (ExchangeDataContent_Verb) Type() protoreflect.EnumType {
	return &file_chat_v1_chat_service_proto_enumTypes[9]
}

func (x ExchangeDataContent_Verb) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExchangeDataContent_Verb.Descriptor instead.
func (ExchangeDataContent_Verb) EnumDescriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{25, 0}
}

type GetChatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner     *v1.SolanaAccountId       `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Signature *v1.Signature             `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	PageSize  uint32                    `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Cursor    *Cursor                   `protobuf:"bytes,4,opt,name=cursor,proto3" json:"cursor,omitempty"`
	Direction GetChatsRequest_Direction `protobuf:"varint,5,opt,name=direction,proto3,enum=code.chat.v1.GetChatsRequest_Direction" json:"direction,omitempty"`
}

func (x *GetChatsRequest) Reset() {
	*x = GetChatsRequest{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetChatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChatsRequest) ProtoMessage() {}

func (x *GetChatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChatsRequest.ProtoReflect.Descriptor instead.
func (*GetChatsRequest) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetChatsRequest) GetOwner() *v1.SolanaAccountId {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *GetChatsRequest) GetSignature() *v1.Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *GetChatsRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetChatsRequest) GetCursor() *Cursor {
	if x != nil {
		return x.Cursor
	}
	return nil
}

func (x *GetChatsRequest) GetDirection() GetChatsRequest_Direction {
	if x != nil {
		return x.Direction
	}
	return GetChatsRequest_ASC
}

type GetChatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result GetChatsResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=code.chat.v1.GetChatsResponse_Result" json:"result,omitempty"`
	Chats  []*ChatMetadata         `protobuf:"bytes,2,rep,name=chats,proto3" json:"chats,omitempty"`
}

func (x *GetChatsResponse) Reset() {
	*x = GetChatsResponse{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetChatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChatsResponse) ProtoMessage() {}

func (x *GetChatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChatsResponse.ProtoReflect.Descriptor instead.
func (*GetChatsResponse) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{1}
}

func (x *GetChatsResponse) GetResult() GetChatsResponse_Result {
	if x != nil {
		return x.Result
	}
	return GetChatsResponse_OK
}

func (x *GetChatsResponse) GetChats() []*ChatMetadata {
	if x != nil {
		return x.Chats
	}
	return nil
}

type GetMessagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId    *ChatId                      `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Owner     *v1.SolanaAccountId          `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	Signature *v1.Signature                `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	PageSize  uint32                       `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Cursor    *Cursor                      `protobuf:"bytes,5,opt,name=cursor,proto3" json:"cursor,omitempty"`
	Direction GetMessagesRequest_Direction `protobuf:"varint,6,opt,name=direction,proto3,enum=code.chat.v1.GetMessagesRequest_Direction" json:"direction,omitempty"`
}

func (x *GetMessagesRequest) Reset() {
	*x = GetMessagesRequest{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMessagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMessagesRequest) ProtoMessage() {}

func (x *GetMessagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMessagesRequest.ProtoReflect.Descriptor instead.
func (*GetMessagesRequest) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetMessagesRequest) GetChatId() *ChatId {
	if x != nil {
		return x.ChatId
	}
	return nil
}

func (x *GetMessagesRequest) GetOwner() *v1.SolanaAccountId {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *GetMessagesRequest) GetSignature() *v1.Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *GetMessagesRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetMessagesRequest) GetCursor() *Cursor {
	if x != nil {
		return x.Cursor
	}
	return nil
}

func (x *GetMessagesRequest) GetDirection() GetMessagesRequest_Direction {
	if x != nil {
		return x.Direction
	}
	return GetMessagesRequest_ASC
}

type GetMessagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result   GetMessagesResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=code.chat.v1.GetMessagesResponse_Result" json:"result,omitempty"`
	Messages []*ChatMessage             `protobuf:"bytes,2,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (x *GetMessagesResponse) Reset() {
	*x = GetMessagesResponse{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMessagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMessagesResponse) ProtoMessage() {}

func (x *GetMessagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMessagesResponse.ProtoReflect.Descriptor instead.
func (*GetMessagesResponse) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetMessagesResponse) GetResult() GetMessagesResponse_Result {
	if x != nil {
		return x.Result
	}
	return GetMessagesResponse_OK
}

func (x *GetMessagesResponse) GetMessages() []*ChatMessage {
	if x != nil {
		return x.Messages
	}
	return nil
}

type AdvancePointerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId    *ChatId             `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Pointer   *Pointer            `protobuf:"bytes,2,opt,name=pointer,proto3" json:"pointer,omitempty"`
	Owner     *v1.SolanaAccountId `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	Signature *v1.Signature       `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *AdvancePointerRequest) Reset() {
	*x = AdvancePointerRequest{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdvancePointerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdvancePointerRequest) ProtoMessage() {}

func (x *AdvancePointerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdvancePointerRequest.ProtoReflect.Descriptor instead.
func (*AdvancePointerRequest) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{4}
}

func (x *AdvancePointerRequest) GetChatId() *ChatId {
	if x != nil {
		return x.ChatId
	}
	return nil
}

func (x *AdvancePointerRequest) GetPointer() *Pointer {
	if x != nil {
		return x.Pointer
	}
	return nil
}

func (x *AdvancePointerRequest) GetOwner() *v1.SolanaAccountId {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *AdvancePointerRequest) GetSignature() *v1.Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type AdvancePointerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result AdvancePointerResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=code.chat.v1.AdvancePointerResponse_Result" json:"result,omitempty"`
}

func (x *AdvancePointerResponse) Reset() {
	*x = AdvancePointerResponse{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdvancePointerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdvancePointerResponse) ProtoMessage() {}

func (x *AdvancePointerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdvancePointerResponse.ProtoReflect.Descriptor instead.
func (*AdvancePointerResponse) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{5}
}

func (x *AdvancePointerResponse) GetResult() AdvancePointerResponse_Result {
	if x != nil {
		return x.Result
	}
	return AdvancePointerResponse_OK
}

type SetMuteStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId    *ChatId             `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	IsMuted   bool                `protobuf:"varint,2,opt,name=is_muted,json=isMuted,proto3" json:"is_muted,omitempty"`
	Owner     *v1.SolanaAccountId `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	Signature *v1.Signature       `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *SetMuteStateRequest) Reset() {
	*x = SetMuteStateRequest{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetMuteStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMuteStateRequest) ProtoMessage() {}

func (x *SetMuteStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMuteStateRequest.ProtoReflect.Descriptor instead.
func (*SetMuteStateRequest) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{6}
}

func (x *SetMuteStateRequest) GetChatId() *ChatId {
	if x != nil {
		return x.ChatId
	}
	return nil
}

func (x *SetMuteStateRequest) GetIsMuted() bool {
	if x != nil {
		return x.IsMuted
	}
	return false
}

func (x *SetMuteStateRequest) GetOwner() *v1.SolanaAccountId {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *SetMuteStateRequest) GetSignature() *v1.Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type SetMuteStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result SetMuteStateResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=code.chat.v1.SetMuteStateResponse_Result" json:"result,omitempty"`
}

func (x *SetMuteStateResponse) Reset() {
	*x = SetMuteStateResponse{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetMuteStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMuteStateResponse) ProtoMessage() {}

func (x *SetMuteStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMuteStateResponse.ProtoReflect.Descriptor instead.
func (*SetMuteStateResponse) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{7}
}

func (x *SetMuteStateResponse) GetResult() SetMuteStateResponse_Result {
	if x != nil {
		return x.Result
	}
	return SetMuteStateResponse_OK
}

type SetSubscriptionStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId       *ChatId             `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	IsSubscribed bool                `protobuf:"varint,2,opt,name=is_subscribed,json=isSubscribed,proto3" json:"is_subscribed,omitempty"`
	Owner        *v1.SolanaAccountId `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	Signature    *v1.Signature       `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *SetSubscriptionStateRequest) Reset() {
	*x = SetSubscriptionStateRequest{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetSubscriptionStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSubscriptionStateRequest) ProtoMessage() {}

func (x *SetSubscriptionStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSubscriptionStateRequest.ProtoReflect.Descriptor instead.
func (*SetSubscriptionStateRequest) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{8}
}

func (x *SetSubscriptionStateRequest) GetChatId() *ChatId {
	if x != nil {
		return x.ChatId
	}
	return nil
}

func (x *SetSubscriptionStateRequest) GetIsSubscribed() bool {
	if x != nil {
		return x.IsSubscribed
	}
	return false
}

func (x *SetSubscriptionStateRequest) GetOwner() *v1.SolanaAccountId {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *SetSubscriptionStateRequest) GetSignature() *v1.Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type SetSubscriptionStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result SetSubscriptionStateResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=code.chat.v1.SetSubscriptionStateResponse_Result" json:"result,omitempty"`
}

func (x *SetSubscriptionStateResponse) Reset() {
	*x = SetSubscriptionStateResponse{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetSubscriptionStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSubscriptionStateResponse) ProtoMessage() {}

func (x *SetSubscriptionStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSubscriptionStateResponse.ProtoReflect.Descriptor instead.
func (*SetSubscriptionStateResponse) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{9}
}

func (x *SetSubscriptionStateResponse) GetResult() SetSubscriptionStateResponse_Result {
	if x != nil {
		return x.Result
	}
	return SetSubscriptionStateResponse_OK
}

type OpenChatEventStream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId    *ChatId             `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Owner     *v1.SolanaAccountId `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	Signature *v1.Signature       `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *OpenChatEventStream) Reset() {
	*x = OpenChatEventStream{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OpenChatEventStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenChatEventStream) ProtoMessage() {}

func (x *OpenChatEventStream) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenChatEventStream.ProtoReflect.Descriptor instead.
func (*OpenChatEventStream) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{10}
}

func (x *OpenChatEventStream) GetChatId() *ChatId {
	if x != nil {
		return x.ChatId
	}
	return nil
}

func (x *OpenChatEventStream) GetOwner() *v1.SolanaAccountId {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *OpenChatEventStream) GetSignature() *v1.Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type ChatStreamEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages []*ChatMessage `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
	Pointers []*Pointer     `protobuf:"bytes,2,rep,name=pointers,proto3" json:"pointers,omitempty"`
}

func (x *ChatStreamEvent) Reset() {
	*x = ChatStreamEvent{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatStreamEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatStreamEvent) ProtoMessage() {}

func (x *ChatStreamEvent) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatStreamEvent.ProtoReflect.Descriptor instead.
func (*ChatStreamEvent) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{11}
}

func (x *ChatStreamEvent) GetMessages() []*ChatMessage {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *ChatStreamEvent) GetPointers() []*Pointer {
	if x != nil {
		return x.Pointers
	}
	return nil
}

type ChatStreamEventBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []*ChatStreamEvent `protobuf:"bytes,2,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *ChatStreamEventBatch) Reset() {
	*x = ChatStreamEventBatch{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatStreamEventBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatStreamEventBatch) ProtoMessage() {}

func (x *ChatStreamEventBatch) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatStreamEventBatch.ProtoReflect.Descriptor instead.
func (*ChatStreamEventBatch) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{12}
}

func (x *ChatStreamEventBatch) GetEvents() []*ChatStreamEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type StreamChatEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*StreamChatEventsRequest_OpenStream
	//	*StreamChatEventsRequest_Pong
	Type isStreamChatEventsRequest_Type `protobuf_oneof:"type"`
}

func (x *StreamChatEventsRequest) Reset() {
	*x = StreamChatEventsRequest{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamChatEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamChatEventsRequest) ProtoMessage() {}

func (x *StreamChatEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamChatEventsRequest.ProtoReflect.Descriptor instead.
func (*StreamChatEventsRequest) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{13}
}

func (m *StreamChatEventsRequest) GetType() isStreamChatEventsRequest_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *StreamChatEventsRequest) GetOpenStream() *OpenChatEventStream {
	if x, ok := x.GetType().(*StreamChatEventsRequest_OpenStream); ok {
		return x.OpenStream
	}
	return nil
}

func (x *StreamChatEventsRequest) GetPong() *v1.ClientPong {
	if x, ok := x.GetType().(*StreamChatEventsRequest_Pong); ok {
		return x.Pong
	}
	return nil
}

type isStreamChatEventsRequest_Type interface {
	isStreamChatEventsRequest_Type()
}

type StreamChatEventsRequest_OpenStream struct {
	OpenStream *OpenChatEventStream `protobuf:"bytes,1,opt,name=open_stream,json=openStream,proto3,oneof"`
}

type StreamChatEventsRequest_Pong struct {
	Pong *v1.ClientPong `protobuf:"bytes,2,opt,name=pong,proto3,oneof"`
}

func (*StreamChatEventsRequest_OpenStream) isStreamChatEventsRequest_Type() {}

func (*StreamChatEventsRequest_Pong) isStreamChatEventsRequest_Type() {}

type StreamChatEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*StreamChatEventsResponse_Events
	//	*StreamChatEventsResponse_Ping
	Type isStreamChatEventsResponse_Type `protobuf_oneof:"type"`
}

func (x *StreamChatEventsResponse) Reset() {
	*x = StreamChatEventsResponse{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamChatEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamChatEventsResponse) ProtoMessage() {}

func (x *StreamChatEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamChatEventsResponse.ProtoReflect.Descriptor instead.
func (*StreamChatEventsResponse) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{14}
}

func (m *StreamChatEventsResponse) GetType() isStreamChatEventsResponse_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *StreamChatEventsResponse) GetEvents() *ChatStreamEventBatch {
	if x, ok := x.GetType().(*StreamChatEventsResponse_Events); ok {
		return x.Events
	}
	return nil
}

func (x *StreamChatEventsResponse) GetPing() *v1.ServerPing {
	if x, ok := x.GetType().(*StreamChatEventsResponse_Ping); ok {
		return x.Ping
	}
	return nil
}

type isStreamChatEventsResponse_Type interface {
	isStreamChatEventsResponse_Type()
}

type StreamChatEventsResponse_Events struct {
	Events *ChatStreamEventBatch `protobuf:"bytes,1,opt,name=events,proto3,oneof"`
}

type StreamChatEventsResponse_Ping struct {
	Ping *v1.ServerPing `protobuf:"bytes,2,opt,name=ping,proto3,oneof"`
}

func (*StreamChatEventsResponse_Events) isStreamChatEventsResponse_Type() {}

func (*StreamChatEventsResponse_Ping) isStreamChatEventsResponse_Type() {}

type SendMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner     *v1.SolanaAccountId `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Signature *v1.Signature       `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	ChatId    *ChatId             `protobuf:"bytes,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	// todo: What field type should this be? Maybe the chat message itself with fields missing?
	Content []*Content `protobuf:"bytes,4,rep,name=content,proto3" json:"content,omitempty"`
}

func (x *SendMessageRequest) Reset() {
	*x = SendMessageRequest{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMessageRequest) ProtoMessage() {}

func (x *SendMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMessageRequest.ProtoReflect.Descriptor instead.
func (*SendMessageRequest) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{15}
}

func (x *SendMessageRequest) GetOwner() *v1.SolanaAccountId {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *SendMessageRequest) GetSignature() *v1.Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *SendMessageRequest) GetChatId() *ChatId {
	if x != nil {
		return x.ChatId
	}
	return nil
}

func (x *SendMessageRequest) GetContent() []*Content {
	if x != nil {
		return x.Content
	}
	return nil
}

type SendMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result  SendMessageResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=code.chat.v1.SendMessageResponse_Result" json:"result,omitempty"`
	Message *ChatMessage               `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SendMessageResponse) Reset() {
	*x = SendMessageResponse{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMessageResponse) ProtoMessage() {}

func (x *SendMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMessageResponse.ProtoReflect.Descriptor instead.
func (*SendMessageResponse) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{16}
}

func (x *SendMessageResponse) GetResult() SendMessageResponse_Result {
	if x != nil {
		return x.Result
	}
	return SendMessageResponse_OK
}

func (x *SendMessageResponse) GetMessage() *ChatMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

type ChatId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ChatId) Reset() {
	*x = ChatId{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatId) ProtoMessage() {}

func (x *ChatId) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatId.ProtoReflect.Descriptor instead.
func (*ChatId) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{17}
}

func (x *ChatId) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type ChatMessageId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ChatMessageId) Reset() {
	*x = ChatMessageId{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatMessageId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMessageId) ProtoMessage() {}

func (x *ChatMessageId) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMessageId.ProtoReflect.Descriptor instead.
func (*ChatMessageId) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{18}
}

func (x *ChatMessageId) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type ChatMemberId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// todo: Public key for now
	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ChatMemberId) Reset() {
	*x = ChatMemberId{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatMemberId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMemberId) ProtoMessage() {}

func (x *ChatMemberId) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMemberId.ProtoReflect.Descriptor instead.
func (*ChatMemberId) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{19}
}

func (x *ChatMemberId) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type Pointer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind  Pointer_Kind   `protobuf:"varint,1,opt,name=kind,proto3,enum=code.chat.v1.Pointer_Kind" json:"kind,omitempty"`
	Value *ChatMessageId `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	User  *ChatMemberId  `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *Pointer) Reset() {
	*x = Pointer{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Pointer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pointer) ProtoMessage() {}

func (x *Pointer) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pointer.ProtoReflect.Descriptor instead.
func (*Pointer) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{20}
}

func (x *Pointer) GetKind() Pointer_Kind {
	if x != nil {
		return x.Kind
	}
	return Pointer_UNKNOWN
}

func (x *Pointer) GetValue() *ChatMessageId {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Pointer) GetUser() *ChatMemberId {
	if x != nil {
		return x.User
	}
	return nil
}

type ChatMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId *ChatId `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	// Recommended chat title inferred by the type of chat
	//
	// Types that are assignable to Title:
	//
	//	*ChatMetadata_Localized
	//	*ChatMetadata_Domain
	Title isChatMetadata_Title `protobuf_oneof:"title"`
	// Pointer in the chat indicating the most recently read message by the user
	ReadPointer *Pointer `protobuf:"bytes,4,opt,name=read_pointer,json=readPointer,proto3" json:"read_pointer,omitempty"`
	// Estimated number of unread messages in this chat
	NumUnread uint32 `protobuf:"varint,5,opt,name=num_unread,json=numUnread,proto3" json:"num_unread,omitempty"`
	// Has the user muted this chat?
	IsMuted bool `protobuf:"varint,6,opt,name=is_muted,json=isMuted,proto3" json:"is_muted,omitempty"`
	// Is the user subscribed to this chat?
	IsSubscribed bool `protobuf:"varint,7,opt,name=is_subscribed,json=isSubscribed,proto3" json:"is_subscribed,omitempty"`
	// Can the user mute this chat?
	CanMute bool `protobuf:"varint,8,opt,name=can_mute,json=canMute,proto3" json:"can_mute,omitempty"`
	// Can the user unsubscribe from this chat?
	CanUnsubscribe bool `protobuf:"varint,9,opt,name=can_unsubscribe,json=canUnsubscribe,proto3" json:"can_unsubscribe,omitempty"`
	// Cursor value for this chat for reference in subsequent GetChatsRequest
	Cursor *Cursor `protobuf:"bytes,10,opt,name=cursor,proto3" json:"cursor,omitempty"`
	// Is this a verified chat?
	//
	// Note: It's possible to have two chats with the same title, but with
	// different verification statuses. They should be treated separately.
	IsVerified bool `protobuf:"varint,11,opt,name=is_verified,json=isVerified,proto3" json:"is_verified,omitempty"`
}

func (x *ChatMetadata) Reset() {
	*x = ChatMetadata{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMetadata) ProtoMessage() {}

func (x *ChatMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMetadata.ProtoReflect.Descriptor instead.
func (*ChatMetadata) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{21}
}

func (x *ChatMetadata) GetChatId() *ChatId {
	if x != nil {
		return x.ChatId
	}
	return nil
}

func (m *ChatMetadata) GetTitle() isChatMetadata_Title {
	if m != nil {
		return m.Title
	}
	return nil
}

func (x *ChatMetadata) GetLocalized() *ServerLocalizedContent {
	if x, ok := x.GetTitle().(*ChatMetadata_Localized); ok {
		return x.Localized
	}
	return nil
}

func (x *ChatMetadata) GetDomain() *v1.Domain {
	if x, ok := x.GetTitle().(*ChatMetadata_Domain); ok {
		return x.Domain
	}
	return nil
}

func (x *ChatMetadata) GetReadPointer() *Pointer {
	if x != nil {
		return x.ReadPointer
	}
	return nil
}

func (x *ChatMetadata) GetNumUnread() uint32 {
	if x != nil {
		return x.NumUnread
	}
	return 0
}

func (x *ChatMetadata) GetIsMuted() bool {
	if x != nil {
		return x.IsMuted
	}
	return false
}

func (x *ChatMetadata) GetIsSubscribed() bool {
	if x != nil {
		return x.IsSubscribed
	}
	return false
}

func (x *ChatMetadata) GetCanMute() bool {
	if x != nil {
		return x.CanMute
	}
	return false
}

func (x *ChatMetadata) GetCanUnsubscribe() bool {
	if x != nil {
		return x.CanUnsubscribe
	}
	return false
}

func (x *ChatMetadata) GetCursor() *Cursor {
	if x != nil {
		return x.Cursor
	}
	return nil
}

func (x *ChatMetadata) GetIsVerified() bool {
	if x != nil {
		return x.IsVerified
	}
	return false
}

type isChatMetadata_Title interface {
	isChatMetadata_Title()
}

type ChatMetadata_Localized struct {
	Localized *ServerLocalizedContent `protobuf:"bytes,2,opt,name=localized,proto3,oneof"`
}

type ChatMetadata_Domain struct {
	Domain *v1.Domain `protobuf:"bytes,3,opt,name=domain,proto3,oneof"`
}

func (*ChatMetadata_Localized) isChatMetadata_Title() {}

func (*ChatMetadata_Domain) isChatMetadata_Title() {}

type ChatMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique ID for this message
	MessageId *ChatMessageId `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// Timestamp this message was generated at
	Ts *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=ts,proto3" json:"ts,omitempty"`
	// Ordered message content. A message may have more than one piece of content.
	Content []*Content `protobuf:"bytes,3,rep,name=content,proto3" json:"content,omitempty"`
	// Cursor value for this message for reference in subsequent GetMessagesRequest
	Cursor *Cursor       `protobuf:"bytes,4,opt,name=cursor,proto3" json:"cursor,omitempty"`
	Sender *ChatMemberId `protobuf:"bytes,5,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (x *ChatMessage) Reset() {
	*x = ChatMessage{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMessage) ProtoMessage() {}

func (x *ChatMessage) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMessage.ProtoReflect.Descriptor instead.
func (*ChatMessage) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{22}
}

func (x *ChatMessage) GetMessageId() *ChatMessageId {
	if x != nil {
		return x.MessageId
	}
	return nil
}

func (x *ChatMessage) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *ChatMessage) GetContent() []*Content {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *ChatMessage) GetCursor() *Cursor {
	if x != nil {
		return x.Cursor
	}
	return nil
}

func (x *ChatMessage) GetSender() *ChatMemberId {
	if x != nil {
		return x.Sender
	}
	return nil
}

type Content struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*Content_ServerLocalized
	//	*Content_ExchangeData
	//	*Content_NaclBox
	//	*Content_Text
	//	*Content_ThankYou
	Type isContent_Type `protobuf_oneof:"type"`
}

func (x *Content) Reset() {
	*x = Content{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Content) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Content) ProtoMessage() {}

func (x *Content) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Content.ProtoReflect.Descriptor instead.
func (*Content) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{23}
}

func (m *Content) GetType() isContent_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *Content) GetServerLocalized() *ServerLocalizedContent {
	if x, ok := x.GetType().(*Content_ServerLocalized); ok {
		return x.ServerLocalized
	}
	return nil
}

func (x *Content) GetExchangeData() *ExchangeDataContent {
	if x, ok := x.GetType().(*Content_ExchangeData); ok {
		return x.ExchangeData
	}
	return nil
}

func (x *Content) GetNaclBox() *NaclBoxEncryptedContent {
	if x, ok := x.GetType().(*Content_NaclBox); ok {
		return x.NaclBox
	}
	return nil
}

func (x *Content) GetText() *TextContent {
	if x, ok := x.GetType().(*Content_Text); ok {
		return x.Text
	}
	return nil
}

func (x *Content) GetThankYou() *ThankYouContent {
	if x, ok := x.GetType().(*Content_ThankYou); ok {
		return x.ThankYou
	}
	return nil
}

type isContent_Type interface {
	isContent_Type()
}

type Content_ServerLocalized struct {
	ServerLocalized *ServerLocalizedContent `protobuf:"bytes,1,opt,name=server_localized,json=serverLocalized,proto3,oneof"`
}

type Content_ExchangeData struct {
	ExchangeData *ExchangeDataContent `protobuf:"bytes,2,opt,name=exchange_data,json=exchangeData,proto3,oneof"`
}

type Content_NaclBox struct {
	NaclBox *NaclBoxEncryptedContent `protobuf:"bytes,3,opt,name=nacl_box,json=naclBox,proto3,oneof"`
}

type Content_Text struct {
	Text *TextContent `protobuf:"bytes,4,opt,name=text,proto3,oneof"`
}

type Content_ThankYou struct {
	ThankYou *ThankYouContent `protobuf:"bytes,5,opt,name=thank_you,json=thankYou,proto3,oneof"`
}

func (*Content_ServerLocalized) isContent_Type() {}

func (*Content_ExchangeData) isContent_Type() {}

func (*Content_NaclBox) isContent_Type() {}

func (*Content_Text) isContent_Type() {}

func (*Content_ThankYou) isContent_Type() {}

type ServerLocalizedContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// When server-side localization is in place, clients will always see the
	// localized text.
	KeyOrText string `protobuf:"bytes,1,opt,name=key_or_text,json=keyOrText,proto3" json:"key_or_text,omitempty"`
}

func (x *ServerLocalizedContent) Reset() {
	*x = ServerLocalizedContent{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServerLocalizedContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerLocalizedContent) ProtoMessage() {}

func (x *ServerLocalizedContent) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerLocalizedContent.ProtoReflect.Descriptor instead.
func (*ServerLocalizedContent) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{24}
}

func (x *ServerLocalizedContent) GetKeyOrText() string {
	if x != nil {
		return x.KeyOrText
	}
	return ""
}

type ExchangeDataContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Verb ExchangeDataContent_Verb `protobuf:"varint,1,opt,name=verb,proto3,enum=code.chat.v1.ExchangeDataContent_Verb" json:"verb,omitempty"`
	// Types that are assignable to ExchangeData:
	//
	//	*ExchangeDataContent_Exact
	//	*ExchangeDataContent_Partial
	ExchangeData isExchangeDataContent_ExchangeData `protobuf_oneof:"exchange_data"`
}

func (x *ExchangeDataContent) Reset() {
	*x = ExchangeDataContent{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExchangeDataContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeDataContent) ProtoMessage() {}

func (x *ExchangeDataContent) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeDataContent.ProtoReflect.Descriptor instead.
func (*ExchangeDataContent) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{25}
}

func (x *ExchangeDataContent) GetVerb() ExchangeDataContent_Verb {
	if x != nil {
		return x.Verb
	}
	return ExchangeDataContent_UNKNOWN
}

func (m *ExchangeDataContent) GetExchangeData() isExchangeDataContent_ExchangeData {
	if m != nil {
		return m.ExchangeData
	}
	return nil
}

func (x *ExchangeDataContent) GetExact() *v2.ExchangeData {
	if x, ok := x.GetExchangeData().(*ExchangeDataContent_Exact); ok {
		return x.Exact
	}
	return nil
}

func (x *ExchangeDataContent) GetPartial() *v2.ExchangeDataWithoutRate {
	if x, ok := x.GetExchangeData().(*ExchangeDataContent_Partial); ok {
		return x.Partial
	}
	return nil
}

type isExchangeDataContent_ExchangeData interface {
	isExchangeDataContent_ExchangeData()
}

type ExchangeDataContent_Exact struct {
	Exact *v2.ExchangeData `protobuf:"bytes,2,opt,name=exact,proto3,oneof"`
}

type ExchangeDataContent_Partial struct {
	Partial *v2.ExchangeDataWithoutRate `protobuf:"bytes,3,opt,name=partial,proto3,oneof"`
}

func (*ExchangeDataContent_Exact) isExchangeDataContent_ExchangeData() {}

func (*ExchangeDataContent_Partial) isExchangeDataContent_ExchangeData() {}

type NaclBoxEncryptedContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerPublicKey    *v1.SolanaAccountId `protobuf:"bytes,1,opt,name=peer_public_key,json=peerPublicKey,proto3" json:"peer_public_key,omitempty"`
	Nonce            []byte              `protobuf:"bytes,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	EncryptedPayload []byte              `protobuf:"bytes,3,opt,name=encrypted_payload,json=encryptedPayload,proto3" json:"encrypted_payload,omitempty"`
}

func (x *NaclBoxEncryptedContent) Reset() {
	*x = NaclBoxEncryptedContent{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NaclBoxEncryptedContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NaclBoxEncryptedContent) ProtoMessage() {}

func (x *NaclBoxEncryptedContent) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NaclBoxEncryptedContent.ProtoReflect.Descriptor instead.
func (*NaclBoxEncryptedContent) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{26}
}

func (x *NaclBoxEncryptedContent) GetPeerPublicKey() *v1.SolanaAccountId {
	if x != nil {
		return x.PeerPublicKey
	}
	return nil
}

func (x *NaclBoxEncryptedContent) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *NaclBoxEncryptedContent) GetEncryptedPayload() []byte {
	if x != nil {
		return x.EncryptedPayload
	}
	return nil
}

type TextContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *TextContent) Reset() {
	*x = TextContent{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TextContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextContent) ProtoMessage() {}

func (x *TextContent) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextContent.ProtoReflect.Descriptor instead.
func (*TextContent) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{27}
}

func (x *TextContent) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type ThankYouContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ThankYouContent) Reset() {
	*x = ThankYouContent{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ThankYouContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThankYouContent) ProtoMessage() {}

func (x *ThankYouContent) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThankYouContent.ProtoReflect.Descriptor instead.
func (*ThankYouContent) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{28}
}

// Opaque cursor used across paged APIs. Underlying bytes may change as paging
// strategies evolve.
type Cursor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Cursor) Reset() {
	*x = Cursor{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Cursor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cursor) ProtoMessage() {}

func (x *Cursor) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cursor.ProtoReflect.Descriptor instead.
func (*Cursor) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{29}
}

func (x *Cursor) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

var File_chat_v1_chat_service_proto protoreflect.FileDescriptor

var file_chat_v1_chat_service_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x63, 0x6f,
	0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x15, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x28, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76,
	0x32, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd0, 0x02, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x05, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01,
	0x02, 0x10, 0x01, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02,
	0x10, 0x01, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x24, 0x0a,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x18, 0x64, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f,
	0x72, 0x12, 0x45, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x1e, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x53, 0x43, 0x10, 0x00, 0x12, 0x08,
	0x0a, 0x04, 0x44, 0x45, 0x53, 0x43, 0x10, 0x01, 0x22, 0xb0, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3c, 0x0a, 0x05,
	0x63, 0x68, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08,
	0x00, 0x10, 0x64, 0x52, 0x05, 0x63, 0x68, 0x61, 0x74, 0x73, 0x22, 0x1f, 0x0a, 0x06, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09,
	0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x22, 0x8f, 0x03, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x37, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01,
	0x02, 0x10, 0x01, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x05, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61,
	0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x24, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x18, 0x64, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x52, 0x06, 0x63, 0x75, 0x72,
	0x73, 0x6f, 0x72, 0x12, 0x48, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x1e, 0x0a,
	0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x53,
	0x43, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x45, 0x53, 0x43, 0x10, 0x01, 0x22, 0xbb, 0x01,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x41, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x00, 0x10, 0x64,
	0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x1f, 0x0a, 0x06, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09,
	0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x22, 0x8f, 0x02, 0x0a, 0x15,
	0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x39,
	0x0a, 0x07, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x07, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x05, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01,
	0x02, 0x10, 0x01, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02,
	0x10, 0x01, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x9a, 0x01,
	0x0a, 0x16, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x3b, 0x0a,
	0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12,
	0x12, 0x0a, 0x0e, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e,
	0x44, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x22, 0xed, 0x01, 0x0a, 0x13, 0x53,
	0x65, 0x74, 0x4d, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x37, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01,
	0x02, 0x10, 0x01, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69,
	0x73, 0x5f, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69,
	0x73, 0x4d, 0x75, 0x74, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x14, 0x53,
	0x65, 0x74, 0x4d, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x33, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x48, 0x41, 0x54,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09,
	0x43, 0x41, 0x4e, 0x54, 0x5f, 0x4d, 0x55, 0x54, 0x45, 0x10, 0x02, 0x22, 0xff, 0x01, 0x0a, 0x1b,
	0x53, 0x65, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x07, 0x63,
	0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x74,
	0x49, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x63, 0x68,
	0x61, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x05, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01,
	0x02, 0x10, 0x01, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02,
	0x10, 0x01, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xa5, 0x01,
	0x0a, 0x1c, 0x53, 0x65, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x3a, 0x0a, 0x06, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x43,
	0x48, 0x41, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x12,
	0x14, 0x0a, 0x10, 0x43, 0x41, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52,
	0x49, 0x42, 0x45, 0x10, 0x02, 0x22, 0xd2, 0x01, 0x0a, 0x13, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x68,
	0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x37, 0x0a,
	0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68,
	0x61, 0x74, 0x49, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06,
	0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x0f, 0x43,
	0x68, 0x61, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3f,
	0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x92, 0x01, 0x02, 0x10, 0x64, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x3b, 0x0a, 0x08, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02,
	0x10, 0x64, 0x52, 0x08, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x22, 0x5a, 0x0a, 0x14,
	0x43, 0x68, 0x61, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x12, 0x42, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x92, 0x01, 0x05, 0x08, 0x01, 0x10, 0x80, 0x08,
	0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x9e, 0x01, 0x0a, 0x17, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x68, 0x61,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x48, 0x00, 0x52, 0x0a,
	0x6f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x30, 0x0a, 0x04, 0x70, 0x6f,
	0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x50, 0x6f, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x42, 0x0b, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0x97, 0x01, 0x0a, 0x18, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x48, 0x00, 0x52, 0x06, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x69, 0x6e, 0x67, 0x48, 0x00,
	0x52, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x42, 0x0b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x03,
	0xf8, 0x42, 0x01, 0x22, 0x8e, 0x02, 0x0a, 0x12, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e,
	0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01,
	0x02, 0x10, 0x01, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x37,
	0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x68, 0x61, 0x74, 0x49, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52,
	0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42,
	0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x22, 0x9e, 0x01, 0x0a, 0x13, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x33,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x10, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a,
	0x02, 0x4f, 0x4b, 0x10, 0x00, 0x22, 0x29, 0x0a, 0x06, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x09,
	0xfa, 0x42, 0x06, 0x7a, 0x04, 0x10, 0x20, 0x18, 0x20, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x30, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x42, 0x09, 0xfa, 0x42, 0x06, 0x7a, 0x04, 0x10, 0x20, 0x18, 0x40, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x2f, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x7a, 0x04, 0x10, 0x20, 0x18, 0x20, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xde, 0x01, 0x0a, 0x07, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x12,
	0x2e, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12,
	0x3b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68,
	0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x36, 0x0a, 0x04,
	0x4b, 0x69, 0x6e, 0x64, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x45, 0x41, 0x44, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x44,
	0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x45, 0x44, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x45,
	0x4e, 0x54, 0x10, 0x03, 0x22, 0xf9, 0x03, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x37, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x44,
	0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x06,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x38, 0x0a, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x52, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x5f, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x69, 0x73, 0x4d, 0x75, 0x74, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73,
	0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x69, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x63, 0x61, 0x6e, 0x5f, 0x6d, 0x75, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x63, 0x61, 0x6e, 0x4d, 0x75, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x61,
	0x6e, 0x5f, 0x75, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x61, 0x6e, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f,
	0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x42, 0x0c, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x03, 0xf8, 0x42, 0x01,
	0x22, 0xa8, 0x02, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x44, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x09, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0xb2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x02, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x0a,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x06, 0x63, 0x75, 0x72,
	0x73, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x52,
	0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x49, 0x64, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x22, 0xe6, 0x02, 0x0a, 0x07,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x51, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x48, 0x0a, 0x0d, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x08, 0x6e, 0x61, 0x63, 0x6c, 0x5f, 0x62, 0x6f, 0x78,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x63, 0x6c, 0x42, 0x6f, 0x78, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x07, 0x6e, 0x61, 0x63, 0x6c, 0x42, 0x6f, 0x78, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x3c, 0x0a, 0x09, 0x74, 0x68, 0x61,
	0x6e, 0x6b, 0x5f, 0x79, 0x6f, 0x75, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x68, 0x61, 0x6e,
	0x6b, 0x59, 0x6f, 0x75, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x08, 0x74,
	0x68, 0x61, 0x6e, 0x6b, 0x59, 0x6f, 0x75, 0x42, 0x0b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x03, 0xf8, 0x42, 0x01, 0x22, 0x44, 0x0a, 0x16, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x2a,
	0x0a, 0x0b, 0x6b, 0x65, 0x79, 0x5f, 0x6f, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0x80, 0x08, 0x52,
	0x09, 0x6b, 0x65, 0x79, 0x4f, 0x72, 0x54, 0x65, 0x78, 0x74, 0x22, 0x93, 0x03, 0x0a, 0x13, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x04, 0x76, 0x65, 0x72, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x26, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x2e, 0x56, 0x65, 0x72, 0x62, 0x52, 0x04, 0x76, 0x65, 0x72, 0x62, 0x12, 0x39,
	0x0a, 0x05, 0x65, 0x78, 0x61, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x32, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x48, 0x00, 0x52, 0x05, 0x65, 0x78, 0x61, 0x63, 0x74, 0x12, 0x48, 0x0a, 0x07, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32,
	0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x57, 0x69, 0x74,
	0x68, 0x6f, 0x75, 0x74, 0x52, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x22, 0xa4, 0x01, 0x0a, 0x04, 0x56, 0x65, 0x72, 0x62, 0x12, 0x0b, 0x0a, 0x07,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x47, 0x41, 0x56,
	0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x44, 0x10,
	0x02, 0x12, 0x0c, 0x0a, 0x08, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x45, 0x57, 0x10, 0x03, 0x12,
	0x0d, 0x0a, 0x09, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x08,
	0x0a, 0x04, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x54, 0x55,
	0x52, 0x4e, 0x45, 0x44, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x50, 0x45, 0x4e, 0x54, 0x10,
	0x07, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x41, 0x49, 0x44, 0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x50,
	0x55, 0x52, 0x43, 0x48, 0x41, 0x53, 0x45, 0x44, 0x10, 0x09, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45,
	0x43, 0x45, 0x49, 0x56, 0x45, 0x44, 0x5f, 0x54, 0x49, 0x50, 0x10, 0x0a, 0x12, 0x0c, 0x0a, 0x08,
	0x53, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x49, 0x50, 0x10, 0x0b, 0x42, 0x14, 0x0a, 0x0d, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x12, 0x03, 0xf8, 0x42, 0x01,
	0x22, 0xc6, 0x01, 0x0a, 0x17, 0x4e, 0x61, 0x63, 0x6c, 0x42, 0x6f, 0x78, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x51, 0x0a, 0x0f,
	0x70, 0x65, 0x65, 0x72, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x0d, 0x70, 0x65, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12,
	0x1f, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x09,
	0xfa, 0x42, 0x06, 0x7a, 0x04, 0x10, 0x18, 0x18, 0x18, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65,
	0x12, 0x37, 0x0a, 0x11, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x0a, 0xfa, 0x42, 0x07,
	0x7a, 0x05, 0x10, 0x01, 0x18, 0x80, 0x08, 0x52, 0x10, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x65, 0x64, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x2d, 0x0a, 0x0b, 0x54, 0x65, 0x78,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18,
	0x80, 0x08, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x11, 0x0a, 0x0f, 0x54, 0x68, 0x61, 0x6e,
	0x6b, 0x59, 0x6f, 0x75, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x29, 0x0a, 0x06, 0x43,
	0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x7a, 0x04, 0x10, 0x08, 0x18, 0x40, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x83, 0x05, 0x0a, 0x04, 0x43, 0x68, 0x61, 0x74, 0x12,
	0x49, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x73, 0x12, 0x1d, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x0b, 0x47, 0x65,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x20, 0x2e, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b,
	0x0a, 0x0e, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x12, 0x23, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x0c, 0x53,
	0x65, 0x74, 0x4d, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x75,
	0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x74, 0x4d, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x6d, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x29, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x65, 0x0a, 0x10, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x25, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x52, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x20, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6b, 0x0a, 0x17,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x65, 0x6e, 0x2e,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x5a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x2d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2d,
	0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x67, 0x6f,
	0x2f, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x76, 0x31, 0x3b, 0x63, 0x68, 0x61, 0x74, 0xa2, 0x02, 0x09,
	0x43, 0x50, 0x42, 0x43, 0x68, 0x61, 0x74, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_chat_v1_chat_service_proto_rawDescOnce sync.Once
	file_chat_v1_chat_service_proto_rawDescData = file_chat_v1_chat_service_proto_rawDesc
)

func file_chat_v1_chat_service_proto_rawDescGZIP() []byte {
	file_chat_v1_chat_service_proto_rawDescOnce.Do(func() {
		file_chat_v1_chat_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_chat_v1_chat_service_proto_rawDescData)
	})
	return file_chat_v1_chat_service_proto_rawDescData
}

var file_chat_v1_chat_service_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_chat_v1_chat_service_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_chat_v1_chat_service_proto_goTypes = []any{
	(GetChatsRequest_Direction)(0),           // 0: code.chat.v1.GetChatsRequest.Direction
	(GetChatsResponse_Result)(0),             // 1: code.chat.v1.GetChatsResponse.Result
	(GetMessagesRequest_Direction)(0),        // 2: code.chat.v1.GetMessagesRequest.Direction
	(GetMessagesResponse_Result)(0),          // 3: code.chat.v1.GetMessagesResponse.Result
	(AdvancePointerResponse_Result)(0),       // 4: code.chat.v1.AdvancePointerResponse.Result
	(SetMuteStateResponse_Result)(0),         // 5: code.chat.v1.SetMuteStateResponse.Result
	(SetSubscriptionStateResponse_Result)(0), // 6: code.chat.v1.SetSubscriptionStateResponse.Result
	(SendMessageResponse_Result)(0),          // 7: code.chat.v1.SendMessageResponse.Result
	(Pointer_Kind)(0),                        // 8: code.chat.v1.Pointer.Kind
	(ExchangeDataContent_Verb)(0),            // 9: code.chat.v1.ExchangeDataContent.Verb
	(*GetChatsRequest)(nil),                  // 10: code.chat.v1.GetChatsRequest
	(*GetChatsResponse)(nil),                 // 11: code.chat.v1.GetChatsResponse
	(*GetMessagesRequest)(nil),               // 12: code.chat.v1.GetMessagesRequest
	(*GetMessagesResponse)(nil),              // 13: code.chat.v1.GetMessagesResponse
	(*AdvancePointerRequest)(nil),            // 14: code.chat.v1.AdvancePointerRequest
	(*AdvancePointerResponse)(nil),           // 15: code.chat.v1.AdvancePointerResponse
	(*SetMuteStateRequest)(nil),              // 16: code.chat.v1.SetMuteStateRequest
	(*SetMuteStateResponse)(nil),             // 17: code.chat.v1.SetMuteStateResponse
	(*SetSubscriptionStateRequest)(nil),      // 18: code.chat.v1.SetSubscriptionStateRequest
	(*SetSubscriptionStateResponse)(nil),     // 19: code.chat.v1.SetSubscriptionStateResponse
	(*OpenChatEventStream)(nil),              // 20: code.chat.v1.OpenChatEventStream
	(*ChatStreamEvent)(nil),                  // 21: code.chat.v1.ChatStreamEvent
	(*ChatStreamEventBatch)(nil),             // 22: code.chat.v1.ChatStreamEventBatch
	(*StreamChatEventsRequest)(nil),          // 23: code.chat.v1.StreamChatEventsRequest
	(*StreamChatEventsResponse)(nil),         // 24: code.chat.v1.StreamChatEventsResponse
	(*SendMessageRequest)(nil),               // 25: code.chat.v1.SendMessageRequest
	(*SendMessageResponse)(nil),              // 26: code.chat.v1.SendMessageResponse
	(*ChatId)(nil),                           // 27: code.chat.v1.ChatId
	(*ChatMessageId)(nil),                    // 28: code.chat.v1.ChatMessageId
	(*ChatMemberId)(nil),                     // 29: code.chat.v1.ChatMemberId
	(*Pointer)(nil),                          // 30: code.chat.v1.Pointer
	(*ChatMetadata)(nil),                     // 31: code.chat.v1.ChatMetadata
	(*ChatMessage)(nil),                      // 32: code.chat.v1.ChatMessage
	(*Content)(nil),                          // 33: code.chat.v1.Content
	(*ServerLocalizedContent)(nil),           // 34: code.chat.v1.ServerLocalizedContent
	(*ExchangeDataContent)(nil),              // 35: code.chat.v1.ExchangeDataContent
	(*NaclBoxEncryptedContent)(nil),          // 36: code.chat.v1.NaclBoxEncryptedContent
	(*TextContent)(nil),                      // 37: code.chat.v1.TextContent
	(*ThankYouContent)(nil),                  // 38: code.chat.v1.ThankYouContent
	(*Cursor)(nil),                           // 39: code.chat.v1.Cursor
	(*v1.SolanaAccountId)(nil),               // 40: code.common.v1.SolanaAccountId
	(*v1.Signature)(nil),                     // 41: code.common.v1.Signature
	(*v1.ClientPong)(nil),                    // 42: code.common.v1.ClientPong
	(*v1.ServerPing)(nil),                    // 43: code.common.v1.ServerPing
	(*v1.Domain)(nil),                        // 44: code.common.v1.Domain
	(*timestamppb.Timestamp)(nil),            // 45: google.protobuf.Timestamp
	(*v2.ExchangeData)(nil),                  // 46: code.transaction.v2.ExchangeData
	(*v2.ExchangeDataWithoutRate)(nil),       // 47: code.transaction.v2.ExchangeDataWithoutRate
}
var file_chat_v1_chat_service_proto_depIdxs = []int32{
	40, // 0: code.chat.v1.GetChatsRequest.owner:type_name -> code.common.v1.SolanaAccountId
	41, // 1: code.chat.v1.GetChatsRequest.signature:type_name -> code.common.v1.Signature
	39, // 2: code.chat.v1.GetChatsRequest.cursor:type_name -> code.chat.v1.Cursor
	0,  // 3: code.chat.v1.GetChatsRequest.direction:type_name -> code.chat.v1.GetChatsRequest.Direction
	1,  // 4: code.chat.v1.GetChatsResponse.result:type_name -> code.chat.v1.GetChatsResponse.Result
	31, // 5: code.chat.v1.GetChatsResponse.chats:type_name -> code.chat.v1.ChatMetadata
	27, // 6: code.chat.v1.GetMessagesRequest.chat_id:type_name -> code.chat.v1.ChatId
	40, // 7: code.chat.v1.GetMessagesRequest.owner:type_name -> code.common.v1.SolanaAccountId
	41, // 8: code.chat.v1.GetMessagesRequest.signature:type_name -> code.common.v1.Signature
	39, // 9: code.chat.v1.GetMessagesRequest.cursor:type_name -> code.chat.v1.Cursor
	2,  // 10: code.chat.v1.GetMessagesRequest.direction:type_name -> code.chat.v1.GetMessagesRequest.Direction
	3,  // 11: code.chat.v1.GetMessagesResponse.result:type_name -> code.chat.v1.GetMessagesResponse.Result
	32, // 12: code.chat.v1.GetMessagesResponse.messages:type_name -> code.chat.v1.ChatMessage
	27, // 13: code.chat.v1.AdvancePointerRequest.chat_id:type_name -> code.chat.v1.ChatId
	30, // 14: code.chat.v1.AdvancePointerRequest.pointer:type_name -> code.chat.v1.Pointer
	40, // 15: code.chat.v1.AdvancePointerRequest.owner:type_name -> code.common.v1.SolanaAccountId
	41, // 16: code.chat.v1.AdvancePointerRequest.signature:type_name -> code.common.v1.Signature
	4,  // 17: code.chat.v1.AdvancePointerResponse.result:type_name -> code.chat.v1.AdvancePointerResponse.Result
	27, // 18: code.chat.v1.SetMuteStateRequest.chat_id:type_name -> code.chat.v1.ChatId
	40, // 19: code.chat.v1.SetMuteStateRequest.owner:type_name -> code.common.v1.SolanaAccountId
	41, // 20: code.chat.v1.SetMuteStateRequest.signature:type_name -> code.common.v1.Signature
	5,  // 21: code.chat.v1.SetMuteStateResponse.result:type_name -> code.chat.v1.SetMuteStateResponse.Result
	27, // 22: code.chat.v1.SetSubscriptionStateRequest.chat_id:type_name -> code.chat.v1.ChatId
	40, // 23: code.chat.v1.SetSubscriptionStateRequest.owner:type_name -> code.common.v1.SolanaAccountId
	41, // 24: code.chat.v1.SetSubscriptionStateRequest.signature:type_name -> code.common.v1.Signature
	6,  // 25: code.chat.v1.SetSubscriptionStateResponse.result:type_name -> code.chat.v1.SetSubscriptionStateResponse.Result
	27, // 26: code.chat.v1.OpenChatEventStream.chat_id:type_name -> code.chat.v1.ChatId
	40, // 27: code.chat.v1.OpenChatEventStream.owner:type_name -> code.common.v1.SolanaAccountId
	41, // 28: code.chat.v1.OpenChatEventStream.signature:type_name -> code.common.v1.Signature
	32, // 29: code.chat.v1.ChatStreamEvent.messages:type_name -> code.chat.v1.ChatMessage
	30, // 30: code.chat.v1.ChatStreamEvent.pointers:type_name -> code.chat.v1.Pointer
	21, // 31: code.chat.v1.ChatStreamEventBatch.events:type_name -> code.chat.v1.ChatStreamEvent
	20, // 32: code.chat.v1.StreamChatEventsRequest.open_stream:type_name -> code.chat.v1.OpenChatEventStream
	42, // 33: code.chat.v1.StreamChatEventsRequest.pong:type_name -> code.common.v1.ClientPong
	22, // 34: code.chat.v1.StreamChatEventsResponse.events:type_name -> code.chat.v1.ChatStreamEventBatch
	43, // 35: code.chat.v1.StreamChatEventsResponse.ping:type_name -> code.common.v1.ServerPing
	40, // 36: code.chat.v1.SendMessageRequest.owner:type_name -> code.common.v1.SolanaAccountId
	41, // 37: code.chat.v1.SendMessageRequest.signature:type_name -> code.common.v1.Signature
	27, // 38: code.chat.v1.SendMessageRequest.chat_id:type_name -> code.chat.v1.ChatId
	33, // 39: code.chat.v1.SendMessageRequest.content:type_name -> code.chat.v1.Content
	7,  // 40: code.chat.v1.SendMessageResponse.result:type_name -> code.chat.v1.SendMessageResponse.Result
	32, // 41: code.chat.v1.SendMessageResponse.message:type_name -> code.chat.v1.ChatMessage
	8,  // 42: code.chat.v1.Pointer.kind:type_name -> code.chat.v1.Pointer.Kind
	28, // 43: code.chat.v1.Pointer.value:type_name -> code.chat.v1.ChatMessageId
	29, // 44: code.chat.v1.Pointer.user:type_name -> code.chat.v1.ChatMemberId
	27, // 45: code.chat.v1.ChatMetadata.chat_id:type_name -> code.chat.v1.ChatId
	34, // 46: code.chat.v1.ChatMetadata.localized:type_name -> code.chat.v1.ServerLocalizedContent
	44, // 47: code.chat.v1.ChatMetadata.domain:type_name -> code.common.v1.Domain
	30, // 48: code.chat.v1.ChatMetadata.read_pointer:type_name -> code.chat.v1.Pointer
	39, // 49: code.chat.v1.ChatMetadata.cursor:type_name -> code.chat.v1.Cursor
	28, // 50: code.chat.v1.ChatMessage.message_id:type_name -> code.chat.v1.ChatMessageId
	45, // 51: code.chat.v1.ChatMessage.ts:type_name -> google.protobuf.Timestamp
	33, // 52: code.chat.v1.ChatMessage.content:type_name -> code.chat.v1.Content
	39, // 53: code.chat.v1.ChatMessage.cursor:type_name -> code.chat.v1.Cursor
	29, // 54: code.chat.v1.ChatMessage.sender:type_name -> code.chat.v1.ChatMemberId
	34, // 55: code.chat.v1.Content.server_localized:type_name -> code.chat.v1.ServerLocalizedContent
	35, // 56: code.chat.v1.Content.exchange_data:type_name -> code.chat.v1.ExchangeDataContent
	36, // 57: code.chat.v1.Content.nacl_box:type_name -> code.chat.v1.NaclBoxEncryptedContent
	37, // 58: code.chat.v1.Content.text:type_name -> code.chat.v1.TextContent
	38, // 59: code.chat.v1.Content.thank_you:type_name -> code.chat.v1.ThankYouContent
	9,  // 60: code.chat.v1.ExchangeDataContent.verb:type_name -> code.chat.v1.ExchangeDataContent.Verb
	46, // 61: code.chat.v1.ExchangeDataContent.exact:type_name -> code.transaction.v2.ExchangeData
	47, // 62: code.chat.v1.ExchangeDataContent.partial:type_name -> code.transaction.v2.ExchangeDataWithoutRate
	40, // 63: code.chat.v1.NaclBoxEncryptedContent.peer_public_key:type_name -> code.common.v1.SolanaAccountId
	10, // 64: code.chat.v1.Chat.GetChats:input_type -> code.chat.v1.GetChatsRequest
	12, // 65: code.chat.v1.Chat.GetMessages:input_type -> code.chat.v1.GetMessagesRequest
	14, // 66: code.chat.v1.Chat.AdvancePointer:input_type -> code.chat.v1.AdvancePointerRequest
	16, // 67: code.chat.v1.Chat.SetMuteState:input_type -> code.chat.v1.SetMuteStateRequest
	18, // 68: code.chat.v1.Chat.SetSubscriptionState:input_type -> code.chat.v1.SetSubscriptionStateRequest
	23, // 69: code.chat.v1.Chat.StreamChatEvents:input_type -> code.chat.v1.StreamChatEventsRequest
	25, // 70: code.chat.v1.Chat.SendMessage:input_type -> code.chat.v1.SendMessageRequest
	11, // 71: code.chat.v1.Chat.GetChats:output_type -> code.chat.v1.GetChatsResponse
	13, // 72: code.chat.v1.Chat.GetMessages:output_type -> code.chat.v1.GetMessagesResponse
	15, // 73: code.chat.v1.Chat.AdvancePointer:output_type -> code.chat.v1.AdvancePointerResponse
	17, // 74: code.chat.v1.Chat.SetMuteState:output_type -> code.chat.v1.SetMuteStateResponse
	19, // 75: code.chat.v1.Chat.SetSubscriptionState:output_type -> code.chat.v1.SetSubscriptionStateResponse
	24, // 76: code.chat.v1.Chat.StreamChatEvents:output_type -> code.chat.v1.StreamChatEventsResponse
	26, // 77: code.chat.v1.Chat.SendMessage:output_type -> code.chat.v1.SendMessageResponse
	71, // [71:78] is the sub-list for method output_type
	64, // [64:71] is the sub-list for method input_type
	64, // [64:64] is the sub-list for extension type_name
	64, // [64:64] is the sub-list for extension extendee
	0,  // [0:64] is the sub-list for field type_name
}

func init() { file_chat_v1_chat_service_proto_init() }
func file_chat_v1_chat_service_proto_init() {
	if File_chat_v1_chat_service_proto != nil {
		return
	}
	file_chat_v1_chat_service_proto_msgTypes[13].OneofWrappers = []any{
		(*StreamChatEventsRequest_OpenStream)(nil),
		(*StreamChatEventsRequest_Pong)(nil),
	}
	file_chat_v1_chat_service_proto_msgTypes[14].OneofWrappers = []any{
		(*StreamChatEventsResponse_Events)(nil),
		(*StreamChatEventsResponse_Ping)(nil),
	}
	file_chat_v1_chat_service_proto_msgTypes[21].OneofWrappers = []any{
		(*ChatMetadata_Localized)(nil),
		(*ChatMetadata_Domain)(nil),
	}
	file_chat_v1_chat_service_proto_msgTypes[23].OneofWrappers = []any{
		(*Content_ServerLocalized)(nil),
		(*Content_ExchangeData)(nil),
		(*Content_NaclBox)(nil),
		(*Content_Text)(nil),
		(*Content_ThankYou)(nil),
	}
	file_chat_v1_chat_service_proto_msgTypes[25].OneofWrappers = []any{
		(*ExchangeDataContent_Exact)(nil),
		(*ExchangeDataContent_Partial)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chat_v1_chat_service_proto_rawDesc,
			NumEnums:      10,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_chat_v1_chat_service_proto_goTypes,
		DependencyIndexes: file_chat_v1_chat_service_proto_depIdxs,
		EnumInfos:         file_chat_v1_chat_service_proto_enumTypes,
		MessageInfos:      file_chat_v1_chat_service_proto_msgTypes,
	}.Build()
	File_chat_v1_chat_service_proto = out.File
	file_chat_v1_chat_service_proto_rawDesc = nil
	file_chat_v1_chat_service_proto_goTypes = nil
	file_chat_v1_chat_service_proto_depIdxs = nil
}
