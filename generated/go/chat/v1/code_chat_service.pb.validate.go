// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: chat/v1/code_chat_service.proto

package chat

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetChatsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetChatsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetChatsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetChatsRequestMultiError, or nil if none found.
func (m *GetChatsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetChatsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOwner() == nil {
		err := GetChatsRequestValidationError{
			field:  "Owner",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetOwner()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetChatsRequestValidationError{
					field:  "Owner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetChatsRequestValidationError{
					field:  "Owner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOwner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetChatsRequestValidationError{
				field:  "Owner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetSignature() == nil {
		err := GetChatsRequestValidationError{
			field:  "Signature",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetSignature()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetChatsRequestValidationError{
					field:  "Signature",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetChatsRequestValidationError{
					field:  "Signature",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSignature()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetChatsRequestValidationError{
				field:  "Signature",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPageSize() > 100 {
		err := GetChatsRequestValidationError{
			field:  "PageSize",
			reason: "value must be less than or equal to 100",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCursor()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetChatsRequestValidationError{
					field:  "Cursor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetChatsRequestValidationError{
					field:  "Cursor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCursor()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetChatsRequestValidationError{
				field:  "Cursor",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Direction

	if len(errors) > 0 {
		return GetChatsRequestMultiError(errors)
	}

	return nil
}

// GetChatsRequestMultiError is an error wrapping multiple validation errors
// returned by GetChatsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetChatsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetChatsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetChatsRequestMultiError) AllErrors() []error { return m }

// GetChatsRequestValidationError is the validation error returned by
// GetChatsRequest.Validate if the designated constraints aren't met.
type GetChatsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetChatsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetChatsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetChatsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetChatsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetChatsRequestValidationError) ErrorName() string { return "GetChatsRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetChatsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetChatsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetChatsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetChatsRequestValidationError{}

// Validate checks the field values on GetChatsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetChatsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetChatsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetChatsResponseMultiError, or nil if none found.
func (m *GetChatsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetChatsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(m.GetChats()) > 100 {
		err := GetChatsResponseValidationError{
			field:  "Chats",
			reason: "value must contain no more than 100 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetChats() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetChatsResponseValidationError{
						field:  fmt.Sprintf("Chats[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetChatsResponseValidationError{
						field:  fmt.Sprintf("Chats[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetChatsResponseValidationError{
					field:  fmt.Sprintf("Chats[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetChatsResponseMultiError(errors)
	}

	return nil
}

// GetChatsResponseMultiError is an error wrapping multiple validation errors
// returned by GetChatsResponse.ValidateAll() if the designated constraints
// aren't met.
type GetChatsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetChatsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetChatsResponseMultiError) AllErrors() []error { return m }

// GetChatsResponseValidationError is the validation error returned by
// GetChatsResponse.Validate if the designated constraints aren't met.
type GetChatsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetChatsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetChatsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetChatsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetChatsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetChatsResponseValidationError) ErrorName() string { return "GetChatsResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetChatsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetChatsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetChatsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetChatsResponseValidationError{}

// Validate checks the field values on GetMessagesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMessagesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMessagesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMessagesRequestMultiError, or nil if none found.
func (m *GetMessagesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMessagesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetChatId() == nil {
		err := GetMessagesRequestValidationError{
			field:  "ChatId",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetChatId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetMessagesRequestValidationError{
					field:  "ChatId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetMessagesRequestValidationError{
					field:  "ChatId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetChatId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMessagesRequestValidationError{
				field:  "ChatId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetOwner() == nil {
		err := GetMessagesRequestValidationError{
			field:  "Owner",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetOwner()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetMessagesRequestValidationError{
					field:  "Owner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetMessagesRequestValidationError{
					field:  "Owner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOwner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMessagesRequestValidationError{
				field:  "Owner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetSignature() == nil {
		err := GetMessagesRequestValidationError{
			field:  "Signature",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetSignature()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetMessagesRequestValidationError{
					field:  "Signature",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetMessagesRequestValidationError{
					field:  "Signature",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSignature()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMessagesRequestValidationError{
				field:  "Signature",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPageSize() > 100 {
		err := GetMessagesRequestValidationError{
			field:  "PageSize",
			reason: "value must be less than or equal to 100",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCursor()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetMessagesRequestValidationError{
					field:  "Cursor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetMessagesRequestValidationError{
					field:  "Cursor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCursor()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMessagesRequestValidationError{
				field:  "Cursor",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Direction

	if len(errors) > 0 {
		return GetMessagesRequestMultiError(errors)
	}

	return nil
}

// GetMessagesRequestMultiError is an error wrapping multiple validation errors
// returned by GetMessagesRequest.ValidateAll() if the designated constraints
// aren't met.
type GetMessagesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMessagesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMessagesRequestMultiError) AllErrors() []error { return m }

// GetMessagesRequestValidationError is the validation error returned by
// GetMessagesRequest.Validate if the designated constraints aren't met.
type GetMessagesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMessagesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMessagesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMessagesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMessagesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMessagesRequestValidationError) ErrorName() string {
	return "GetMessagesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMessagesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMessagesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMessagesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMessagesRequestValidationError{}

// Validate checks the field values on GetMessagesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMessagesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMessagesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMessagesResponseMultiError, or nil if none found.
func (m *GetMessagesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMessagesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(m.GetMessages()) > 100 {
		err := GetMessagesResponseValidationError{
			field:  "Messages",
			reason: "value must contain no more than 100 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetMessages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetMessagesResponseValidationError{
						field:  fmt.Sprintf("Messages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetMessagesResponseValidationError{
						field:  fmt.Sprintf("Messages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetMessagesResponseValidationError{
					field:  fmt.Sprintf("Messages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetMessagesResponseMultiError(errors)
	}

	return nil
}

// GetMessagesResponseMultiError is an error wrapping multiple validation
// errors returned by GetMessagesResponse.ValidateAll() if the designated
// constraints aren't met.
type GetMessagesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMessagesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMessagesResponseMultiError) AllErrors() []error { return m }

// GetMessagesResponseValidationError is the validation error returned by
// GetMessagesResponse.Validate if the designated constraints aren't met.
type GetMessagesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMessagesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMessagesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMessagesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMessagesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMessagesResponseValidationError) ErrorName() string {
	return "GetMessagesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMessagesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMessagesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMessagesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMessagesResponseValidationError{}

// Validate checks the field values on AdvancePointerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdvancePointerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdvancePointerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdvancePointerRequestMultiError, or nil if none found.
func (m *AdvancePointerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdvancePointerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetChatId() == nil {
		err := AdvancePointerRequestValidationError{
			field:  "ChatId",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetChatId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdvancePointerRequestValidationError{
					field:  "ChatId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdvancePointerRequestValidationError{
					field:  "ChatId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetChatId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdvancePointerRequestValidationError{
				field:  "ChatId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPointer() == nil {
		err := AdvancePointerRequestValidationError{
			field:  "Pointer",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPointer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdvancePointerRequestValidationError{
					field:  "Pointer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdvancePointerRequestValidationError{
					field:  "Pointer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPointer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdvancePointerRequestValidationError{
				field:  "Pointer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetOwner() == nil {
		err := AdvancePointerRequestValidationError{
			field:  "Owner",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetOwner()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdvancePointerRequestValidationError{
					field:  "Owner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdvancePointerRequestValidationError{
					field:  "Owner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOwner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdvancePointerRequestValidationError{
				field:  "Owner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetSignature() == nil {
		err := AdvancePointerRequestValidationError{
			field:  "Signature",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetSignature()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdvancePointerRequestValidationError{
					field:  "Signature",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdvancePointerRequestValidationError{
					field:  "Signature",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSignature()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdvancePointerRequestValidationError{
				field:  "Signature",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AdvancePointerRequestMultiError(errors)
	}

	return nil
}

// AdvancePointerRequestMultiError is an error wrapping multiple validation
// errors returned by AdvancePointerRequest.ValidateAll() if the designated
// constraints aren't met.
type AdvancePointerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdvancePointerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdvancePointerRequestMultiError) AllErrors() []error { return m }

// AdvancePointerRequestValidationError is the validation error returned by
// AdvancePointerRequest.Validate if the designated constraints aren't met.
type AdvancePointerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdvancePointerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdvancePointerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdvancePointerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdvancePointerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdvancePointerRequestValidationError) ErrorName() string {
	return "AdvancePointerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AdvancePointerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdvancePointerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdvancePointerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdvancePointerRequestValidationError{}

// Validate checks the field values on AdvancePointerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdvancePointerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdvancePointerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdvancePointerResponseMultiError, or nil if none found.
func (m *AdvancePointerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AdvancePointerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return AdvancePointerResponseMultiError(errors)
	}

	return nil
}

// AdvancePointerResponseMultiError is an error wrapping multiple validation
// errors returned by AdvancePointerResponse.ValidateAll() if the designated
// constraints aren't met.
type AdvancePointerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdvancePointerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdvancePointerResponseMultiError) AllErrors() []error { return m }

// AdvancePointerResponseValidationError is the validation error returned by
// AdvancePointerResponse.Validate if the designated constraints aren't met.
type AdvancePointerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdvancePointerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdvancePointerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdvancePointerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdvancePointerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdvancePointerResponseValidationError) ErrorName() string {
	return "AdvancePointerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AdvancePointerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdvancePointerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdvancePointerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdvancePointerResponseValidationError{}

// Validate checks the field values on SetMuteStateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetMuteStateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetMuteStateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetMuteStateRequestMultiError, or nil if none found.
func (m *SetMuteStateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetMuteStateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetChatId() == nil {
		err := SetMuteStateRequestValidationError{
			field:  "ChatId",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetChatId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetMuteStateRequestValidationError{
					field:  "ChatId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetMuteStateRequestValidationError{
					field:  "ChatId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetChatId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetMuteStateRequestValidationError{
				field:  "ChatId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IsMuted

	if m.GetOwner() == nil {
		err := SetMuteStateRequestValidationError{
			field:  "Owner",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetOwner()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetMuteStateRequestValidationError{
					field:  "Owner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetMuteStateRequestValidationError{
					field:  "Owner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOwner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetMuteStateRequestValidationError{
				field:  "Owner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetSignature() == nil {
		err := SetMuteStateRequestValidationError{
			field:  "Signature",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetSignature()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetMuteStateRequestValidationError{
					field:  "Signature",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetMuteStateRequestValidationError{
					field:  "Signature",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSignature()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetMuteStateRequestValidationError{
				field:  "Signature",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SetMuteStateRequestMultiError(errors)
	}

	return nil
}

// SetMuteStateRequestMultiError is an error wrapping multiple validation
// errors returned by SetMuteStateRequest.ValidateAll() if the designated
// constraints aren't met.
type SetMuteStateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetMuteStateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetMuteStateRequestMultiError) AllErrors() []error { return m }

// SetMuteStateRequestValidationError is the validation error returned by
// SetMuteStateRequest.Validate if the designated constraints aren't met.
type SetMuteStateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetMuteStateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetMuteStateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetMuteStateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetMuteStateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetMuteStateRequestValidationError) ErrorName() string {
	return "SetMuteStateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetMuteStateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetMuteStateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetMuteStateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetMuteStateRequestValidationError{}

// Validate checks the field values on SetMuteStateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetMuteStateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetMuteStateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetMuteStateResponseMultiError, or nil if none found.
func (m *SetMuteStateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetMuteStateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return SetMuteStateResponseMultiError(errors)
	}

	return nil
}

// SetMuteStateResponseMultiError is an error wrapping multiple validation
// errors returned by SetMuteStateResponse.ValidateAll() if the designated
// constraints aren't met.
type SetMuteStateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetMuteStateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetMuteStateResponseMultiError) AllErrors() []error { return m }

// SetMuteStateResponseValidationError is the validation error returned by
// SetMuteStateResponse.Validate if the designated constraints aren't met.
type SetMuteStateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetMuteStateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetMuteStateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetMuteStateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetMuteStateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetMuteStateResponseValidationError) ErrorName() string {
	return "SetMuteStateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetMuteStateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetMuteStateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetMuteStateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetMuteStateResponseValidationError{}

// Validate checks the field values on SetSubscriptionStateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetSubscriptionStateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetSubscriptionStateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetSubscriptionStateRequestMultiError, or nil if none found.
func (m *SetSubscriptionStateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetSubscriptionStateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetChatId() == nil {
		err := SetSubscriptionStateRequestValidationError{
			field:  "ChatId",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetChatId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetSubscriptionStateRequestValidationError{
					field:  "ChatId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetSubscriptionStateRequestValidationError{
					field:  "ChatId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetChatId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetSubscriptionStateRequestValidationError{
				field:  "ChatId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IsSubscribed

	if m.GetOwner() == nil {
		err := SetSubscriptionStateRequestValidationError{
			field:  "Owner",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetOwner()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetSubscriptionStateRequestValidationError{
					field:  "Owner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetSubscriptionStateRequestValidationError{
					field:  "Owner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOwner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetSubscriptionStateRequestValidationError{
				field:  "Owner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetSignature() == nil {
		err := SetSubscriptionStateRequestValidationError{
			field:  "Signature",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetSignature()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetSubscriptionStateRequestValidationError{
					field:  "Signature",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetSubscriptionStateRequestValidationError{
					field:  "Signature",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSignature()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetSubscriptionStateRequestValidationError{
				field:  "Signature",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SetSubscriptionStateRequestMultiError(errors)
	}

	return nil
}

// SetSubscriptionStateRequestMultiError is an error wrapping multiple
// validation errors returned by SetSubscriptionStateRequest.ValidateAll() if
// the designated constraints aren't met.
type SetSubscriptionStateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetSubscriptionStateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetSubscriptionStateRequestMultiError) AllErrors() []error { return m }

// SetSubscriptionStateRequestValidationError is the validation error returned
// by SetSubscriptionStateRequest.Validate if the designated constraints
// aren't met.
type SetSubscriptionStateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetSubscriptionStateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetSubscriptionStateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetSubscriptionStateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetSubscriptionStateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetSubscriptionStateRequestValidationError) ErrorName() string {
	return "SetSubscriptionStateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetSubscriptionStateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetSubscriptionStateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetSubscriptionStateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetSubscriptionStateRequestValidationError{}

// Validate checks the field values on SetSubscriptionStateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetSubscriptionStateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetSubscriptionStateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetSubscriptionStateResponseMultiError, or nil if none found.
func (m *SetSubscriptionStateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetSubscriptionStateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return SetSubscriptionStateResponseMultiError(errors)
	}

	return nil
}

// SetSubscriptionStateResponseMultiError is an error wrapping multiple
// validation errors returned by SetSubscriptionStateResponse.ValidateAll() if
// the designated constraints aren't met.
type SetSubscriptionStateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetSubscriptionStateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetSubscriptionStateResponseMultiError) AllErrors() []error { return m }

// SetSubscriptionStateResponseValidationError is the validation error returned
// by SetSubscriptionStateResponse.Validate if the designated constraints
// aren't met.
type SetSubscriptionStateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetSubscriptionStateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetSubscriptionStateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetSubscriptionStateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetSubscriptionStateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetSubscriptionStateResponseValidationError) ErrorName() string {
	return "SetSubscriptionStateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetSubscriptionStateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetSubscriptionStateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetSubscriptionStateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetSubscriptionStateResponseValidationError{}

// Validate checks the field values on OpenChatEventStream with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OpenChatEventStream) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OpenChatEventStream with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OpenChatEventStreamMultiError, or nil if none found.
func (m *OpenChatEventStream) ValidateAll() error {
	return m.validate(true)
}

func (m *OpenChatEventStream) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetChatId() == nil {
		err := OpenChatEventStreamValidationError{
			field:  "ChatId",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetChatId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OpenChatEventStreamValidationError{
					field:  "ChatId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OpenChatEventStreamValidationError{
					field:  "ChatId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetChatId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OpenChatEventStreamValidationError{
				field:  "ChatId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetOwner() == nil {
		err := OpenChatEventStreamValidationError{
			field:  "Owner",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetOwner()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OpenChatEventStreamValidationError{
					field:  "Owner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OpenChatEventStreamValidationError{
					field:  "Owner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOwner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OpenChatEventStreamValidationError{
				field:  "Owner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetSignature() == nil {
		err := OpenChatEventStreamValidationError{
			field:  "Signature",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetSignature()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OpenChatEventStreamValidationError{
					field:  "Signature",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OpenChatEventStreamValidationError{
					field:  "Signature",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSignature()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OpenChatEventStreamValidationError{
				field:  "Signature",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OpenChatEventStreamMultiError(errors)
	}

	return nil
}

// OpenChatEventStreamMultiError is an error wrapping multiple validation
// errors returned by OpenChatEventStream.ValidateAll() if the designated
// constraints aren't met.
type OpenChatEventStreamMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OpenChatEventStreamMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OpenChatEventStreamMultiError) AllErrors() []error { return m }

// OpenChatEventStreamValidationError is the validation error returned by
// OpenChatEventStream.Validate if the designated constraints aren't met.
type OpenChatEventStreamValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpenChatEventStreamValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpenChatEventStreamValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpenChatEventStreamValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpenChatEventStreamValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpenChatEventStreamValidationError) ErrorName() string {
	return "OpenChatEventStreamValidationError"
}

// Error satisfies the builtin error interface
func (e OpenChatEventStreamValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpenChatEventStream.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpenChatEventStreamValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpenChatEventStreamValidationError{}

// Validate checks the field values on ChatStreamEvent with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ChatStreamEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatStreamEvent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChatStreamEventMultiError, or nil if none found.
func (m *ChatStreamEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatStreamEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetMessages()) > 100 {
		err := ChatStreamEventValidationError{
			field:  "Messages",
			reason: "value must contain no more than 100 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetMessages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChatStreamEventValidationError{
						field:  fmt.Sprintf("Messages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChatStreamEventValidationError{
						field:  fmt.Sprintf("Messages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChatStreamEventValidationError{
					field:  fmt.Sprintf("Messages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(m.GetPointers()) > 100 {
		err := ChatStreamEventValidationError{
			field:  "Pointers",
			reason: "value must contain no more than 100 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetPointers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChatStreamEventValidationError{
						field:  fmt.Sprintf("Pointers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChatStreamEventValidationError{
						field:  fmt.Sprintf("Pointers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChatStreamEventValidationError{
					field:  fmt.Sprintf("Pointers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ChatStreamEventMultiError(errors)
	}

	return nil
}

// ChatStreamEventMultiError is an error wrapping multiple validation errors
// returned by ChatStreamEvent.ValidateAll() if the designated constraints
// aren't met.
type ChatStreamEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatStreamEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatStreamEventMultiError) AllErrors() []error { return m }

// ChatStreamEventValidationError is the validation error returned by
// ChatStreamEvent.Validate if the designated constraints aren't met.
type ChatStreamEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatStreamEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatStreamEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatStreamEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatStreamEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatStreamEventValidationError) ErrorName() string { return "ChatStreamEventValidationError" }

// Error satisfies the builtin error interface
func (e ChatStreamEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatStreamEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatStreamEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatStreamEventValidationError{}

// Validate checks the field values on ChatStreamEventBatch with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChatStreamEventBatch) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatStreamEventBatch with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChatStreamEventBatchMultiError, or nil if none found.
func (m *ChatStreamEventBatch) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatStreamEventBatch) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetEvents()); l < 1 || l > 1024 {
		err := ChatStreamEventBatchValidationError{
			field:  "Events",
			reason: "value must contain between 1 and 1024 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetEvents() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChatStreamEventBatchValidationError{
						field:  fmt.Sprintf("Events[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChatStreamEventBatchValidationError{
						field:  fmt.Sprintf("Events[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChatStreamEventBatchValidationError{
					field:  fmt.Sprintf("Events[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ChatStreamEventBatchMultiError(errors)
	}

	return nil
}

// ChatStreamEventBatchMultiError is an error wrapping multiple validation
// errors returned by ChatStreamEventBatch.ValidateAll() if the designated
// constraints aren't met.
type ChatStreamEventBatchMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatStreamEventBatchMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatStreamEventBatchMultiError) AllErrors() []error { return m }

// ChatStreamEventBatchValidationError is the validation error returned by
// ChatStreamEventBatch.Validate if the designated constraints aren't met.
type ChatStreamEventBatchValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatStreamEventBatchValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatStreamEventBatchValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatStreamEventBatchValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatStreamEventBatchValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatStreamEventBatchValidationError) ErrorName() string {
	return "ChatStreamEventBatchValidationError"
}

// Error satisfies the builtin error interface
func (e ChatStreamEventBatchValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatStreamEventBatch.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatStreamEventBatchValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatStreamEventBatchValidationError{}

// Validate checks the field values on StreamChatEventsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StreamChatEventsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StreamChatEventsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StreamChatEventsRequestMultiError, or nil if none found.
func (m *StreamChatEventsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamChatEventsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	oneofTypePresent := false
	switch v := m.Type.(type) {
	case *StreamChatEventsRequest_OpenStream:
		if v == nil {
			err := StreamChatEventsRequestValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofTypePresent = true

		if all {
			switch v := interface{}(m.GetOpenStream()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StreamChatEventsRequestValidationError{
						field:  "OpenStream",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StreamChatEventsRequestValidationError{
						field:  "OpenStream",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetOpenStream()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamChatEventsRequestValidationError{
					field:  "OpenStream",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StreamChatEventsRequest_Pong:
		if v == nil {
			err := StreamChatEventsRequestValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofTypePresent = true

		if all {
			switch v := interface{}(m.GetPong()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StreamChatEventsRequestValidationError{
						field:  "Pong",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StreamChatEventsRequestValidationError{
						field:  "Pong",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPong()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamChatEventsRequestValidationError{
					field:  "Pong",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofTypePresent {
		err := StreamChatEventsRequestValidationError{
			field:  "Type",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return StreamChatEventsRequestMultiError(errors)
	}

	return nil
}

// StreamChatEventsRequestMultiError is an error wrapping multiple validation
// errors returned by StreamChatEventsRequest.ValidateAll() if the designated
// constraints aren't met.
type StreamChatEventsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamChatEventsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamChatEventsRequestMultiError) AllErrors() []error { return m }

// StreamChatEventsRequestValidationError is the validation error returned by
// StreamChatEventsRequest.Validate if the designated constraints aren't met.
type StreamChatEventsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamChatEventsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamChatEventsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamChatEventsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamChatEventsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamChatEventsRequestValidationError) ErrorName() string {
	return "StreamChatEventsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StreamChatEventsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamChatEventsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamChatEventsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamChatEventsRequestValidationError{}

// Validate checks the field values on StreamChatEventsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StreamChatEventsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StreamChatEventsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StreamChatEventsResponseMultiError, or nil if none found.
func (m *StreamChatEventsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamChatEventsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	oneofTypePresent := false
	switch v := m.Type.(type) {
	case *StreamChatEventsResponse_Events:
		if v == nil {
			err := StreamChatEventsResponseValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofTypePresent = true

		if all {
			switch v := interface{}(m.GetEvents()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StreamChatEventsResponseValidationError{
						field:  "Events",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StreamChatEventsResponseValidationError{
						field:  "Events",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEvents()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamChatEventsResponseValidationError{
					field:  "Events",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StreamChatEventsResponse_Ping:
		if v == nil {
			err := StreamChatEventsResponseValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofTypePresent = true

		if all {
			switch v := interface{}(m.GetPing()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StreamChatEventsResponseValidationError{
						field:  "Ping",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StreamChatEventsResponseValidationError{
						field:  "Ping",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPing()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamChatEventsResponseValidationError{
					field:  "Ping",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofTypePresent {
		err := StreamChatEventsResponseValidationError{
			field:  "Type",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return StreamChatEventsResponseMultiError(errors)
	}

	return nil
}

// StreamChatEventsResponseMultiError is an error wrapping multiple validation
// errors returned by StreamChatEventsResponse.ValidateAll() if the designated
// constraints aren't met.
type StreamChatEventsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamChatEventsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamChatEventsResponseMultiError) AllErrors() []error { return m }

// StreamChatEventsResponseValidationError is the validation error returned by
// StreamChatEventsResponse.Validate if the designated constraints aren't met.
type StreamChatEventsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamChatEventsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamChatEventsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamChatEventsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamChatEventsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamChatEventsResponseValidationError) ErrorName() string {
	return "StreamChatEventsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StreamChatEventsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamChatEventsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamChatEventsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamChatEventsResponseValidationError{}

// Validate checks the field values on SendMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendMessageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendMessageRequestMultiError, or nil if none found.
func (m *SendMessageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendMessageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOwner() == nil {
		err := SendMessageRequestValidationError{
			field:  "Owner",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetOwner()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendMessageRequestValidationError{
					field:  "Owner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendMessageRequestValidationError{
					field:  "Owner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOwner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendMessageRequestValidationError{
				field:  "Owner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetSignature() == nil {
		err := SendMessageRequestValidationError{
			field:  "Signature",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetSignature()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendMessageRequestValidationError{
					field:  "Signature",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendMessageRequestValidationError{
					field:  "Signature",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSignature()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendMessageRequestValidationError{
				field:  "Signature",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetChatId() == nil {
		err := SendMessageRequestValidationError{
			field:  "ChatId",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetChatId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendMessageRequestValidationError{
					field:  "ChatId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendMessageRequestValidationError{
					field:  "ChatId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetChatId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendMessageRequestValidationError{
				field:  "ChatId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetContent()) != 1 {
		err := SendMessageRequestValidationError{
			field:  "Content",
			reason: "value must contain exactly 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetContent() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SendMessageRequestValidationError{
						field:  fmt.Sprintf("Content[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SendMessageRequestValidationError{
						field:  fmt.Sprintf("Content[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SendMessageRequestValidationError{
					field:  fmt.Sprintf("Content[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SendMessageRequestMultiError(errors)
	}

	return nil
}

// SendMessageRequestMultiError is an error wrapping multiple validation errors
// returned by SendMessageRequest.ValidateAll() if the designated constraints
// aren't met.
type SendMessageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendMessageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendMessageRequestMultiError) AllErrors() []error { return m }

// SendMessageRequestValidationError is the validation error returned by
// SendMessageRequest.Validate if the designated constraints aren't met.
type SendMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendMessageRequestValidationError) ErrorName() string {
	return "SendMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendMessageRequestValidationError{}

// Validate checks the field values on SendMessageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendMessageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendMessageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendMessageResponseMultiError, or nil if none found.
func (m *SendMessageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendMessageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if all {
		switch v := interface{}(m.GetMessage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendMessageResponseValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendMessageResponseValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendMessageResponseValidationError{
				field:  "Message",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SendMessageResponseMultiError(errors)
	}

	return nil
}

// SendMessageResponseMultiError is an error wrapping multiple validation
// errors returned by SendMessageResponse.ValidateAll() if the designated
// constraints aren't met.
type SendMessageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendMessageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendMessageResponseMultiError) AllErrors() []error { return m }

// SendMessageResponseValidationError is the validation error returned by
// SendMessageResponse.Validate if the designated constraints aren't met.
type SendMessageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendMessageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendMessageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendMessageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendMessageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendMessageResponseValidationError) ErrorName() string {
	return "SendMessageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendMessageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendMessageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendMessageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendMessageResponseValidationError{}

// Validate checks the field values on ChatId with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ChatId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatId with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ChatIdMultiError, or nil if none found.
func (m *ChatId) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetValue()) != 32 {
		err := ChatIdValidationError{
			field:  "Value",
			reason: "value length must be 32 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ChatIdMultiError(errors)
	}

	return nil
}

// ChatIdMultiError is an error wrapping multiple validation errors returned by
// ChatId.ValidateAll() if the designated constraints aren't met.
type ChatIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatIdMultiError) AllErrors() []error { return m }

// ChatIdValidationError is the validation error returned by ChatId.Validate if
// the designated constraints aren't met.
type ChatIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatIdValidationError) ErrorName() string { return "ChatIdValidationError" }

// Error satisfies the builtin error interface
func (e ChatIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatIdValidationError{}

// Validate checks the field values on ChatMessageId with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ChatMessageId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatMessageId with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ChatMessageIdMultiError, or
// nil if none found.
func (m *ChatMessageId) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatMessageId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetValue()); l < 32 || l > 64 {
		err := ChatMessageIdValidationError{
			field:  "Value",
			reason: "value length must be between 32 and 64 bytes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ChatMessageIdMultiError(errors)
	}

	return nil
}

// ChatMessageIdMultiError is an error wrapping multiple validation errors
// returned by ChatMessageId.ValidateAll() if the designated constraints
// aren't met.
type ChatMessageIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatMessageIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatMessageIdMultiError) AllErrors() []error { return m }

// ChatMessageIdValidationError is the validation error returned by
// ChatMessageId.Validate if the designated constraints aren't met.
type ChatMessageIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatMessageIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatMessageIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatMessageIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatMessageIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatMessageIdValidationError) ErrorName() string { return "ChatMessageIdValidationError" }

// Error satisfies the builtin error interface
func (e ChatMessageIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatMessageId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatMessageIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatMessageIdValidationError{}

// Validate checks the field values on ChatMemberId with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ChatMemberId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatMemberId with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ChatMemberIdMultiError, or
// nil if none found.
func (m *ChatMemberId) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatMemberId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetValue()) != 32 {
		err := ChatMemberIdValidationError{
			field:  "Value",
			reason: "value length must be 32 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ChatMemberIdMultiError(errors)
	}

	return nil
}

// ChatMemberIdMultiError is an error wrapping multiple validation errors
// returned by ChatMemberId.ValidateAll() if the designated constraints aren't met.
type ChatMemberIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatMemberIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatMemberIdMultiError) AllErrors() []error { return m }

// ChatMemberIdValidationError is the validation error returned by
// ChatMemberId.Validate if the designated constraints aren't met.
type ChatMemberIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatMemberIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatMemberIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatMemberIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatMemberIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatMemberIdValidationError) ErrorName() string { return "ChatMemberIdValidationError" }

// Error satisfies the builtin error interface
func (e ChatMemberIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatMemberId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatMemberIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatMemberIdValidationError{}

// Validate checks the field values on Pointer with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Pointer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Pointer with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PointerMultiError, or nil if none found.
func (m *Pointer) ValidateAll() error {
	return m.validate(true)
}

func (m *Pointer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Kind

	if m.GetValue() == nil {
		err := PointerValidationError{
			field:  "Value",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PointerValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PointerValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PointerValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PointerValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PointerValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PointerValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PointerMultiError(errors)
	}

	return nil
}

// PointerMultiError is an error wrapping multiple validation errors returned
// by Pointer.ValidateAll() if the designated constraints aren't met.
type PointerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PointerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PointerMultiError) AllErrors() []error { return m }

// PointerValidationError is the validation error returned by Pointer.Validate
// if the designated constraints aren't met.
type PointerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PointerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PointerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PointerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PointerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PointerValidationError) ErrorName() string { return "PointerValidationError" }

// Error satisfies the builtin error interface
func (e PointerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPointer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PointerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PointerValidationError{}

// Validate checks the field values on ChatMetadata with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ChatMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatMetadata with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ChatMetadataMultiError, or
// nil if none found.
func (m *ChatMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetChatId() == nil {
		err := ChatMetadataValidationError{
			field:  "ChatId",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetChatId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChatMetadataValidationError{
					field:  "ChatId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChatMetadataValidationError{
					field:  "ChatId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetChatId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChatMetadataValidationError{
				field:  "ChatId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetReadPointer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChatMetadataValidationError{
					field:  "ReadPointer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChatMetadataValidationError{
					field:  "ReadPointer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReadPointer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChatMetadataValidationError{
				field:  "ReadPointer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for NumUnread

	// no validation rules for IsMuted

	// no validation rules for IsSubscribed

	// no validation rules for CanMute

	// no validation rules for CanUnsubscribe

	if all {
		switch v := interface{}(m.GetCursor()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChatMetadataValidationError{
					field:  "Cursor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChatMetadataValidationError{
					field:  "Cursor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCursor()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChatMetadataValidationError{
				field:  "Cursor",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IsVerified

	oneofTitlePresent := false
	switch v := m.Title.(type) {
	case *ChatMetadata_Localized:
		if v == nil {
			err := ChatMetadataValidationError{
				field:  "Title",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofTitlePresent = true

		if all {
			switch v := interface{}(m.GetLocalized()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChatMetadataValidationError{
						field:  "Localized",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChatMetadataValidationError{
						field:  "Localized",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLocalized()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChatMetadataValidationError{
					field:  "Localized",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ChatMetadata_Domain:
		if v == nil {
			err := ChatMetadataValidationError{
				field:  "Title",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofTitlePresent = true

		if all {
			switch v := interface{}(m.GetDomain()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChatMetadataValidationError{
						field:  "Domain",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChatMetadataValidationError{
						field:  "Domain",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDomain()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChatMetadataValidationError{
					field:  "Domain",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofTitlePresent {
		err := ChatMetadataValidationError{
			field:  "Title",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ChatMetadataMultiError(errors)
	}

	return nil
}

// ChatMetadataMultiError is an error wrapping multiple validation errors
// returned by ChatMetadata.ValidateAll() if the designated constraints aren't met.
type ChatMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatMetadataMultiError) AllErrors() []error { return m }

// ChatMetadataValidationError is the validation error returned by
// ChatMetadata.Validate if the designated constraints aren't met.
type ChatMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatMetadataValidationError) ErrorName() string { return "ChatMetadataValidationError" }

// Error satisfies the builtin error interface
func (e ChatMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatMetadataValidationError{}

// Validate checks the field values on ChatMessage with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ChatMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatMessage with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ChatMessageMultiError, or
// nil if none found.
func (m *ChatMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetMessageId() == nil {
		err := ChatMessageValidationError{
			field:  "MessageId",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetMessageId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChatMessageValidationError{
					field:  "MessageId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChatMessageValidationError{
					field:  "MessageId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMessageId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChatMessageValidationError{
				field:  "MessageId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetTs() == nil {
		err := ChatMessageValidationError{
			field:  "Ts",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := len(m.GetContent()); l < 1 || l > 10 {
		err := ChatMessageValidationError{
			field:  "Content",
			reason: "value must contain between 1 and 10 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetContent() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChatMessageValidationError{
						field:  fmt.Sprintf("Content[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChatMessageValidationError{
						field:  fmt.Sprintf("Content[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChatMessageValidationError{
					field:  fmt.Sprintf("Content[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetCursor()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChatMessageValidationError{
					field:  "Cursor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChatMessageValidationError{
					field:  "Cursor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCursor()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChatMessageValidationError{
				field:  "Cursor",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSender()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChatMessageValidationError{
					field:  "Sender",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChatMessageValidationError{
					field:  "Sender",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSender()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChatMessageValidationError{
				field:  "Sender",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ChatMessageMultiError(errors)
	}

	return nil
}

// ChatMessageMultiError is an error wrapping multiple validation errors
// returned by ChatMessage.ValidateAll() if the designated constraints aren't met.
type ChatMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatMessageMultiError) AllErrors() []error { return m }

// ChatMessageValidationError is the validation error returned by
// ChatMessage.Validate if the designated constraints aren't met.
type ChatMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatMessageValidationError) ErrorName() string { return "ChatMessageValidationError" }

// Error satisfies the builtin error interface
func (e ChatMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatMessageValidationError{}

// Validate checks the field values on Content with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Content) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Content with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ContentMultiError, or nil if none found.
func (m *Content) ValidateAll() error {
	return m.validate(true)
}

func (m *Content) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	oneofTypePresent := false
	switch v := m.Type.(type) {
	case *Content_ServerLocalized:
		if v == nil {
			err := ContentValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofTypePresent = true

		if all {
			switch v := interface{}(m.GetServerLocalized()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ContentValidationError{
						field:  "ServerLocalized",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ContentValidationError{
						field:  "ServerLocalized",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetServerLocalized()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ContentValidationError{
					field:  "ServerLocalized",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Content_ExchangeData:
		if v == nil {
			err := ContentValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofTypePresent = true

		if all {
			switch v := interface{}(m.GetExchangeData()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ContentValidationError{
						field:  "ExchangeData",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ContentValidationError{
						field:  "ExchangeData",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetExchangeData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ContentValidationError{
					field:  "ExchangeData",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Content_NaclBox:
		if v == nil {
			err := ContentValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofTypePresent = true

		if all {
			switch v := interface{}(m.GetNaclBox()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ContentValidationError{
						field:  "NaclBox",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ContentValidationError{
						field:  "NaclBox",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetNaclBox()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ContentValidationError{
					field:  "NaclBox",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Content_Text:
		if v == nil {
			err := ContentValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofTypePresent = true

		if all {
			switch v := interface{}(m.GetText()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ContentValidationError{
						field:  "Text",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ContentValidationError{
						field:  "Text",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetText()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ContentValidationError{
					field:  "Text",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Content_ThankYou:
		if v == nil {
			err := ContentValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofTypePresent = true

		if all {
			switch v := interface{}(m.GetThankYou()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ContentValidationError{
						field:  "ThankYou",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ContentValidationError{
						field:  "ThankYou",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetThankYou()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ContentValidationError{
					field:  "ThankYou",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofTypePresent {
		err := ContentValidationError{
			field:  "Type",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ContentMultiError(errors)
	}

	return nil
}

// ContentMultiError is an error wrapping multiple validation errors returned
// by Content.ValidateAll() if the designated constraints aren't met.
type ContentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContentMultiError) AllErrors() []error { return m }

// ContentValidationError is the validation error returned by Content.Validate
// if the designated constraints aren't met.
type ContentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContentValidationError) ErrorName() string { return "ContentValidationError" }

// Error satisfies the builtin error interface
func (e ContentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContentValidationError{}

// Validate checks the field values on ServerLocalizedContent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServerLocalizedContent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerLocalizedContent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServerLocalizedContentMultiError, or nil if none found.
func (m *ServerLocalizedContent) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerLocalizedContent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetKeyOrText()); l < 1 || l > 1024 {
		err := ServerLocalizedContentValidationError{
			field:  "KeyOrText",
			reason: "value length must be between 1 and 1024 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ServerLocalizedContentMultiError(errors)
	}

	return nil
}

// ServerLocalizedContentMultiError is an error wrapping multiple validation
// errors returned by ServerLocalizedContent.ValidateAll() if the designated
// constraints aren't met.
type ServerLocalizedContentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerLocalizedContentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerLocalizedContentMultiError) AllErrors() []error { return m }

// ServerLocalizedContentValidationError is the validation error returned by
// ServerLocalizedContent.Validate if the designated constraints aren't met.
type ServerLocalizedContentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerLocalizedContentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerLocalizedContentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerLocalizedContentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerLocalizedContentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerLocalizedContentValidationError) ErrorName() string {
	return "ServerLocalizedContentValidationError"
}

// Error satisfies the builtin error interface
func (e ServerLocalizedContentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerLocalizedContent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerLocalizedContentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerLocalizedContentValidationError{}

// Validate checks the field values on ExchangeDataContent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExchangeDataContent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExchangeDataContent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExchangeDataContentMultiError, or nil if none found.
func (m *ExchangeDataContent) ValidateAll() error {
	return m.validate(true)
}

func (m *ExchangeDataContent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Verb

	oneofExchangeDataPresent := false
	switch v := m.ExchangeData.(type) {
	case *ExchangeDataContent_Exact:
		if v == nil {
			err := ExchangeDataContentValidationError{
				field:  "ExchangeData",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofExchangeDataPresent = true

		if all {
			switch v := interface{}(m.GetExact()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExchangeDataContentValidationError{
						field:  "Exact",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExchangeDataContentValidationError{
						field:  "Exact",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetExact()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExchangeDataContentValidationError{
					field:  "Exact",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ExchangeDataContent_Partial:
		if v == nil {
			err := ExchangeDataContentValidationError{
				field:  "ExchangeData",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofExchangeDataPresent = true

		if all {
			switch v := interface{}(m.GetPartial()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExchangeDataContentValidationError{
						field:  "Partial",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExchangeDataContentValidationError{
						field:  "Partial",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPartial()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExchangeDataContentValidationError{
					field:  "Partial",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofExchangeDataPresent {
		err := ExchangeDataContentValidationError{
			field:  "ExchangeData",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ExchangeDataContentMultiError(errors)
	}

	return nil
}

// ExchangeDataContentMultiError is an error wrapping multiple validation
// errors returned by ExchangeDataContent.ValidateAll() if the designated
// constraints aren't met.
type ExchangeDataContentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExchangeDataContentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExchangeDataContentMultiError) AllErrors() []error { return m }

// ExchangeDataContentValidationError is the validation error returned by
// ExchangeDataContent.Validate if the designated constraints aren't met.
type ExchangeDataContentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExchangeDataContentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExchangeDataContentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExchangeDataContentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExchangeDataContentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExchangeDataContentValidationError) ErrorName() string {
	return "ExchangeDataContentValidationError"
}

// Error satisfies the builtin error interface
func (e ExchangeDataContentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExchangeDataContent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExchangeDataContentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExchangeDataContentValidationError{}

// Validate checks the field values on NaclBoxEncryptedContent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NaclBoxEncryptedContent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NaclBoxEncryptedContent with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NaclBoxEncryptedContentMultiError, or nil if none found.
func (m *NaclBoxEncryptedContent) ValidateAll() error {
	return m.validate(true)
}

func (m *NaclBoxEncryptedContent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPeerPublicKey() == nil {
		err := NaclBoxEncryptedContentValidationError{
			field:  "PeerPublicKey",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPeerPublicKey()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NaclBoxEncryptedContentValidationError{
					field:  "PeerPublicKey",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NaclBoxEncryptedContentValidationError{
					field:  "PeerPublicKey",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPeerPublicKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NaclBoxEncryptedContentValidationError{
				field:  "PeerPublicKey",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetNonce()) != 24 {
		err := NaclBoxEncryptedContentValidationError{
			field:  "Nonce",
			reason: "value length must be 24 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := len(m.GetEncryptedPayload()); l < 1 || l > 1024 {
		err := NaclBoxEncryptedContentValidationError{
			field:  "EncryptedPayload",
			reason: "value length must be between 1 and 1024 bytes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return NaclBoxEncryptedContentMultiError(errors)
	}

	return nil
}

// NaclBoxEncryptedContentMultiError is an error wrapping multiple validation
// errors returned by NaclBoxEncryptedContent.ValidateAll() if the designated
// constraints aren't met.
type NaclBoxEncryptedContentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NaclBoxEncryptedContentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NaclBoxEncryptedContentMultiError) AllErrors() []error { return m }

// NaclBoxEncryptedContentValidationError is the validation error returned by
// NaclBoxEncryptedContent.Validate if the designated constraints aren't met.
type NaclBoxEncryptedContentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NaclBoxEncryptedContentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NaclBoxEncryptedContentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NaclBoxEncryptedContentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NaclBoxEncryptedContentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NaclBoxEncryptedContentValidationError) ErrorName() string {
	return "NaclBoxEncryptedContentValidationError"
}

// Error satisfies the builtin error interface
func (e NaclBoxEncryptedContentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNaclBoxEncryptedContent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NaclBoxEncryptedContentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NaclBoxEncryptedContentValidationError{}

// Validate checks the field values on TextContent with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TextContent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TextContent with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TextContentMultiError, or
// nil if none found.
func (m *TextContent) ValidateAll() error {
	return m.validate(true)
}

func (m *TextContent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetText()); l < 1 || l > 1024 {
		err := TextContentValidationError{
			field:  "Text",
			reason: "value length must be between 1 and 1024 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return TextContentMultiError(errors)
	}

	return nil
}

// TextContentMultiError is an error wrapping multiple validation errors
// returned by TextContent.ValidateAll() if the designated constraints aren't met.
type TextContentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TextContentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TextContentMultiError) AllErrors() []error { return m }

// TextContentValidationError is the validation error returned by
// TextContent.Validate if the designated constraints aren't met.
type TextContentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TextContentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TextContentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TextContentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TextContentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TextContentValidationError) ErrorName() string { return "TextContentValidationError" }

// Error satisfies the builtin error interface
func (e TextContentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTextContent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TextContentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TextContentValidationError{}

// Validate checks the field values on ThankYouContent with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ThankYouContent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ThankYouContent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ThankYouContentMultiError, or nil if none found.
func (m *ThankYouContent) ValidateAll() error {
	return m.validate(true)
}

func (m *ThankYouContent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ThankYouContentMultiError(errors)
	}

	return nil
}

// ThankYouContentMultiError is an error wrapping multiple validation errors
// returned by ThankYouContent.ValidateAll() if the designated constraints
// aren't met.
type ThankYouContentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ThankYouContentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ThankYouContentMultiError) AllErrors() []error { return m }

// ThankYouContentValidationError is the validation error returned by
// ThankYouContent.Validate if the designated constraints aren't met.
type ThankYouContentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ThankYouContentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ThankYouContentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ThankYouContentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ThankYouContentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ThankYouContentValidationError) ErrorName() string { return "ThankYouContentValidationError" }

// Error satisfies the builtin error interface
func (e ThankYouContentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sThankYouContent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ThankYouContentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ThankYouContentValidationError{}

// Validate checks the field values on Cursor with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Cursor) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Cursor with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CursorMultiError, or nil if none found.
func (m *Cursor) ValidateAll() error {
	return m.validate(true)
}

func (m *Cursor) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetValue()); l < 8 || l > 64 {
		err := CursorValidationError{
			field:  "Value",
			reason: "value length must be between 8 and 64 bytes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CursorMultiError(errors)
	}

	return nil
}

// CursorMultiError is an error wrapping multiple validation errors returned by
// Cursor.ValidateAll() if the designated constraints aren't met.
type CursorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CursorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CursorMultiError) AllErrors() []error { return m }

// CursorValidationError is the validation error returned by Cursor.Validate if
// the designated constraints aren't met.
type CursorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CursorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CursorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CursorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CursorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CursorValidationError) ErrorName() string { return "CursorValidationError" }

// Error satisfies the builtin error interface
func (e CursorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCursor.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CursorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CursorValidationError{}
