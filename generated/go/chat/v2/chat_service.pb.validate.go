// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: chat/v2/chat_service.proto

package chat

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on GetChatsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetChatsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetOwner() == nil {
		return GetChatsRequestValidationError{
			field:  "Owner",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetOwner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetChatsRequestValidationError{
				field:  "Owner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetSignature() == nil {
		return GetChatsRequestValidationError{
			field:  "Signature",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetSignature()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetChatsRequestValidationError{
				field:  "Signature",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPageSize() > 100 {
		return GetChatsRequestValidationError{
			field:  "PageSize",
			reason: "value must be less than or equal to 100",
		}
	}

	if v, ok := interface{}(m.GetCursor()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetChatsRequestValidationError{
				field:  "Cursor",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Direction

	return nil
}

// GetChatsRequestValidationError is the validation error returned by
// GetChatsRequest.Validate if the designated constraints aren't met.
type GetChatsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetChatsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetChatsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetChatsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetChatsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetChatsRequestValidationError) ErrorName() string { return "GetChatsRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetChatsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetChatsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetChatsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetChatsRequestValidationError{}

// Validate checks the field values on GetChatsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetChatsResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Result

	if len(m.GetChats()) > 100 {
		return GetChatsResponseValidationError{
			field:  "Chats",
			reason: "value must contain no more than 100 item(s)",
		}
	}

	for idx, item := range m.GetChats() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetChatsResponseValidationError{
					field:  fmt.Sprintf("Chats[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetChatsResponseValidationError is the validation error returned by
// GetChatsResponse.Validate if the designated constraints aren't met.
type GetChatsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetChatsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetChatsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetChatsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetChatsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetChatsResponseValidationError) ErrorName() string { return "GetChatsResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetChatsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetChatsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetChatsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetChatsResponseValidationError{}

// Validate checks the field values on GetMessagesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetMessagesRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetChatId() == nil {
		return GetMessagesRequestValidationError{
			field:  "ChatId",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetChatId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMessagesRequestValidationError{
				field:  "ChatId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetOwner() == nil {
		return GetMessagesRequestValidationError{
			field:  "Owner",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetOwner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMessagesRequestValidationError{
				field:  "Owner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetSignature() == nil {
		return GetMessagesRequestValidationError{
			field:  "Signature",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetSignature()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMessagesRequestValidationError{
				field:  "Signature",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPageSize() > 100 {
		return GetMessagesRequestValidationError{
			field:  "PageSize",
			reason: "value must be less than or equal to 100",
		}
	}

	if v, ok := interface{}(m.GetCursor()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMessagesRequestValidationError{
				field:  "Cursor",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Direction

	return nil
}

// GetMessagesRequestValidationError is the validation error returned by
// GetMessagesRequest.Validate if the designated constraints aren't met.
type GetMessagesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMessagesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMessagesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMessagesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMessagesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMessagesRequestValidationError) ErrorName() string {
	return "GetMessagesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMessagesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMessagesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMessagesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMessagesRequestValidationError{}

// Validate checks the field values on GetMessagesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetMessagesResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Result

	if len(m.GetMessages()) > 100 {
		return GetMessagesResponseValidationError{
			field:  "Messages",
			reason: "value must contain no more than 100 item(s)",
		}
	}

	for idx, item := range m.GetMessages() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetMessagesResponseValidationError{
					field:  fmt.Sprintf("Messages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetMessagesResponseValidationError is the validation error returned by
// GetMessagesResponse.Validate if the designated constraints aren't met.
type GetMessagesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMessagesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMessagesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMessagesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMessagesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMessagesResponseValidationError) ErrorName() string {
	return "GetMessagesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMessagesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMessagesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMessagesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMessagesResponseValidationError{}

// Validate checks the field values on OpenChatEventStream with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *OpenChatEventStream) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetChatId() == nil {
		return OpenChatEventStreamValidationError{
			field:  "ChatId",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetChatId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OpenChatEventStreamValidationError{
				field:  "ChatId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetOwner() == nil {
		return OpenChatEventStreamValidationError{
			field:  "Owner",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetOwner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OpenChatEventStreamValidationError{
				field:  "Owner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetSignature() == nil {
		return OpenChatEventStreamValidationError{
			field:  "Signature",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetSignature()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OpenChatEventStreamValidationError{
				field:  "Signature",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// OpenChatEventStreamValidationError is the validation error returned by
// OpenChatEventStream.Validate if the designated constraints aren't met.
type OpenChatEventStreamValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpenChatEventStreamValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpenChatEventStreamValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpenChatEventStreamValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpenChatEventStreamValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpenChatEventStreamValidationError) ErrorName() string {
	return "OpenChatEventStreamValidationError"
}

// Error satisfies the builtin error interface
func (e OpenChatEventStreamValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpenChatEventStream.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpenChatEventStreamValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpenChatEventStreamValidationError{}

// Validate checks the field values on ChatStreamEvent with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ChatStreamEvent) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Type.(type) {

	case *ChatStreamEvent_Message:

		if v, ok := interface{}(m.GetMessage()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChatStreamEventValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ChatStreamEvent_Pointer:

		if v, ok := interface{}(m.GetPointer()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChatStreamEventValidationError{
					field:  "Pointer",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ChatStreamEvent_IsTyping:

		if v, ok := interface{}(m.GetIsTyping()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChatStreamEventValidationError{
					field:  "IsTyping",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		return ChatStreamEventValidationError{
			field:  "Type",
			reason: "value is required",
		}

	}

	return nil
}

// ChatStreamEventValidationError is the validation error returned by
// ChatStreamEvent.Validate if the designated constraints aren't met.
type ChatStreamEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatStreamEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatStreamEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatStreamEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatStreamEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatStreamEventValidationError) ErrorName() string { return "ChatStreamEventValidationError" }

// Error satisfies the builtin error interface
func (e ChatStreamEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatStreamEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatStreamEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatStreamEventValidationError{}

// Validate checks the field values on ChatStreamEventBatch with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ChatStreamEventBatch) Validate() error {
	if m == nil {
		return nil
	}

	if l := len(m.GetEvents()); l < 1 || l > 1024 {
		return ChatStreamEventBatchValidationError{
			field:  "Events",
			reason: "value must contain between 1 and 1024 items, inclusive",
		}
	}

	for idx, item := range m.GetEvents() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChatStreamEventBatchValidationError{
					field:  fmt.Sprintf("Events[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ChatStreamEventBatchValidationError is the validation error returned by
// ChatStreamEventBatch.Validate if the designated constraints aren't met.
type ChatStreamEventBatchValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatStreamEventBatchValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatStreamEventBatchValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatStreamEventBatchValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatStreamEventBatchValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatStreamEventBatchValidationError) ErrorName() string {
	return "ChatStreamEventBatchValidationError"
}

// Error satisfies the builtin error interface
func (e ChatStreamEventBatchValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatStreamEventBatch.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatStreamEventBatchValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatStreamEventBatchValidationError{}

// Validate checks the field values on ChatStreamEventError with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ChatStreamEventError) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	return nil
}

// ChatStreamEventErrorValidationError is the validation error returned by
// ChatStreamEventError.Validate if the designated constraints aren't met.
type ChatStreamEventErrorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatStreamEventErrorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatStreamEventErrorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatStreamEventErrorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatStreamEventErrorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatStreamEventErrorValidationError) ErrorName() string {
	return "ChatStreamEventErrorValidationError"
}

// Error satisfies the builtin error interface
func (e ChatStreamEventErrorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatStreamEventError.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatStreamEventErrorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatStreamEventErrorValidationError{}

// Validate checks the field values on StreamChatEventsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *StreamChatEventsRequest) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Type.(type) {

	case *StreamChatEventsRequest_OpenStream:

		if v, ok := interface{}(m.GetOpenStream()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamChatEventsRequestValidationError{
					field:  "OpenStream",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StreamChatEventsRequest_Pong:

		if v, ok := interface{}(m.GetPong()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamChatEventsRequestValidationError{
					field:  "Pong",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		return StreamChatEventsRequestValidationError{
			field:  "Type",
			reason: "value is required",
		}

	}

	return nil
}

// StreamChatEventsRequestValidationError is the validation error returned by
// StreamChatEventsRequest.Validate if the designated constraints aren't met.
type StreamChatEventsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamChatEventsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamChatEventsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamChatEventsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamChatEventsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamChatEventsRequestValidationError) ErrorName() string {
	return "StreamChatEventsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StreamChatEventsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamChatEventsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamChatEventsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamChatEventsRequestValidationError{}

// Validate checks the field values on StreamChatEventsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *StreamChatEventsResponse) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Type.(type) {

	case *StreamChatEventsResponse_Events:

		if v, ok := interface{}(m.GetEvents()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamChatEventsResponseValidationError{
					field:  "Events",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StreamChatEventsResponse_Ping:

		if v, ok := interface{}(m.GetPing()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamChatEventsResponseValidationError{
					field:  "Ping",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StreamChatEventsResponse_Error:

		if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamChatEventsResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		return StreamChatEventsResponseValidationError{
			field:  "Type",
			reason: "value is required",
		}

	}

	return nil
}

// StreamChatEventsResponseValidationError is the validation error returned by
// StreamChatEventsResponse.Validate if the designated constraints aren't met.
type StreamChatEventsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamChatEventsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamChatEventsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamChatEventsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamChatEventsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamChatEventsResponseValidationError) ErrorName() string {
	return "StreamChatEventsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StreamChatEventsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamChatEventsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamChatEventsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamChatEventsResponseValidationError{}

// Validate checks the field values on StartChatRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *StartChatRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetOwner() == nil {
		return StartChatRequestValidationError{
			field:  "Owner",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetOwner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartChatRequestValidationError{
				field:  "Owner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetSignature() == nil {
		return StartChatRequestValidationError{
			field:  "Signature",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetSignature()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartChatRequestValidationError{
				field:  "Signature",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch m.Parameters.(type) {

	case *StartChatRequest_TwoWayChat:

		if v, ok := interface{}(m.GetTwoWayChat()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StartChatRequestValidationError{
					field:  "TwoWayChat",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		return StartChatRequestValidationError{
			field:  "Parameters",
			reason: "value is required",
		}

	}

	return nil
}

// StartChatRequestValidationError is the validation error returned by
// StartChatRequest.Validate if the designated constraints aren't met.
type StartChatRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartChatRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartChatRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartChatRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartChatRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartChatRequestValidationError) ErrorName() string { return "StartChatRequestValidationError" }

// Error satisfies the builtin error interface
func (e StartChatRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartChatRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartChatRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartChatRequestValidationError{}

// Validate checks the field values on StartTwoWayChatParameters with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *StartTwoWayChatParameters) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetOtherUser() == nil {
		return StartTwoWayChatParametersValidationError{
			field:  "OtherUser",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetOtherUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartTwoWayChatParametersValidationError{
				field:  "OtherUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetIntentId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartTwoWayChatParametersValidationError{
				field:  "IntentId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// StartTwoWayChatParametersValidationError is the validation error returned by
// StartTwoWayChatParameters.Validate if the designated constraints aren't met.
type StartTwoWayChatParametersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartTwoWayChatParametersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartTwoWayChatParametersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartTwoWayChatParametersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartTwoWayChatParametersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartTwoWayChatParametersValidationError) ErrorName() string {
	return "StartTwoWayChatParametersValidationError"
}

// Error satisfies the builtin error interface
func (e StartTwoWayChatParametersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartTwoWayChatParameters.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartTwoWayChatParametersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartTwoWayChatParametersValidationError{}

// Validate checks the field values on StartChatResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *StartChatResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Result

	if v, ok := interface{}(m.GetChat()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartChatResponseValidationError{
				field:  "Chat",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// StartChatResponseValidationError is the validation error returned by
// StartChatResponse.Validate if the designated constraints aren't met.
type StartChatResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartChatResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartChatResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartChatResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartChatResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartChatResponseValidationError) ErrorName() string {
	return "StartChatResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StartChatResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartChatResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartChatResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartChatResponseValidationError{}

// Validate checks the field values on SendMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SendMessageRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetChatId() == nil {
		return SendMessageRequestValidationError{
			field:  "ChatId",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetChatId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendMessageRequestValidationError{
				field:  "ChatId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetContent()) != 1 {
		return SendMessageRequestValidationError{
			field:  "Content",
			reason: "value must contain exactly 1 item(s)",
		}
	}

	for idx, item := range m.GetContent() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SendMessageRequestValidationError{
					field:  fmt.Sprintf("Content[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.GetOwner() == nil {
		return SendMessageRequestValidationError{
			field:  "Owner",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetOwner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendMessageRequestValidationError{
				field:  "Owner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetSignature() == nil {
		return SendMessageRequestValidationError{
			field:  "Signature",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetSignature()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendMessageRequestValidationError{
				field:  "Signature",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SendMessageRequestValidationError is the validation error returned by
// SendMessageRequest.Validate if the designated constraints aren't met.
type SendMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendMessageRequestValidationError) ErrorName() string {
	return "SendMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendMessageRequestValidationError{}

// Validate checks the field values on SendMessageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SendMessageResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Result

	if v, ok := interface{}(m.GetMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendMessageResponseValidationError{
				field:  "Message",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SendMessageResponseValidationError is the validation error returned by
// SendMessageResponse.Validate if the designated constraints aren't met.
type SendMessageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendMessageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendMessageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendMessageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendMessageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendMessageResponseValidationError) ErrorName() string {
	return "SendMessageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendMessageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendMessageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendMessageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendMessageResponseValidationError{}

// Validate checks the field values on AdvancePointerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AdvancePointerRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetChatId() == nil {
		return AdvancePointerRequestValidationError{
			field:  "ChatId",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetChatId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdvancePointerRequestValidationError{
				field:  "ChatId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPointer() == nil {
		return AdvancePointerRequestValidationError{
			field:  "Pointer",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetPointer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdvancePointerRequestValidationError{
				field:  "Pointer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetOwner() == nil {
		return AdvancePointerRequestValidationError{
			field:  "Owner",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetOwner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdvancePointerRequestValidationError{
				field:  "Owner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetSignature() == nil {
		return AdvancePointerRequestValidationError{
			field:  "Signature",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetSignature()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdvancePointerRequestValidationError{
				field:  "Signature",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AdvancePointerRequestValidationError is the validation error returned by
// AdvancePointerRequest.Validate if the designated constraints aren't met.
type AdvancePointerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdvancePointerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdvancePointerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdvancePointerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdvancePointerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdvancePointerRequestValidationError) ErrorName() string {
	return "AdvancePointerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AdvancePointerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdvancePointerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdvancePointerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdvancePointerRequestValidationError{}

// Validate checks the field values on AdvancePointerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AdvancePointerResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Result

	return nil
}

// AdvancePointerResponseValidationError is the validation error returned by
// AdvancePointerResponse.Validate if the designated constraints aren't met.
type AdvancePointerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdvancePointerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdvancePointerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdvancePointerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdvancePointerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdvancePointerResponseValidationError) ErrorName() string {
	return "AdvancePointerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AdvancePointerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdvancePointerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdvancePointerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdvancePointerResponseValidationError{}

// Validate checks the field values on SetMuteStateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SetMuteStateRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetChatId() == nil {
		return SetMuteStateRequestValidationError{
			field:  "ChatId",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetChatId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetMuteStateRequestValidationError{
				field:  "ChatId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IsMuted

	if m.GetOwner() == nil {
		return SetMuteStateRequestValidationError{
			field:  "Owner",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetOwner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetMuteStateRequestValidationError{
				field:  "Owner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetSignature() == nil {
		return SetMuteStateRequestValidationError{
			field:  "Signature",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetSignature()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetMuteStateRequestValidationError{
				field:  "Signature",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SetMuteStateRequestValidationError is the validation error returned by
// SetMuteStateRequest.Validate if the designated constraints aren't met.
type SetMuteStateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetMuteStateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetMuteStateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetMuteStateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetMuteStateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetMuteStateRequestValidationError) ErrorName() string {
	return "SetMuteStateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetMuteStateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetMuteStateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetMuteStateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetMuteStateRequestValidationError{}

// Validate checks the field values on SetMuteStateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SetMuteStateResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Result

	return nil
}

// SetMuteStateResponseValidationError is the validation error returned by
// SetMuteStateResponse.Validate if the designated constraints aren't met.
type SetMuteStateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetMuteStateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetMuteStateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetMuteStateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetMuteStateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetMuteStateResponseValidationError) ErrorName() string {
	return "SetMuteStateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetMuteStateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetMuteStateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetMuteStateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetMuteStateResponseValidationError{}

// Validate checks the field values on NotifyIsTypingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *NotifyIsTypingRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetChatId() == nil {
		return NotifyIsTypingRequestValidationError{
			field:  "ChatId",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetChatId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotifyIsTypingRequestValidationError{
				field:  "ChatId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IsTyping

	if m.GetOwner() == nil {
		return NotifyIsTypingRequestValidationError{
			field:  "Owner",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetOwner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotifyIsTypingRequestValidationError{
				field:  "Owner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetSignature() == nil {
		return NotifyIsTypingRequestValidationError{
			field:  "Signature",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetSignature()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotifyIsTypingRequestValidationError{
				field:  "Signature",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// NotifyIsTypingRequestValidationError is the validation error returned by
// NotifyIsTypingRequest.Validate if the designated constraints aren't met.
type NotifyIsTypingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotifyIsTypingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotifyIsTypingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotifyIsTypingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotifyIsTypingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotifyIsTypingRequestValidationError) ErrorName() string {
	return "NotifyIsTypingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e NotifyIsTypingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotifyIsTypingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotifyIsTypingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotifyIsTypingRequestValidationError{}

// Validate checks the field values on NotifyIsTypingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *NotifyIsTypingResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Result

	return nil
}

// NotifyIsTypingResponseValidationError is the validation error returned by
// NotifyIsTypingResponse.Validate if the designated constraints aren't met.
type NotifyIsTypingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotifyIsTypingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotifyIsTypingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotifyIsTypingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotifyIsTypingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotifyIsTypingResponseValidationError) ErrorName() string {
	return "NotifyIsTypingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e NotifyIsTypingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotifyIsTypingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotifyIsTypingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotifyIsTypingResponseValidationError{}

// Validate checks the field values on MessageId with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *MessageId) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetValue()) != 16 {
		return MessageIdValidationError{
			field:  "Value",
			reason: "value length must be 16 bytes",
		}
	}

	return nil
}

// MessageIdValidationError is the validation error returned by
// MessageId.Validate if the designated constraints aren't met.
type MessageIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageIdValidationError) ErrorName() string { return "MessageIdValidationError" }

// Error satisfies the builtin error interface
func (e MessageIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessageId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageIdValidationError{}

// Validate checks the field values on MemberId with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *MemberId) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetValue()) != 32 {
		return MemberIdValidationError{
			field:  "Value",
			reason: "value length must be 32 bytes",
		}
	}

	return nil
}

// MemberIdValidationError is the validation error returned by
// MemberId.Validate if the designated constraints aren't met.
type MemberIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemberIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemberIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemberIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemberIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemberIdValidationError) ErrorName() string { return "MemberIdValidationError" }

// Error satisfies the builtin error interface
func (e MemberIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMemberId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemberIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemberIdValidationError{}

// Validate checks the field values on Metadata with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Metadata) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetChatId() == nil {
		return MetadataValidationError{
			field:  "ChatId",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetChatId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MetadataValidationError{
				field:  "ChatId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := _Metadata_Type_NotInLookup[m.GetType()]; ok {
		return MetadataValidationError{
			field:  "Type",
			reason: "value must not be in list [0]",
		}
	}

	if v, ok := interface{}(m.GetCursor()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MetadataValidationError{
				field:  "Cursor",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := utf8.RuneCountInString(m.GetTitle()); l < 0 || l > 1024 {
		return MetadataValidationError{
			field:  "Title",
			reason: "value length must be between 0 and 1024 runes, inclusive",
		}
	}

	if l := len(m.GetMembers()); l < 1 || l > 2 {
		return MetadataValidationError{
			field:  "Members",
			reason: "value must contain between 1 and 2 items, inclusive",
		}
	}

	for idx, item := range m.GetMembers() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MetadataValidationError{
					field:  fmt.Sprintf("Members[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for IsMuted

	// no validation rules for Muteable

	// no validation rules for NumUnread

	return nil
}

// MetadataValidationError is the validation error returned by
// Metadata.Validate if the designated constraints aren't met.
type MetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetadataValidationError) ErrorName() string { return "MetadataValidationError" }

// Error satisfies the builtin error interface
func (e MetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetadataValidationError{}

var _Metadata_Type_NotInLookup = map[ChatType]struct{}{
	0: {},
}

// Validate checks the field values on Message with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Message) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetMessageId() == nil {
		return MessageValidationError{
			field:  "MessageId",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetMessageId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MessageValidationError{
				field:  "MessageId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetSenderId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MessageValidationError{
				field:  "SenderId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := len(m.GetContent()); l < 1 || l > 2 {
		return MessageValidationError{
			field:  "Content",
			reason: "value must contain between 1 and 2 items, inclusive",
		}
	}

	for idx, item := range m.GetContent() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MessageValidationError{
					field:  fmt.Sprintf("Content[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.GetTs() == nil {
		return MessageValidationError{
			field:  "Ts",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetCursor()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MessageValidationError{
				field:  "Cursor",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// MessageValidationError is the validation error returned by Message.Validate
// if the designated constraints aren't met.
type MessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageValidationError) ErrorName() string { return "MessageValidationError" }

// Error satisfies the builtin error interface
func (e MessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageValidationError{}

// Validate checks the field values on Member with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Member) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetMemberId() == nil {
		return MemberValidationError{
			field:  "MemberId",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetMemberId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MemberValidationError{
				field:  "MemberId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetIdentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MemberValidationError{
				field:  "Identity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetPointers()) > 2 {
		return MemberValidationError{
			field:  "Pointers",
			reason: "value must contain no more than 2 item(s)",
		}
	}

	for idx, item := range m.GetPointers() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MemberValidationError{
					field:  fmt.Sprintf("Pointers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// MemberValidationError is the validation error returned by Member.Validate if
// the designated constraints aren't met.
type MemberValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemberValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemberValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemberValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemberValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemberValidationError) ErrorName() string { return "MemberValidationError" }

// Error satisfies the builtin error interface
func (e MemberValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMember.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemberValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemberValidationError{}

// Validate checks the field values on MemberIdentity with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *MemberIdentity) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _MemberIdentity_Platform_InLookup[m.GetPlatform()]; !ok {
		return MemberIdentityValidationError{
			field:  "Platform",
			reason: "value must be in list [1]",
		}
	}

	if l := utf8.RuneCountInString(m.GetUsername()); l < 1 || l > 15 {
		return MemberIdentityValidationError{
			field:  "Username",
			reason: "value length must be between 1 and 15 runes, inclusive",
		}
	}

	if utf8.RuneCountInString(m.GetDisplayName()) > 255 {
		return MemberIdentityValidationError{
			field:  "DisplayName",
			reason: "value length must be at most 255 runes",
		}
	}

	if utf8.RuneCountInString(m.GetProfilePicUrl()) > 255 {
		return MemberIdentityValidationError{
			field:  "ProfilePicUrl",
			reason: "value length must be at most 255 runes",
		}
	}

	return nil
}

// MemberIdentityValidationError is the validation error returned by
// MemberIdentity.Validate if the designated constraints aren't met.
type MemberIdentityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemberIdentityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemberIdentityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemberIdentityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemberIdentityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemberIdentityValidationError) ErrorName() string { return "MemberIdentityValidationError" }

// Error satisfies the builtin error interface
func (e MemberIdentityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMemberIdentity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemberIdentityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemberIdentityValidationError{}

var _MemberIdentity_Platform_InLookup = map[Platform]struct{}{
	1: {},
}

// Validate checks the field values on Pointer with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Pointer) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _Pointer_Type_NotInLookup[m.GetType()]; ok {
		return PointerValidationError{
			field:  "Type",
			reason: "value must not be in list [0]",
		}
	}

	if m.GetValue() == nil {
		return PointerValidationError{
			field:  "Value",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PointerValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetMemberId() == nil {
		return PointerValidationError{
			field:  "MemberId",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetMemberId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PointerValidationError{
				field:  "MemberId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// PointerValidationError is the validation error returned by Pointer.Validate
// if the designated constraints aren't met.
type PointerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PointerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PointerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PointerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PointerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PointerValidationError) ErrorName() string { return "PointerValidationError" }

// Error satisfies the builtin error interface
func (e PointerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPointer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PointerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PointerValidationError{}

var _Pointer_Type_NotInLookup = map[PointerType]struct{}{
	0: {},
}

// Validate checks the field values on Content with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Content) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Type.(type) {

	case *Content_Text:

		if v, ok := interface{}(m.GetText()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ContentValidationError{
					field:  "Text",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Content_Localized:

		if v, ok := interface{}(m.GetLocalized()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ContentValidationError{
					field:  "Localized",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Content_ExchangeData:

		if v, ok := interface{}(m.GetExchangeData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ContentValidationError{
					field:  "ExchangeData",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Content_NaclBox:

		if v, ok := interface{}(m.GetNaclBox()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ContentValidationError{
					field:  "NaclBox",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		return ContentValidationError{
			field:  "Type",
			reason: "value is required",
		}

	}

	return nil
}

// ContentValidationError is the validation error returned by Content.Validate
// if the designated constraints aren't met.
type ContentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContentValidationError) ErrorName() string { return "ContentValidationError" }

// Error satisfies the builtin error interface
func (e ContentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContentValidationError{}

// Validate checks the field values on TextContent with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *TextContent) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetText()); l < 1 || l > 1024 {
		return TextContentValidationError{
			field:  "Text",
			reason: "value length must be between 1 and 1024 runes, inclusive",
		}
	}

	return nil
}

// TextContentValidationError is the validation error returned by
// TextContent.Validate if the designated constraints aren't met.
type TextContentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TextContentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TextContentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TextContentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TextContentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TextContentValidationError) ErrorName() string { return "TextContentValidationError" }

// Error satisfies the builtin error interface
func (e TextContentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTextContent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TextContentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TextContentValidationError{}

// Validate checks the field values on LocalizedContent with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *LocalizedContent) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetKeyOrText()); l < 1 || l > 1024 {
		return LocalizedContentValidationError{
			field:  "KeyOrText",
			reason: "value length must be between 1 and 1024 runes, inclusive",
		}
	}

	return nil
}

// LocalizedContentValidationError is the validation error returned by
// LocalizedContent.Validate if the designated constraints aren't met.
type LocalizedContentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LocalizedContentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LocalizedContentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LocalizedContentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LocalizedContentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LocalizedContentValidationError) ErrorName() string { return "LocalizedContentValidationError" }

// Error satisfies the builtin error interface
func (e LocalizedContentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLocalizedContent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LocalizedContentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LocalizedContentValidationError{}

// Validate checks the field values on ExchangeDataContent with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ExchangeDataContent) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _ExchangeDataContent_Verb_NotInLookup[m.GetVerb()]; ok {
		return ExchangeDataContentValidationError{
			field:  "Verb",
			reason: "value must not be in list [0]",
		}
	}

	switch m.ExchangeData.(type) {

	case *ExchangeDataContent_Exact:

		if v, ok := interface{}(m.GetExact()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExchangeDataContentValidationError{
					field:  "Exact",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ExchangeDataContent_Partial:

		if v, ok := interface{}(m.GetPartial()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExchangeDataContentValidationError{
					field:  "Partial",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		return ExchangeDataContentValidationError{
			field:  "ExchangeData",
			reason: "value is required",
		}

	}

	switch m.Reference.(type) {

	case *ExchangeDataContent_Intent:

		if v, ok := interface{}(m.GetIntent()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExchangeDataContentValidationError{
					field:  "Intent",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ExchangeDataContent_Signature:

		if v, ok := interface{}(m.GetSignature()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExchangeDataContentValidationError{
					field:  "Signature",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		return ExchangeDataContentValidationError{
			field:  "Reference",
			reason: "value is required",
		}

	}

	return nil
}

// ExchangeDataContentValidationError is the validation error returned by
// ExchangeDataContent.Validate if the designated constraints aren't met.
type ExchangeDataContentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExchangeDataContentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExchangeDataContentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExchangeDataContentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExchangeDataContentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExchangeDataContentValidationError) ErrorName() string {
	return "ExchangeDataContentValidationError"
}

// Error satisfies the builtin error interface
func (e ExchangeDataContentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExchangeDataContent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExchangeDataContentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExchangeDataContentValidationError{}

var _ExchangeDataContent_Verb_NotInLookup = map[ExchangeDataContent_Verb]struct{}{
	0: {},
}

// Validate checks the field values on NaclBoxEncryptedContent with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *NaclBoxEncryptedContent) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetPeerPublicKey() == nil {
		return NaclBoxEncryptedContentValidationError{
			field:  "PeerPublicKey",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetPeerPublicKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NaclBoxEncryptedContentValidationError{
				field:  "PeerPublicKey",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetNonce()) != 24 {
		return NaclBoxEncryptedContentValidationError{
			field:  "Nonce",
			reason: "value length must be 24 bytes",
		}
	}

	if l := len(m.GetEncryptedPayload()); l < 1 || l > 1024 {
		return NaclBoxEncryptedContentValidationError{
			field:  "EncryptedPayload",
			reason: "value length must be between 1 and 1024 bytes, inclusive",
		}
	}

	return nil
}

// NaclBoxEncryptedContentValidationError is the validation error returned by
// NaclBoxEncryptedContent.Validate if the designated constraints aren't met.
type NaclBoxEncryptedContentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NaclBoxEncryptedContentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NaclBoxEncryptedContentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NaclBoxEncryptedContentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NaclBoxEncryptedContentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NaclBoxEncryptedContentValidationError) ErrorName() string {
	return "NaclBoxEncryptedContentValidationError"
}

// Error satisfies the builtin error interface
func (e NaclBoxEncryptedContentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNaclBoxEncryptedContent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NaclBoxEncryptedContentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NaclBoxEncryptedContentValidationError{}

// Validate checks the field values on Cursor with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Cursor) Validate() error {
	if m == nil {
		return nil
	}

	if l := len(m.GetValue()); l < 8 || l > 32 {
		return CursorValidationError{
			field:  "Value",
			reason: "value length must be between 8 and 32 bytes, inclusive",
		}
	}

	return nil
}

// CursorValidationError is the validation error returned by Cursor.Validate if
// the designated constraints aren't met.
type CursorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CursorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CursorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CursorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CursorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CursorValidationError) ErrorName() string { return "CursorValidationError" }

// Error satisfies the builtin error interface
func (e CursorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCursor.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CursorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CursorValidationError{}

// Validate checks the field values on IsTyping with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *IsTyping) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetMemberId() == nil {
		return IsTypingValidationError{
			field:  "MemberId",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetMemberId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IsTypingValidationError{
				field:  "MemberId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IsTyping

	return nil
}

// IsTypingValidationError is the validation error returned by
// IsTyping.Validate if the designated constraints aren't met.
type IsTypingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsTypingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsTypingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsTypingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsTypingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsTypingValidationError) ErrorName() string { return "IsTypingValidationError" }

// Error satisfies the builtin error interface
func (e IsTypingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsTyping.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsTypingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsTypingValidationError{}
