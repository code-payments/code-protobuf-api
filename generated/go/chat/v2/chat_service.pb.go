// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: chat/v2/chat_service.proto

package chat

import (
	v1 "github.com/code-payments/code-protobuf-api/generated/go/common/v1"
	v2 "github.com/code-payments/code-protobuf-api/generated/go/transaction/v2"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ChatType int32

const (
	ChatType_UNKNOWN_CHAT_TYPE ChatType = 0
	ChatType_NOTIFICATION      ChatType = 1
	ChatType_TWO_WAY           ChatType = 2 // GROUP             = 3;
)

// Enum value maps for ChatType.
var (
	ChatType_name = map[int32]string{
		0: "UNKNOWN_CHAT_TYPE",
		1: "NOTIFICATION",
		2: "TWO_WAY",
	}
	ChatType_value = map[string]int32{
		"UNKNOWN_CHAT_TYPE": 0,
		"NOTIFICATION":      1,
		"TWO_WAY":           2,
	}
)

func (x ChatType) Enum() *ChatType {
	p := new(ChatType)
	*p = x
	return p
}

func (x ChatType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChatType) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_v2_chat_service_proto_enumTypes[0].Descriptor()
}

func (ChatType) Type() protoreflect.EnumType {
	return &file_chat_v2_chat_service_proto_enumTypes[0]
}

func (x ChatType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChatType.Descriptor instead.
func (ChatType) EnumDescriptor() ([]byte, []int) {
	return file_chat_v2_chat_service_proto_rawDescGZIP(), []int{0}
}

type Platform int32

const (
	Platform_UNKNOWN_PLATFORM Platform = 0
	Platform_TWITTER          Platform = 1
)

// Enum value maps for Platform.
var (
	Platform_name = map[int32]string{
		0: "UNKNOWN_PLATFORM",
		1: "TWITTER",
	}
	Platform_value = map[string]int32{
		"UNKNOWN_PLATFORM": 0,
		"TWITTER":          1,
	}
)

func (x Platform) Enum() *Platform {
	p := new(Platform)
	*p = x
	return p
}

func (x Platform) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Platform) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_v2_chat_service_proto_enumTypes[1].Descriptor()
}

func (Platform) Type() protoreflect.EnumType {
	return &file_chat_v2_chat_service_proto_enumTypes[1]
}

func (x Platform) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Platform.Descriptor instead.
func (Platform) EnumDescriptor() ([]byte, []int) {
	return file_chat_v2_chat_service_proto_rawDescGZIP(), []int{1}
}

type PointerType int32

const (
	PointerType_UNKNOWN_POINTER_TYPE PointerType = 0
	PointerType_SENT                 PointerType = 1 // Always inferred by OK result in SendMessageResponse or message presence in a chat
	PointerType_DELIVERED            PointerType = 2
	PointerType_READ                 PointerType = 3
)

// Enum value maps for PointerType.
var (
	PointerType_name = map[int32]string{
		0: "UNKNOWN_POINTER_TYPE",
		1: "SENT",
		2: "DELIVERED",
		3: "READ",
	}
	PointerType_value = map[string]int32{
		"UNKNOWN_POINTER_TYPE": 0,
		"SENT":                 1,
		"DELIVERED":            2,
		"READ":                 3,
	}
)

func (x PointerType) Enum() *PointerType {
	p := new(PointerType)
	*p = x
	return p
}

func (x PointerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PointerType) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_v2_chat_service_proto_enumTypes[2].Descriptor()
}

func (PointerType) Type() protoreflect.EnumType {
	return &file_chat_v2_chat_service_proto_enumTypes[2]
}

func (x PointerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PointerType.Descriptor instead.
func (PointerType) EnumDescriptor() ([]byte, []int) {
	return file_chat_v2_chat_service_proto_rawDescGZIP(), []int{2}
}

type GetChatsRequest_Direction int32

const (
	GetChatsRequest_ASC  GetChatsRequest_Direction = 0
	GetChatsRequest_DESC GetChatsRequest_Direction = 1
)

// Enum value maps for GetChatsRequest_Direction.
var (
	GetChatsRequest_Direction_name = map[int32]string{
		0: "ASC",
		1: "DESC",
	}
	GetChatsRequest_Direction_value = map[string]int32{
		"ASC":  0,
		"DESC": 1,
	}
)

func (x GetChatsRequest_Direction) Enum() *GetChatsRequest_Direction {
	p := new(GetChatsRequest_Direction)
	*p = x
	return p
}

func (x GetChatsRequest_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetChatsRequest_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_v2_chat_service_proto_enumTypes[3].Descriptor()
}

func (GetChatsRequest_Direction) Type() protoreflect.EnumType {
	return &file_chat_v2_chat_service_proto_enumTypes[3]
}

func (x GetChatsRequest_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetChatsRequest_Direction.Descriptor instead.
func (GetChatsRequest_Direction) EnumDescriptor() ([]byte, []int) {
	return file_chat_v2_chat_service_proto_rawDescGZIP(), []int{0, 0}
}

type GetChatsResponse_Result int32

const (
	GetChatsResponse_OK        GetChatsResponse_Result = 0
	GetChatsResponse_NOT_FOUND GetChatsResponse_Result = 1
)

// Enum value maps for GetChatsResponse_Result.
var (
	GetChatsResponse_Result_name = map[int32]string{
		0: "OK",
		1: "NOT_FOUND",
	}
	GetChatsResponse_Result_value = map[string]int32{
		"OK":        0,
		"NOT_FOUND": 1,
	}
)

func (x GetChatsResponse_Result) Enum() *GetChatsResponse_Result {
	p := new(GetChatsResponse_Result)
	*p = x
	return p
}

func (x GetChatsResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetChatsResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_v2_chat_service_proto_enumTypes[4].Descriptor()
}

func (GetChatsResponse_Result) Type() protoreflect.EnumType {
	return &file_chat_v2_chat_service_proto_enumTypes[4]
}

func (x GetChatsResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetChatsResponse_Result.Descriptor instead.
func (GetChatsResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_chat_v2_chat_service_proto_rawDescGZIP(), []int{1, 0}
}

type GetMessagesRequest_Direction int32

const (
	GetMessagesRequest_ASC  GetMessagesRequest_Direction = 0
	GetMessagesRequest_DESC GetMessagesRequest_Direction = 1
)

// Enum value maps for GetMessagesRequest_Direction.
var (
	GetMessagesRequest_Direction_name = map[int32]string{
		0: "ASC",
		1: "DESC",
	}
	GetMessagesRequest_Direction_value = map[string]int32{
		"ASC":  0,
		"DESC": 1,
	}
)

func (x GetMessagesRequest_Direction) Enum() *GetMessagesRequest_Direction {
	p := new(GetMessagesRequest_Direction)
	*p = x
	return p
}

func (x GetMessagesRequest_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetMessagesRequest_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_v2_chat_service_proto_enumTypes[5].Descriptor()
}

func (GetMessagesRequest_Direction) Type() protoreflect.EnumType {
	return &file_chat_v2_chat_service_proto_enumTypes[5]
}

func (x GetMessagesRequest_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetMessagesRequest_Direction.Descriptor instead.
func (GetMessagesRequest_Direction) EnumDescriptor() ([]byte, []int) {
	return file_chat_v2_chat_service_proto_rawDescGZIP(), []int{2, 0}
}

type GetMessagesResponse_Result int32

const (
	GetMessagesResponse_OK                GetMessagesResponse_Result = 0
	GetMessagesResponse_DENIED            GetMessagesResponse_Result = 1
	GetMessagesResponse_CHAT_NOT_FOUND    GetMessagesResponse_Result = 2
	GetMessagesResponse_MESSAGE_NOT_FOUND GetMessagesResponse_Result = 3
)

// Enum value maps for GetMessagesResponse_Result.
var (
	GetMessagesResponse_Result_name = map[int32]string{
		0: "OK",
		1: "DENIED",
		2: "CHAT_NOT_FOUND",
		3: "MESSAGE_NOT_FOUND",
	}
	GetMessagesResponse_Result_value = map[string]int32{
		"OK":                0,
		"DENIED":            1,
		"CHAT_NOT_FOUND":    2,
		"MESSAGE_NOT_FOUND": 3,
	}
)

func (x GetMessagesResponse_Result) Enum() *GetMessagesResponse_Result {
	p := new(GetMessagesResponse_Result)
	*p = x
	return p
}

func (x GetMessagesResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetMessagesResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_v2_chat_service_proto_enumTypes[6].Descriptor()
}

func (GetMessagesResponse_Result) Type() protoreflect.EnumType {
	return &file_chat_v2_chat_service_proto_enumTypes[6]
}

func (x GetMessagesResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetMessagesResponse_Result.Descriptor instead.
func (GetMessagesResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_chat_v2_chat_service_proto_rawDescGZIP(), []int{3, 0}
}

type ChatStreamEventError_Code int32

const (
	ChatStreamEventError_DENIED         ChatStreamEventError_Code = 0
	ChatStreamEventError_CHAT_NOT_FOUND ChatStreamEventError_Code = 1
)

// Enum value maps for ChatStreamEventError_Code.
var (
	ChatStreamEventError_Code_name = map[int32]string{
		0: "DENIED",
		1: "CHAT_NOT_FOUND",
	}
	ChatStreamEventError_Code_value = map[string]int32{
		"DENIED":         0,
		"CHAT_NOT_FOUND": 1,
	}
)

func (x ChatStreamEventError_Code) Enum() *ChatStreamEventError_Code {
	p := new(ChatStreamEventError_Code)
	*p = x
	return p
}

func (x ChatStreamEventError_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChatStreamEventError_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_v2_chat_service_proto_enumTypes[7].Descriptor()
}

func (ChatStreamEventError_Code) Type() protoreflect.EnumType {
	return &file_chat_v2_chat_service_proto_enumTypes[7]
}

func (x ChatStreamEventError_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChatStreamEventError_Code.Descriptor instead.
func (ChatStreamEventError_Code) EnumDescriptor() ([]byte, []int) {
	return file_chat_v2_chat_service_proto_rawDescGZIP(), []int{7, 0}
}

type StartChatResponse_Result int32

const (
	StartChatResponse_OK                StartChatResponse_Result = 0
	StartChatResponse_DENIED            StartChatResponse_Result = 1
	StartChatResponse_INVALID_PARAMETER StartChatResponse_Result = 2
)

// Enum value maps for StartChatResponse_Result.
var (
	StartChatResponse_Result_name = map[int32]string{
		0: "OK",
		1: "DENIED",
		2: "INVALID_PARAMETER",
	}
	StartChatResponse_Result_value = map[string]int32{
		"OK":                0,
		"DENIED":            1,
		"INVALID_PARAMETER": 2,
	}
)

func (x StartChatResponse_Result) Enum() *StartChatResponse_Result {
	p := new(StartChatResponse_Result)
	*p = x
	return p
}

func (x StartChatResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StartChatResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_v2_chat_service_proto_enumTypes[8].Descriptor()
}

func (StartChatResponse_Result) Type() protoreflect.EnumType {
	return &file_chat_v2_chat_service_proto_enumTypes[8]
}

func (x StartChatResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StartChatResponse_Result.Descriptor instead.
func (StartChatResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_chat_v2_chat_service_proto_rawDescGZIP(), []int{12, 0}
}

type SendMessageResponse_Result int32

const (
	SendMessageResponse_OK                   SendMessageResponse_Result = 0
	SendMessageResponse_DENIED               SendMessageResponse_Result = 1
	SendMessageResponse_CHAT_NOT_FOUND       SendMessageResponse_Result = 2
	SendMessageResponse_INVALID_CHAT_TYPE    SendMessageResponse_Result = 3
	SendMessageResponse_INVALID_CONTENT_TYPE SendMessageResponse_Result = 4
)

// Enum value maps for SendMessageResponse_Result.
var (
	SendMessageResponse_Result_name = map[int32]string{
		0: "OK",
		1: "DENIED",
		2: "CHAT_NOT_FOUND",
		3: "INVALID_CHAT_TYPE",
		4: "INVALID_CONTENT_TYPE",
	}
	SendMessageResponse_Result_value = map[string]int32{
		"OK":                   0,
		"DENIED":               1,
		"CHAT_NOT_FOUND":       2,
		"INVALID_CHAT_TYPE":    3,
		"INVALID_CONTENT_TYPE": 4,
	}
)

func (x SendMessageResponse_Result) Enum() *SendMessageResponse_Result {
	p := new(SendMessageResponse_Result)
	*p = x
	return p
}

func (x SendMessageResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SendMessageResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_v2_chat_service_proto_enumTypes[9].Descriptor()
}

func (SendMessageResponse_Result) Type() protoreflect.EnumType {
	return &file_chat_v2_chat_service_proto_enumTypes[9]
}

func (x SendMessageResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SendMessageResponse_Result.Descriptor instead.
func (SendMessageResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_chat_v2_chat_service_proto_rawDescGZIP(), []int{14, 0}
}

type AdvancePointerResponse_Result int32

const (
	AdvancePointerResponse_OK                   AdvancePointerResponse_Result = 0
	AdvancePointerResponse_DENIED               AdvancePointerResponse_Result = 1
	AdvancePointerResponse_CHAT_NOT_FOUND       AdvancePointerResponse_Result = 2
	AdvancePointerResponse_MESSAGE_NOT_FOUND    AdvancePointerResponse_Result = 3
	AdvancePointerResponse_INVALID_POINTER_TYPE AdvancePointerResponse_Result = 4
)

// Enum value maps for AdvancePointerResponse_Result.
var (
	AdvancePointerResponse_Result_name = map[int32]string{
		0: "OK",
		1: "DENIED",
		2: "CHAT_NOT_FOUND",
		3: "MESSAGE_NOT_FOUND",
		4: "INVALID_POINTER_TYPE",
	}
	AdvancePointerResponse_Result_value = map[string]int32{
		"OK":                   0,
		"DENIED":               1,
		"CHAT_NOT_FOUND":       2,
		"MESSAGE_NOT_FOUND":    3,
		"INVALID_POINTER_TYPE": 4,
	}
)

func (x AdvancePointerResponse_Result) Enum() *AdvancePointerResponse_Result {
	p := new(AdvancePointerResponse_Result)
	*p = x
	return p
}

func (x AdvancePointerResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdvancePointerResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_v2_chat_service_proto_enumTypes[10].Descriptor()
}

func (AdvancePointerResponse_Result) Type() protoreflect.EnumType {
	return &file_chat_v2_chat_service_proto_enumTypes[10]
}

func (x AdvancePointerResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdvancePointerResponse_Result.Descriptor instead.
func (AdvancePointerResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_chat_v2_chat_service_proto_rawDescGZIP(), []int{16, 0}
}

type RevealIdentityResponse_Result int32

const (
	RevealIdentityResponse_OK                          RevealIdentityResponse_Result = 0
	RevealIdentityResponse_DENIED                      RevealIdentityResponse_Result = 1
	RevealIdentityResponse_CHAT_NOT_FOUND              RevealIdentityResponse_Result = 2
	RevealIdentityResponse_DIFFERENT_IDENTITY_REVEALED RevealIdentityResponse_Result = 3
)

// Enum value maps for RevealIdentityResponse_Result.
var (
	RevealIdentityResponse_Result_name = map[int32]string{
		0: "OK",
		1: "DENIED",
		2: "CHAT_NOT_FOUND",
		3: "DIFFERENT_IDENTITY_REVEALED",
	}
	RevealIdentityResponse_Result_value = map[string]int32{
		"OK":                          0,
		"DENIED":                      1,
		"CHAT_NOT_FOUND":              2,
		"DIFFERENT_IDENTITY_REVEALED": 3,
	}
)

func (x RevealIdentityResponse_Result) Enum() *RevealIdentityResponse_Result {
	p := new(RevealIdentityResponse_Result)
	*p = x
	return p
}

func (x RevealIdentityResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RevealIdentityResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_v2_chat_service_proto_enumTypes[11].Descriptor()
}

func (RevealIdentityResponse_Result) Type() protoreflect.EnumType {
	return &file_chat_v2_chat_service_proto_enumTypes[11]
}

func (x RevealIdentityResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RevealIdentityResponse_Result.Descriptor instead.
func (RevealIdentityResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_chat_v2_chat_service_proto_rawDescGZIP(), []int{18, 0}
}

type SetMuteStateResponse_Result int32

const (
	SetMuteStateResponse_OK             SetMuteStateResponse_Result = 0
	SetMuteStateResponse_DENIED         SetMuteStateResponse_Result = 1
	SetMuteStateResponse_CHAT_NOT_FOUND SetMuteStateResponse_Result = 2
	SetMuteStateResponse_CANT_MUTE      SetMuteStateResponse_Result = 3
)

// Enum value maps for SetMuteStateResponse_Result.
var (
	SetMuteStateResponse_Result_name = map[int32]string{
		0: "OK",
		1: "DENIED",
		2: "CHAT_NOT_FOUND",
		3: "CANT_MUTE",
	}
	SetMuteStateResponse_Result_value = map[string]int32{
		"OK":             0,
		"DENIED":         1,
		"CHAT_NOT_FOUND": 2,
		"CANT_MUTE":      3,
	}
)

func (x SetMuteStateResponse_Result) Enum() *SetMuteStateResponse_Result {
	p := new(SetMuteStateResponse_Result)
	*p = x
	return p
}

func (x SetMuteStateResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SetMuteStateResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_v2_chat_service_proto_enumTypes[12].Descriptor()
}

func (SetMuteStateResponse_Result) Type() protoreflect.EnumType {
	return &file_chat_v2_chat_service_proto_enumTypes[12]
}

func (x SetMuteStateResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SetMuteStateResponse_Result.Descriptor instead.
func (SetMuteStateResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_chat_v2_chat_service_proto_rawDescGZIP(), []int{20, 0}
}

type SetSubscriptionStateResponse_Result int32

const (
	SetSubscriptionStateResponse_OK               SetSubscriptionStateResponse_Result = 0
	SetSubscriptionStateResponse_DENIED           SetSubscriptionStateResponse_Result = 1
	SetSubscriptionStateResponse_CHAT_NOT_FOUND   SetSubscriptionStateResponse_Result = 2
	SetSubscriptionStateResponse_CANT_UNSUBSCRIBE SetSubscriptionStateResponse_Result = 3
)

// Enum value maps for SetSubscriptionStateResponse_Result.
var (
	SetSubscriptionStateResponse_Result_name = map[int32]string{
		0: "OK",
		1: "DENIED",
		2: "CHAT_NOT_FOUND",
		3: "CANT_UNSUBSCRIBE",
	}
	SetSubscriptionStateResponse_Result_value = map[string]int32{
		"OK":               0,
		"DENIED":           1,
		"CHAT_NOT_FOUND":   2,
		"CANT_UNSUBSCRIBE": 3,
	}
)

func (x SetSubscriptionStateResponse_Result) Enum() *SetSubscriptionStateResponse_Result {
	p := new(SetSubscriptionStateResponse_Result)
	*p = x
	return p
}

func (x SetSubscriptionStateResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SetSubscriptionStateResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_v2_chat_service_proto_enumTypes[13].Descriptor()
}

func (SetSubscriptionStateResponse_Result) Type() protoreflect.EnumType {
	return &file_chat_v2_chat_service_proto_enumTypes[13]
}

func (x SetSubscriptionStateResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SetSubscriptionStateResponse_Result.Descriptor instead.
func (SetSubscriptionStateResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_chat_v2_chat_service_proto_rawDescGZIP(), []int{22, 0}
}

type NotifyIsTypingResponse_Result int32

const (
	NotifyIsTypingResponse_OK             NotifyIsTypingResponse_Result = 0
	NotifyIsTypingResponse_DENIED         NotifyIsTypingResponse_Result = 1
	NotifyIsTypingResponse_CHAT_NOT_FOUND NotifyIsTypingResponse_Result = 2
)

// Enum value maps for NotifyIsTypingResponse_Result.
var (
	NotifyIsTypingResponse_Result_name = map[int32]string{
		0: "OK",
		1: "DENIED",
		2: "CHAT_NOT_FOUND",
	}
	NotifyIsTypingResponse_Result_value = map[string]int32{
		"OK":             0,
		"DENIED":         1,
		"CHAT_NOT_FOUND": 2,
	}
)

func (x NotifyIsTypingResponse_Result) Enum() *NotifyIsTypingResponse_Result {
	p := new(NotifyIsTypingResponse_Result)
	*p = x
	return p
}

func (x NotifyIsTypingResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NotifyIsTypingResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_v2_chat_service_proto_enumTypes[14].Descriptor()
}

func (NotifyIsTypingResponse_Result) Type() protoreflect.EnumType {
	return &file_chat_v2_chat_service_proto_enumTypes[14]
}

func (x NotifyIsTypingResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NotifyIsTypingResponse_Result.Descriptor instead.
func (NotifyIsTypingResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_chat_v2_chat_service_proto_rawDescGZIP(), []int{24, 0}
}

type ExchangeDataContent_Verb int32

const (
	ExchangeDataContent_UNKNOWN      ExchangeDataContent_Verb = 0
	ExchangeDataContent_GAVE         ExchangeDataContent_Verb = 1
	ExchangeDataContent_RECEIVED     ExchangeDataContent_Verb = 2
	ExchangeDataContent_WITHDREW     ExchangeDataContent_Verb = 3
	ExchangeDataContent_DEPOSITED    ExchangeDataContent_Verb = 4
	ExchangeDataContent_SENT         ExchangeDataContent_Verb = 5
	ExchangeDataContent_RETURNED     ExchangeDataContent_Verb = 6
	ExchangeDataContent_SPENT        ExchangeDataContent_Verb = 7
	ExchangeDataContent_PAID         ExchangeDataContent_Verb = 8
	ExchangeDataContent_PURCHASED    ExchangeDataContent_Verb = 9
	ExchangeDataContent_RECEIVED_TIP ExchangeDataContent_Verb = 10
	ExchangeDataContent_SENT_TIP     ExchangeDataContent_Verb = 11
)

// Enum value maps for ExchangeDataContent_Verb.
var (
	ExchangeDataContent_Verb_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "GAVE",
		2:  "RECEIVED",
		3:  "WITHDREW",
		4:  "DEPOSITED",
		5:  "SENT",
		6:  "RETURNED",
		7:  "SPENT",
		8:  "PAID",
		9:  "PURCHASED",
		10: "RECEIVED_TIP",
		11: "SENT_TIP",
	}
	ExchangeDataContent_Verb_value = map[string]int32{
		"UNKNOWN":      0,
		"GAVE":         1,
		"RECEIVED":     2,
		"WITHDREW":     3,
		"DEPOSITED":    4,
		"SENT":         5,
		"RETURNED":     6,
		"SPENT":        7,
		"PAID":         8,
		"PURCHASED":    9,
		"RECEIVED_TIP": 10,
		"SENT_TIP":     11,
	}
)

func (x ExchangeDataContent_Verb) Enum() *ExchangeDataContent_Verb {
	p := new(ExchangeDataContent_Verb)
	*p = x
	return p
}

func (x ExchangeDataContent_Verb) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExchangeDataContent_Verb) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_v2_chat_service_proto_enumTypes[15].Descriptor()
}

func (ExchangeDataContent_Verb) Type() protoreflect.EnumType {
	return &file_chat_v2_chat_service_proto_enumTypes[15]
}

func (x ExchangeDataContent_Verb) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExchangeDataContent_Verb.Descriptor instead.
func (ExchangeDataContent_Verb) EnumDescriptor() ([]byte, []int) {
	return file_chat_v2_chat_service_proto_rawDescGZIP(), []int{36, 0}
}

type GetChatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner     *v1.SolanaAccountId       `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Signature *v1.Signature             `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	PageSize  uint32                    `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Cursor    *Cursor                   `protobuf:"bytes,4,opt,name=cursor,proto3" json:"cursor,omitempty"`
	Direction GetChatsRequest_Direction `protobuf:"varint,5,opt,name=direction,proto3,enum=code.chat.v2.GetChatsRequest_Direction" json:"direction,omitempty"`
}

func (x *GetChatsRequest) Reset() {
	*x = GetChatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_v2_chat_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChatsRequest) ProtoMessage() {}

func (x *GetChatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v2_chat_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChatsRequest.ProtoReflect.Descriptor instead.
func (*GetChatsRequest) Descriptor() ([]byte, []int) {
	return file_chat_v2_chat_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetChatsRequest) GetOwner() *v1.SolanaAccountId {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *GetChatsRequest) GetSignature() *v1.Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *GetChatsRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetChatsRequest) GetCursor() *Cursor {
	if x != nil {
		return x.Cursor
	}
	return nil
}

func (x *GetChatsRequest) GetDirection() GetChatsRequest_Direction {
	if x != nil {
		return x.Direction
	}
	return GetChatsRequest_ASC
}

type GetChatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result GetChatsResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=code.chat.v2.GetChatsResponse_Result" json:"result,omitempty"`
	Chats  []*ChatMetadata         `protobuf:"bytes,2,rep,name=chats,proto3" json:"chats,omitempty"`
}

func (x *GetChatsResponse) Reset() {
	*x = GetChatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_v2_chat_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChatsResponse) ProtoMessage() {}

func (x *GetChatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v2_chat_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChatsResponse.ProtoReflect.Descriptor instead.
func (*GetChatsResponse) Descriptor() ([]byte, []int) {
	return file_chat_v2_chat_service_proto_rawDescGZIP(), []int{1}
}

func (x *GetChatsResponse) GetResult() GetChatsResponse_Result {
	if x != nil {
		return x.Result
	}
	return GetChatsResponse_OK
}

func (x *GetChatsResponse) GetChats() []*ChatMetadata {
	if x != nil {
		return x.Chats
	}
	return nil
}

type GetMessagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId    *ChatId                      `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	MemberId  *ChatMemberId                `protobuf:"bytes,2,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`
	Owner     *v1.SolanaAccountId          `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	Signature *v1.Signature                `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	PageSize  uint32                       `protobuf:"varint,5,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Cursor    *Cursor                      `protobuf:"bytes,6,opt,name=cursor,proto3" json:"cursor,omitempty"`
	Direction GetMessagesRequest_Direction `protobuf:"varint,7,opt,name=direction,proto3,enum=code.chat.v2.GetMessagesRequest_Direction" json:"direction,omitempty"`
}

func (x *GetMessagesRequest) Reset() {
	*x = GetMessagesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_v2_chat_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMessagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMessagesRequest) ProtoMessage() {}

func (x *GetMessagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v2_chat_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMessagesRequest.ProtoReflect.Descriptor instead.
func (*GetMessagesRequest) Descriptor() ([]byte, []int) {
	return file_chat_v2_chat_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetMessagesRequest) GetChatId() *ChatId {
	if x != nil {
		return x.ChatId
	}
	return nil
}

func (x *GetMessagesRequest) GetMemberId() *ChatMemberId {
	if x != nil {
		return x.MemberId
	}
	return nil
}

func (x *GetMessagesRequest) GetOwner() *v1.SolanaAccountId {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *GetMessagesRequest) GetSignature() *v1.Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *GetMessagesRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetMessagesRequest) GetCursor() *Cursor {
	if x != nil {
		return x.Cursor
	}
	return nil
}

func (x *GetMessagesRequest) GetDirection() GetMessagesRequest_Direction {
	if x != nil {
		return x.Direction
	}
	return GetMessagesRequest_ASC
}

type GetMessagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result   GetMessagesResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=code.chat.v2.GetMessagesResponse_Result" json:"result,omitempty"`
	Messages []*ChatMessage             `protobuf:"bytes,2,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (x *GetMessagesResponse) Reset() {
	*x = GetMessagesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_v2_chat_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMessagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMessagesResponse) ProtoMessage() {}

func (x *GetMessagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v2_chat_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMessagesResponse.ProtoReflect.Descriptor instead.
func (*GetMessagesResponse) Descriptor() ([]byte, []int) {
	return file_chat_v2_chat_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetMessagesResponse) GetResult() GetMessagesResponse_Result {
	if x != nil {
		return x.Result
	}
	return GetMessagesResponse_OK
}

func (x *GetMessagesResponse) GetMessages() []*ChatMessage {
	if x != nil {
		return x.Messages
	}
	return nil
}

type OpenChatEventStream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId    *ChatId             `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	MemberId  *ChatMemberId       `protobuf:"bytes,2,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`
	Owner     *v1.SolanaAccountId `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	Signature *v1.Signature       `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *OpenChatEventStream) Reset() {
	*x = OpenChatEventStream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_v2_chat_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenChatEventStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenChatEventStream) ProtoMessage() {}

func (x *OpenChatEventStream) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v2_chat_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenChatEventStream.ProtoReflect.Descriptor instead.
func (*OpenChatEventStream) Descriptor() ([]byte, []int) {
	return file_chat_v2_chat_service_proto_rawDescGZIP(), []int{4}
}

func (x *OpenChatEventStream) GetChatId() *ChatId {
	if x != nil {
		return x.ChatId
	}
	return nil
}

func (x *OpenChatEventStream) GetMemberId() *ChatMemberId {
	if x != nil {
		return x.MemberId
	}
	return nil
}

func (x *OpenChatEventStream) GetOwner() *v1.SolanaAccountId {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *OpenChatEventStream) GetSignature() *v1.Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type ChatStreamEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*ChatStreamEvent_Message
	//	*ChatStreamEvent_Pointer
	Type isChatStreamEvent_Type `protobuf_oneof:"type"`
}

func (x *ChatStreamEvent) Reset() {
	*x = ChatStreamEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_v2_chat_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatStreamEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatStreamEvent) ProtoMessage() {}

func (x *ChatStreamEvent) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v2_chat_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatStreamEvent.ProtoReflect.Descriptor instead.
func (*ChatStreamEvent) Descriptor() ([]byte, []int) {
	return file_chat_v2_chat_service_proto_rawDescGZIP(), []int{5}
}

func (m *ChatStreamEvent) GetType() isChatStreamEvent_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *ChatStreamEvent) GetMessage() *ChatMessage {
	if x, ok := x.GetType().(*ChatStreamEvent_Message); ok {
		return x.Message
	}
	return nil
}

func (x *ChatStreamEvent) GetPointer() *Pointer {
	if x, ok := x.GetType().(*ChatStreamEvent_Pointer); ok {
		return x.Pointer
	}
	return nil
}

type isChatStreamEvent_Type interface {
	isChatStreamEvent_Type()
}

type ChatStreamEvent_Message struct {
	Message *ChatMessage `protobuf:"bytes,1,opt,name=message,proto3,oneof"`
}

type ChatStreamEvent_Pointer struct {
	Pointer *Pointer `protobuf:"bytes,2,opt,name=pointer,proto3,oneof"`
}

func (*ChatStreamEvent_Message) isChatStreamEvent_Type() {}

func (*ChatStreamEvent_Pointer) isChatStreamEvent_Type() {}

type ChatStreamEventBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []*ChatStreamEvent `protobuf:"bytes,2,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *ChatStreamEventBatch) Reset() {
	*x = ChatStreamEventBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_v2_chat_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatStreamEventBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatStreamEventBatch) ProtoMessage() {}

func (x *ChatStreamEventBatch) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v2_chat_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatStreamEventBatch.ProtoReflect.Descriptor instead.
func (*ChatStreamEventBatch) Descriptor() ([]byte, []int) {
	return file_chat_v2_chat_service_proto_rawDescGZIP(), []int{6}
}

func (x *ChatStreamEventBatch) GetEvents() []*ChatStreamEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type ChatStreamEventError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code ChatStreamEventError_Code `protobuf:"varint,1,opt,name=code,proto3,enum=code.chat.v2.ChatStreamEventError_Code" json:"code,omitempty"`
}

func (x *ChatStreamEventError) Reset() {
	*x = ChatStreamEventError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_v2_chat_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatStreamEventError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatStreamEventError) ProtoMessage() {}

func (x *ChatStreamEventError) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v2_chat_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatStreamEventError.ProtoReflect.Descriptor instead.
func (*ChatStreamEventError) Descriptor() ([]byte, []int) {
	return file_chat_v2_chat_service_proto_rawDescGZIP(), []int{7}
}

func (x *ChatStreamEventError) GetCode() ChatStreamEventError_Code {
	if x != nil {
		return x.Code
	}
	return ChatStreamEventError_DENIED
}

type StreamChatEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*StreamChatEventsRequest_OpenStream
	//	*StreamChatEventsRequest_Pong
	Type isStreamChatEventsRequest_Type `protobuf_oneof:"type"`
}

func (x *StreamChatEventsRequest) Reset() {
	*x = StreamChatEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_v2_chat_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamChatEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamChatEventsRequest) ProtoMessage() {}

func (x *StreamChatEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v2_chat_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamChatEventsRequest.ProtoReflect.Descriptor instead.
func (*StreamChatEventsRequest) Descriptor() ([]byte, []int) {
	return file_chat_v2_chat_service_proto_rawDescGZIP(), []int{8}
}

func (m *StreamChatEventsRequest) GetType() isStreamChatEventsRequest_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *StreamChatEventsRequest) GetOpenStream() *OpenChatEventStream {
	if x, ok := x.GetType().(*StreamChatEventsRequest_OpenStream); ok {
		return x.OpenStream
	}
	return nil
}

func (x *StreamChatEventsRequest) GetPong() *v1.ClientPong {
	if x, ok := x.GetType().(*StreamChatEventsRequest_Pong); ok {
		return x.Pong
	}
	return nil
}

type isStreamChatEventsRequest_Type interface {
	isStreamChatEventsRequest_Type()
}

type StreamChatEventsRequest_OpenStream struct {
	OpenStream *OpenChatEventStream `protobuf:"bytes,1,opt,name=open_stream,json=openStream,proto3,oneof"`
}

type StreamChatEventsRequest_Pong struct {
	Pong *v1.ClientPong `protobuf:"bytes,2,opt,name=pong,proto3,oneof"`
}

func (*StreamChatEventsRequest_OpenStream) isStreamChatEventsRequest_Type() {}

func (*StreamChatEventsRequest_Pong) isStreamChatEventsRequest_Type() {}

type StreamChatEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*StreamChatEventsResponse_Events
	//	*StreamChatEventsResponse_Ping
	//	*StreamChatEventsResponse_Error
	Type isStreamChatEventsResponse_Type `protobuf_oneof:"type"`
}

func (x *StreamChatEventsResponse) Reset() {
	*x = StreamChatEventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_v2_chat_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamChatEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamChatEventsResponse) ProtoMessage() {}

func (x *StreamChatEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v2_chat_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamChatEventsResponse.ProtoReflect.Descriptor instead.
func (*StreamChatEventsResponse) Descriptor() ([]byte, []int) {
	return file_chat_v2_chat_service_proto_rawDescGZIP(), []int{9}
}

func (m *StreamChatEventsResponse) GetType() isStreamChatEventsResponse_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *StreamChatEventsResponse) GetEvents() *ChatStreamEventBatch {
	if x, ok := x.GetType().(*StreamChatEventsResponse_Events); ok {
		return x.Events
	}
	return nil
}

func (x *StreamChatEventsResponse) GetPing() *v1.ServerPing {
	if x, ok := x.GetType().(*StreamChatEventsResponse_Ping); ok {
		return x.Ping
	}
	return nil
}

func (x *StreamChatEventsResponse) GetError() *ChatStreamEventError {
	if x, ok := x.GetType().(*StreamChatEventsResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isStreamChatEventsResponse_Type interface {
	isStreamChatEventsResponse_Type()
}

type StreamChatEventsResponse_Events struct {
	Events *ChatStreamEventBatch `protobuf:"bytes,1,opt,name=events,proto3,oneof"`
}

type StreamChatEventsResponse_Ping struct {
	Ping *v1.ServerPing `protobuf:"bytes,2,opt,name=ping,proto3,oneof"`
}

type StreamChatEventsResponse_Error struct {
	Error *ChatStreamEventError `protobuf:"bytes,3,opt,name=error,proto3,oneof"`
}

func (*StreamChatEventsResponse_Events) isStreamChatEventsResponse_Type() {}

func (*StreamChatEventsResponse_Ping) isStreamChatEventsResponse_Type() {}

func (*StreamChatEventsResponse_Error) isStreamChatEventsResponse_Type() {}

type StartChatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner     *v1.SolanaAccountId `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Signature *v1.Signature       `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	// Types that are assignable to Parameters:
	//
	//	*StartChatRequest_TipChat
	Parameters isStartChatRequest_Parameters `protobuf_oneof:"parameters"`
}

func (x *StartChatRequest) Reset() {
	*x = StartChatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_v2_chat_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartChatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartChatRequest) ProtoMessage() {}

func (x *StartChatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v2_chat_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartChatRequest.ProtoReflect.Descriptor instead.
func (*StartChatRequest) Descriptor() ([]byte, []int) {
	return file_chat_v2_chat_service_proto_rawDescGZIP(), []int{10}
}

func (x *StartChatRequest) GetOwner() *v1.SolanaAccountId {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *StartChatRequest) GetSignature() *v1.Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (m *StartChatRequest) GetParameters() isStartChatRequest_Parameters {
	if m != nil {
		return m.Parameters
	}
	return nil
}

func (x *StartChatRequest) GetTipChat() *StartTipChatParameters {
	if x, ok := x.GetParameters().(*StartChatRequest_TipChat); ok {
		return x.TipChat
	}
	return nil
}

type isStartChatRequest_Parameters interface {
	isStartChatRequest_Parameters()
}

type StartChatRequest_TipChat struct {
	TipChat *StartTipChatParameters `protobuf:"bytes,3,opt,name=tip_chat,json=tipChat,proto3,oneof"` // GroupChatParameters group_chat  = 4;
}

func (*StartChatRequest_TipChat) isStartChatRequest_Parameters() {}

// Starts a two-way chat between a tipper and tippee. Chat members are
// inferred from the 12 word public keys involved in the intent. Only
// the tippee can start the chat, and the tipper is anonymous if this
// is the first between the involved Code users.
type StartTipChatParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The tip's intent ID, which can be extracted from the reference in
	// an ExchangeDataContent message content where the verb is RECEIVED_TIP.
	IntentId *v1.IntentId `protobuf:"bytes,1,opt,name=intent_id,json=intentId,proto3" json:"intent_id,omitempty"`
}

func (x *StartTipChatParameters) Reset() {
	*x = StartTipChatParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_v2_chat_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartTipChatParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartTipChatParameters) ProtoMessage() {}

func (x *StartTipChatParameters) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v2_chat_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartTipChatParameters.ProtoReflect.Descriptor instead.
func (*StartTipChatParameters) Descriptor() ([]byte, []int) {
	return file_chat_v2_chat_service_proto_rawDescGZIP(), []int{11}
}

func (x *StartTipChatParameters) GetIntentId() *v1.IntentId {
	if x != nil {
		return x.IntentId
	}
	return nil
}

type StartChatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result StartChatResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=code.chat.v2.StartChatResponse_Result" json:"result,omitempty"`
	// The chat to use if the RPC was successful
	Chat *ChatMetadata `protobuf:"bytes,2,opt,name=chat,proto3" json:"chat,omitempty"`
}

func (x *StartChatResponse) Reset() {
	*x = StartChatResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_v2_chat_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartChatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartChatResponse) ProtoMessage() {}

func (x *StartChatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v2_chat_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartChatResponse.ProtoReflect.Descriptor instead.
func (*StartChatResponse) Descriptor() ([]byte, []int) {
	return file_chat_v2_chat_service_proto_rawDescGZIP(), []int{12}
}

func (x *StartChatResponse) GetResult() StartChatResponse_Result {
	if x != nil {
		return x.Result
	}
	return StartChatResponse_OK
}

func (x *StartChatResponse) GetChat() *ChatMetadata {
	if x != nil {
		return x.Chat
	}
	return nil
}

type SendMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId   *ChatId       `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	MemberId *ChatMemberId `protobuf:"bytes,2,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`
	// Allowed content types that can be sent by client:
	//   - TextContent
	//   - ThankYouContent
	Content   []*Content          `protobuf:"bytes,3,rep,name=content,proto3" json:"content,omitempty"`
	Owner     *v1.SolanaAccountId `protobuf:"bytes,4,opt,name=owner,proto3" json:"owner,omitempty"`
	Signature *v1.Signature       `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *SendMessageRequest) Reset() {
	*x = SendMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_v2_chat_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMessageRequest) ProtoMessage() {}

func (x *SendMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v2_chat_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMessageRequest.ProtoReflect.Descriptor instead.
func (*SendMessageRequest) Descriptor() ([]byte, []int) {
	return file_chat_v2_chat_service_proto_rawDescGZIP(), []int{13}
}

func (x *SendMessageRequest) GetChatId() *ChatId {
	if x != nil {
		return x.ChatId
	}
	return nil
}

func (x *SendMessageRequest) GetMemberId() *ChatMemberId {
	if x != nil {
		return x.MemberId
	}
	return nil
}

func (x *SendMessageRequest) GetContent() []*Content {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *SendMessageRequest) GetOwner() *v1.SolanaAccountId {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *SendMessageRequest) GetSignature() *v1.Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type SendMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result SendMessageResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=code.chat.v2.SendMessageResponse_Result" json:"result,omitempty"`
	// The chat message that was sent if the RPC was succesful, which includes
	// server-side metadata like the generated message ID and official timestamp
	Message *ChatMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SendMessageResponse) Reset() {
	*x = SendMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_v2_chat_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMessageResponse) ProtoMessage() {}

func (x *SendMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v2_chat_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMessageResponse.ProtoReflect.Descriptor instead.
func (*SendMessageResponse) Descriptor() ([]byte, []int) {
	return file_chat_v2_chat_service_proto_rawDescGZIP(), []int{14}
}

func (x *SendMessageResponse) GetResult() SendMessageResponse_Result {
	if x != nil {
		return x.Result
	}
	return SendMessageResponse_OK
}

func (x *SendMessageResponse) GetMessage() *ChatMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

type AdvancePointerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId    *ChatId             `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Pointer   *Pointer            `protobuf:"bytes,2,opt,name=pointer,proto3" json:"pointer,omitempty"`
	Owner     *v1.SolanaAccountId `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	Signature *v1.Signature       `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *AdvancePointerRequest) Reset() {
	*x = AdvancePointerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_v2_chat_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdvancePointerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdvancePointerRequest) ProtoMessage() {}

func (x *AdvancePointerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v2_chat_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdvancePointerRequest.ProtoReflect.Descriptor instead.
func (*AdvancePointerRequest) Descriptor() ([]byte, []int) {
	return file_chat_v2_chat_service_proto_rawDescGZIP(), []int{15}
}

func (x *AdvancePointerRequest) GetChatId() *ChatId {
	if x != nil {
		return x.ChatId
	}
	return nil
}

func (x *AdvancePointerRequest) GetPointer() *Pointer {
	if x != nil {
		return x.Pointer
	}
	return nil
}

func (x *AdvancePointerRequest) GetOwner() *v1.SolanaAccountId {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *AdvancePointerRequest) GetSignature() *v1.Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type AdvancePointerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result AdvancePointerResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=code.chat.v2.AdvancePointerResponse_Result" json:"result,omitempty"`
}

func (x *AdvancePointerResponse) Reset() {
	*x = AdvancePointerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_v2_chat_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdvancePointerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdvancePointerResponse) ProtoMessage() {}

func (x *AdvancePointerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v2_chat_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdvancePointerResponse.ProtoReflect.Descriptor instead.
func (*AdvancePointerResponse) Descriptor() ([]byte, []int) {
	return file_chat_v2_chat_service_proto_rawDescGZIP(), []int{16}
}

func (x *AdvancePointerResponse) GetResult() AdvancePointerResponse_Result {
	if x != nil {
		return x.Result
	}
	return AdvancePointerResponse_OK
}

type RevealIdentityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId    *ChatId             `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	MemberId  *ChatMemberId       `protobuf:"bytes,2,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`
	Identity  *ChatMemberIdentity `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`
	Owner     *v1.SolanaAccountId `protobuf:"bytes,4,opt,name=owner,proto3" json:"owner,omitempty"`
	Signature *v1.Signature       `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *RevealIdentityRequest) Reset() {
	*x = RevealIdentityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_v2_chat_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevealIdentityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevealIdentityRequest) ProtoMessage() {}

func (x *RevealIdentityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v2_chat_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevealIdentityRequest.ProtoReflect.Descriptor instead.
func (*RevealIdentityRequest) Descriptor() ([]byte, []int) {
	return file_chat_v2_chat_service_proto_rawDescGZIP(), []int{17}
}

func (x *RevealIdentityRequest) GetChatId() *ChatId {
	if x != nil {
		return x.ChatId
	}
	return nil
}

func (x *RevealIdentityRequest) GetMemberId() *ChatMemberId {
	if x != nil {
		return x.MemberId
	}
	return nil
}

func (x *RevealIdentityRequest) GetIdentity() *ChatMemberIdentity {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *RevealIdentityRequest) GetOwner() *v1.SolanaAccountId {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *RevealIdentityRequest) GetSignature() *v1.Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type RevealIdentityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result RevealIdentityResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=code.chat.v2.RevealIdentityResponse_Result" json:"result,omitempty"`
	// The chat message that was sent if the RPC was successful
	Message *ChatMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *RevealIdentityResponse) Reset() {
	*x = RevealIdentityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_v2_chat_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevealIdentityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevealIdentityResponse) ProtoMessage() {}

func (x *RevealIdentityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v2_chat_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevealIdentityResponse.ProtoReflect.Descriptor instead.
func (*RevealIdentityResponse) Descriptor() ([]byte, []int) {
	return file_chat_v2_chat_service_proto_rawDescGZIP(), []int{18}
}

func (x *RevealIdentityResponse) GetResult() RevealIdentityResponse_Result {
	if x != nil {
		return x.Result
	}
	return RevealIdentityResponse_OK
}

func (x *RevealIdentityResponse) GetMessage() *ChatMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

type SetMuteStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId    *ChatId             `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	MemberId  *ChatMemberId       `protobuf:"bytes,2,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`
	IsMuted   bool                `protobuf:"varint,3,opt,name=is_muted,json=isMuted,proto3" json:"is_muted,omitempty"`
	Owner     *v1.SolanaAccountId `protobuf:"bytes,4,opt,name=owner,proto3" json:"owner,omitempty"`
	Signature *v1.Signature       `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *SetMuteStateRequest) Reset() {
	*x = SetMuteStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_v2_chat_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMuteStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMuteStateRequest) ProtoMessage() {}

func (x *SetMuteStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v2_chat_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMuteStateRequest.ProtoReflect.Descriptor instead.
func (*SetMuteStateRequest) Descriptor() ([]byte, []int) {
	return file_chat_v2_chat_service_proto_rawDescGZIP(), []int{19}
}

func (x *SetMuteStateRequest) GetChatId() *ChatId {
	if x != nil {
		return x.ChatId
	}
	return nil
}

func (x *SetMuteStateRequest) GetMemberId() *ChatMemberId {
	if x != nil {
		return x.MemberId
	}
	return nil
}

func (x *SetMuteStateRequest) GetIsMuted() bool {
	if x != nil {
		return x.IsMuted
	}
	return false
}

func (x *SetMuteStateRequest) GetOwner() *v1.SolanaAccountId {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *SetMuteStateRequest) GetSignature() *v1.Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type SetMuteStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result SetMuteStateResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=code.chat.v2.SetMuteStateResponse_Result" json:"result,omitempty"`
}

func (x *SetMuteStateResponse) Reset() {
	*x = SetMuteStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_v2_chat_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMuteStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMuteStateResponse) ProtoMessage() {}

func (x *SetMuteStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v2_chat_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMuteStateResponse.ProtoReflect.Descriptor instead.
func (*SetMuteStateResponse) Descriptor() ([]byte, []int) {
	return file_chat_v2_chat_service_proto_rawDescGZIP(), []int{20}
}

func (x *SetMuteStateResponse) GetResult() SetMuteStateResponse_Result {
	if x != nil {
		return x.Result
	}
	return SetMuteStateResponse_OK
}

type SetSubscriptionStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId       *ChatId             `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	MemberId     *ChatMemberId       `protobuf:"bytes,2,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`
	IsSubscribed bool                `protobuf:"varint,3,opt,name=is_subscribed,json=isSubscribed,proto3" json:"is_subscribed,omitempty"`
	Owner        *v1.SolanaAccountId `protobuf:"bytes,4,opt,name=owner,proto3" json:"owner,omitempty"`
	Signature    *v1.Signature       `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *SetSubscriptionStateRequest) Reset() {
	*x = SetSubscriptionStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_v2_chat_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSubscriptionStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSubscriptionStateRequest) ProtoMessage() {}

func (x *SetSubscriptionStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v2_chat_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSubscriptionStateRequest.ProtoReflect.Descriptor instead.
func (*SetSubscriptionStateRequest) Descriptor() ([]byte, []int) {
	return file_chat_v2_chat_service_proto_rawDescGZIP(), []int{21}
}

func (x *SetSubscriptionStateRequest) GetChatId() *ChatId {
	if x != nil {
		return x.ChatId
	}
	return nil
}

func (x *SetSubscriptionStateRequest) GetMemberId() *ChatMemberId {
	if x != nil {
		return x.MemberId
	}
	return nil
}

func (x *SetSubscriptionStateRequest) GetIsSubscribed() bool {
	if x != nil {
		return x.IsSubscribed
	}
	return false
}

func (x *SetSubscriptionStateRequest) GetOwner() *v1.SolanaAccountId {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *SetSubscriptionStateRequest) GetSignature() *v1.Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type SetSubscriptionStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result SetSubscriptionStateResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=code.chat.v2.SetSubscriptionStateResponse_Result" json:"result,omitempty"`
}

func (x *SetSubscriptionStateResponse) Reset() {
	*x = SetSubscriptionStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_v2_chat_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSubscriptionStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSubscriptionStateResponse) ProtoMessage() {}

func (x *SetSubscriptionStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v2_chat_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSubscriptionStateResponse.ProtoReflect.Descriptor instead.
func (*SetSubscriptionStateResponse) Descriptor() ([]byte, []int) {
	return file_chat_v2_chat_service_proto_rawDescGZIP(), []int{22}
}

func (x *SetSubscriptionStateResponse) GetResult() SetSubscriptionStateResponse_Result {
	if x != nil {
		return x.Result
	}
	return SetSubscriptionStateResponse_OK
}

type NotifyIsTypingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId    *ChatId             `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	MemberId  *ChatMemberId       `protobuf:"bytes,2,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`
	IsTyping  bool                `protobuf:"varint,3,opt,name=is_typing,json=isTyping,proto3" json:"is_typing,omitempty"`
	Owner     *v1.SolanaAccountId `protobuf:"bytes,4,opt,name=owner,proto3" json:"owner,omitempty"`
	Signature *v1.Signature       `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *NotifyIsTypingRequest) Reset() {
	*x = NotifyIsTypingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_v2_chat_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyIsTypingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyIsTypingRequest) ProtoMessage() {}

func (x *NotifyIsTypingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v2_chat_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyIsTypingRequest.ProtoReflect.Descriptor instead.
func (*NotifyIsTypingRequest) Descriptor() ([]byte, []int) {
	return file_chat_v2_chat_service_proto_rawDescGZIP(), []int{23}
}

func (x *NotifyIsTypingRequest) GetChatId() *ChatId {
	if x != nil {
		return x.ChatId
	}
	return nil
}

func (x *NotifyIsTypingRequest) GetMemberId() *ChatMemberId {
	if x != nil {
		return x.MemberId
	}
	return nil
}

func (x *NotifyIsTypingRequest) GetIsTyping() bool {
	if x != nil {
		return x.IsTyping
	}
	return false
}

func (x *NotifyIsTypingRequest) GetOwner() *v1.SolanaAccountId {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *NotifyIsTypingRequest) GetSignature() *v1.Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type NotifyIsTypingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result NotifyIsTypingResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=code.chat.v2.NotifyIsTypingResponse_Result" json:"result,omitempty"`
}

func (x *NotifyIsTypingResponse) Reset() {
	*x = NotifyIsTypingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_v2_chat_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyIsTypingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyIsTypingResponse) ProtoMessage() {}

func (x *NotifyIsTypingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v2_chat_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyIsTypingResponse.ProtoReflect.Descriptor instead.
func (*NotifyIsTypingResponse) Descriptor() ([]byte, []int) {
	return file_chat_v2_chat_service_proto_rawDescGZIP(), []int{24}
}

func (x *NotifyIsTypingResponse) GetResult() NotifyIsTypingResponse_Result {
	if x != nil {
		return x.Result
	}
	return NotifyIsTypingResponse_OK
}

type ChatId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Sufficient space is left for a consistent hash value, though other types
	// of values may be used.
	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ChatId) Reset() {
	*x = ChatId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_v2_chat_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatId) ProtoMessage() {}

func (x *ChatId) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v2_chat_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatId.ProtoReflect.Descriptor instead.
func (*ChatId) Descriptor() ([]byte, []int) {
	return file_chat_v2_chat_service_proto_rawDescGZIP(), []int{25}
}

func (x *ChatId) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type ChatMessageId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Guaranteed to be a time-based UUID. This should be used to construct a
	// consistently ordered message history based on time using a simple byte
	// comparison.
	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ChatMessageId) Reset() {
	*x = ChatMessageId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_v2_chat_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatMessageId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMessageId) ProtoMessage() {}

func (x *ChatMessageId) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v2_chat_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMessageId.ProtoReflect.Descriptor instead.
func (*ChatMessageId) Descriptor() ([]byte, []int) {
	return file_chat_v2_chat_service_proto_rawDescGZIP(), []int{26}
}

func (x *ChatMessageId) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type ChatMemberId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Globally random UUID
	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ChatMemberId) Reset() {
	*x = ChatMemberId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_v2_chat_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatMemberId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMemberId) ProtoMessage() {}

func (x *ChatMemberId) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v2_chat_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMemberId.ProtoReflect.Descriptor instead.
func (*ChatMemberId) Descriptor() ([]byte, []int) {
	return file_chat_v2_chat_service_proto_rawDescGZIP(), []int{27}
}

func (x *ChatMemberId) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// A chat
//
// todo: Support is_verified in a clean way
type ChatMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Globally unique ID for this chat
	ChatId *ChatId `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	// The type of chat
	Type ChatType `protobuf:"varint,2,opt,name=type,proto3,enum=code.chat.v2.ChatType" json:"type,omitempty"`
	// The chat title, which will be localized by server when applicable
	Title string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	// The members in this chat
	//
	// For NOTIFICATION chats, this list has exactly 1 item
	// For TWO_WAY chats, this list has exactly 2 items
	//
	// todo: If we support group chats, then we'll likely return the first page
	//
	//	or a prioritized list. The remaining members would be fetched via
	//	a new RPC.
	Members []*ChatMember `protobuf:"bytes,4,rep,name=members,proto3" json:"members,omitempty"`
	// Can the user mute this chat?
	CanMute bool `protobuf:"varint,5,opt,name=can_mute,json=canMute,proto3" json:"can_mute,omitempty"`
	// Can the user unsubscribe from this chat?
	CanUnsubscribe bool `protobuf:"varint,6,opt,name=can_unsubscribe,json=canUnsubscribe,proto3" json:"can_unsubscribe,omitempty"`
	// Cursor value for this chat for reference in subsequent GetChatsRequest
	Cursor *Cursor `protobuf:"bytes,7,opt,name=cursor,proto3" json:"cursor,omitempty"`
}

func (x *ChatMetadata) Reset() {
	*x = ChatMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_v2_chat_service_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMetadata) ProtoMessage() {}

func (x *ChatMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v2_chat_service_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMetadata.ProtoReflect.Descriptor instead.
func (*ChatMetadata) Descriptor() ([]byte, []int) {
	return file_chat_v2_chat_service_proto_rawDescGZIP(), []int{28}
}

func (x *ChatMetadata) GetChatId() *ChatId {
	if x != nil {
		return x.ChatId
	}
	return nil
}

func (x *ChatMetadata) GetType() ChatType {
	if x != nil {
		return x.Type
	}
	return ChatType_UNKNOWN_CHAT_TYPE
}

func (x *ChatMetadata) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ChatMetadata) GetMembers() []*ChatMember {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *ChatMetadata) GetCanMute() bool {
	if x != nil {
		return x.CanMute
	}
	return false
}

func (x *ChatMetadata) GetCanUnsubscribe() bool {
	if x != nil {
		return x.CanUnsubscribe
	}
	return false
}

func (x *ChatMetadata) GetCursor() *Cursor {
	if x != nil {
		return x.Cursor
	}
	return nil
}

// A message in a chat
type ChatMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Globally unique ID for this message
	MessageId *ChatMessageId `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// The chat member that sent the message. For NOTIFICATION chats, this field
	// is omitted since the chat has exactly 1 member.
	SenderId *ChatMemberId `protobuf:"bytes,2,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`
	// Ordered message content. A message may have more than one piece of content.
	Content []*Content `protobuf:"bytes,3,rep,name=content,proto3" json:"content,omitempty"`
	// Timestamp this message was generated at. This value is also encoded in
	// any time-based UUID message IDs.
	Ts *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=ts,proto3" json:"ts,omitempty"`
	// Cursor value for this message for reference in a paged GetMessagesRequest
	Cursor *Cursor `protobuf:"bytes,5,opt,name=cursor,proto3" json:"cursor,omitempty"`
}

func (x *ChatMessage) Reset() {
	*x = ChatMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_v2_chat_service_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMessage) ProtoMessage() {}

func (x *ChatMessage) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v2_chat_service_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMessage.ProtoReflect.Descriptor instead.
func (*ChatMessage) Descriptor() ([]byte, []int) {
	return file_chat_v2_chat_service_proto_rawDescGZIP(), []int{29}
}

func (x *ChatMessage) GetMessageId() *ChatMessageId {
	if x != nil {
		return x.MessageId
	}
	return nil
}

func (x *ChatMessage) GetSenderId() *ChatMemberId {
	if x != nil {
		return x.SenderId
	}
	return nil
}

func (x *ChatMessage) GetContent() []*Content {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *ChatMessage) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *ChatMessage) GetCursor() *Cursor {
	if x != nil {
		return x.Cursor
	}
	return nil
}

// A user in a chat
type ChatMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Globally unique ID for this chat member
	MemberId *ChatMemberId `protobuf:"bytes,1,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`
	// Is this chat member yourself? This enables client to identify which member_id
	// is themselves.
	IsSelf bool `protobuf:"varint,2,opt,name=is_self,json=isSelf,proto3" json:"is_self,omitempty"`
	// The chat member's identity if it has been revealed.
	Identity *ChatMemberIdentity `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`
	// Chat message state for this member. This list will have DELIVERED and READ
	// pointers, if they exist. SENT pointers should be inferred by persistence
	// on server.
	Pointers []*Pointer `protobuf:"bytes,4,rep,name=pointers,proto3" json:"pointers,omitempty"`
	// Estimated number of unread messages for the chat member in this chat
	//
	// Only valid when is_self = true
	NumUnread uint32 `protobuf:"varint,5,opt,name=num_unread,json=numUnread,proto3" json:"num_unread,omitempty"`
	// Has the chat member muted this chat?
	//
	// Only valid when is_self = true
	IsMuted bool `protobuf:"varint,6,opt,name=is_muted,json=isMuted,proto3" json:"is_muted,omitempty"`
	// Is the chat member subscribed to this chat?
	//
	// Only valid when is_self = true
	IsSubscribed bool `protobuf:"varint,7,opt,name=is_subscribed,json=isSubscribed,proto3" json:"is_subscribed,omitempty"`
}

func (x *ChatMember) Reset() {
	*x = ChatMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_v2_chat_service_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMember) ProtoMessage() {}

func (x *ChatMember) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v2_chat_service_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMember.ProtoReflect.Descriptor instead.
func (*ChatMember) Descriptor() ([]byte, []int) {
	return file_chat_v2_chat_service_proto_rawDescGZIP(), []int{30}
}

func (x *ChatMember) GetMemberId() *ChatMemberId {
	if x != nil {
		return x.MemberId
	}
	return nil
}

func (x *ChatMember) GetIsSelf() bool {
	if x != nil {
		return x.IsSelf
	}
	return false
}

func (x *ChatMember) GetIdentity() *ChatMemberIdentity {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *ChatMember) GetPointers() []*Pointer {
	if x != nil {
		return x.Pointers
	}
	return nil
}

func (x *ChatMember) GetNumUnread() uint32 {
	if x != nil {
		return x.NumUnread
	}
	return 0
}

func (x *ChatMember) GetIsMuted() bool {
	if x != nil {
		return x.IsMuted
	}
	return false
}

func (x *ChatMember) GetIsSubscribed() bool {
	if x != nil {
		return x.IsSubscribed
	}
	return false
}

// Identity to an external social platform that can be linked to a Code account
type ChatMemberIdentity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The external social platform linked to this chat member
	Platform Platform `protobuf:"varint,1,opt,name=platform,proto3,enum=code.chat.v2.Platform" json:"platform,omitempty"`
	// The chat member's username on the external social platform
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *ChatMemberIdentity) Reset() {
	*x = ChatMemberIdentity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_v2_chat_service_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatMemberIdentity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMemberIdentity) ProtoMessage() {}

func (x *ChatMemberIdentity) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v2_chat_service_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMemberIdentity.ProtoReflect.Descriptor instead.
func (*ChatMemberIdentity) Descriptor() ([]byte, []int) {
	return file_chat_v2_chat_service_proto_rawDescGZIP(), []int{31}
}

func (x *ChatMemberIdentity) GetPlatform() Platform {
	if x != nil {
		return x.Platform
	}
	return Platform_UNKNOWN_PLATFORM
}

func (x *ChatMemberIdentity) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

// Pointer in a chat indicating a user's message history state in a chat.
type Pointer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of pointer indicates which user's message history state can be
	// inferred from the pointer value. It is also possible to infer cross-pointer
	// state. For example, if a chat member has a READ pointer for a message with
	// ID N, then the DELIVERED pointer must be at least N.
	Type PointerType `protobuf:"varint,1,opt,name=type,proto3,enum=code.chat.v2.PointerType" json:"type,omitempty"`
	// Everything at or before this message ID is considered to have the state
	// inferred by the type of pointer.
	Value *ChatMessageId `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// The chat member associated with this pointer state
	MemberId *ChatMemberId `protobuf:"bytes,3,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`
}

func (x *Pointer) Reset() {
	*x = Pointer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_v2_chat_service_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pointer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pointer) ProtoMessage() {}

func (x *Pointer) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v2_chat_service_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pointer.ProtoReflect.Descriptor instead.
func (*Pointer) Descriptor() ([]byte, []int) {
	return file_chat_v2_chat_service_proto_rawDescGZIP(), []int{32}
}

func (x *Pointer) GetType() PointerType {
	if x != nil {
		return x.Type
	}
	return PointerType_UNKNOWN_POINTER_TYPE
}

func (x *Pointer) GetValue() *ChatMessageId {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Pointer) GetMemberId() *ChatMemberId {
	if x != nil {
		return x.MemberId
	}
	return nil
}

// Content for a chat message
type Content struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*Content_Text
	//	*Content_Localized
	//	*Content_ExchangeData
	//	*Content_NaclBox
	//	*Content_ThankYou
	//	*Content_IdentityRevealed
	Type isContent_Type `protobuf_oneof:"type"`
}

func (x *Content) Reset() {
	*x = Content{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_v2_chat_service_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Content) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Content) ProtoMessage() {}

func (x *Content) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v2_chat_service_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Content.ProtoReflect.Descriptor instead.
func (*Content) Descriptor() ([]byte, []int) {
	return file_chat_v2_chat_service_proto_rawDescGZIP(), []int{33}
}

func (m *Content) GetType() isContent_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *Content) GetText() *TextContent {
	if x, ok := x.GetType().(*Content_Text); ok {
		return x.Text
	}
	return nil
}

func (x *Content) GetLocalized() *LocalizedContent {
	if x, ok := x.GetType().(*Content_Localized); ok {
		return x.Localized
	}
	return nil
}

func (x *Content) GetExchangeData() *ExchangeDataContent {
	if x, ok := x.GetType().(*Content_ExchangeData); ok {
		return x.ExchangeData
	}
	return nil
}

func (x *Content) GetNaclBox() *NaclBoxEncryptedContent {
	if x, ok := x.GetType().(*Content_NaclBox); ok {
		return x.NaclBox
	}
	return nil
}

func (x *Content) GetThankYou() *ThankYouContent {
	if x, ok := x.GetType().(*Content_ThankYou); ok {
		return x.ThankYou
	}
	return nil
}

func (x *Content) GetIdentityRevealed() *IdentityRevealedContent {
	if x, ok := x.GetType().(*Content_IdentityRevealed); ok {
		return x.IdentityRevealed
	}
	return nil
}

type isContent_Type interface {
	isContent_Type()
}

type Content_Text struct {
	Text *TextContent `protobuf:"bytes,1,opt,name=text,proto3,oneof"`
}

type Content_Localized struct {
	Localized *LocalizedContent `protobuf:"bytes,2,opt,name=localized,proto3,oneof"`
}

type Content_ExchangeData struct {
	ExchangeData *ExchangeDataContent `protobuf:"bytes,3,opt,name=exchange_data,json=exchangeData,proto3,oneof"`
}

type Content_NaclBox struct {
	NaclBox *NaclBoxEncryptedContent `protobuf:"bytes,4,opt,name=nacl_box,json=naclBox,proto3,oneof"`
}

type Content_ThankYou struct {
	ThankYou *ThankYouContent `protobuf:"bytes,5,opt,name=thank_you,json=thankYou,proto3,oneof"`
}

type Content_IdentityRevealed struct {
	IdentityRevealed *IdentityRevealedContent `protobuf:"bytes,6,opt,name=identity_revealed,json=identityRevealed,proto3,oneof"`
}

func (*Content_Text) isContent_Type() {}

func (*Content_Localized) isContent_Type() {}

func (*Content_ExchangeData) isContent_Type() {}

func (*Content_NaclBox) isContent_Type() {}

func (*Content_ThankYou) isContent_Type() {}

func (*Content_IdentityRevealed) isContent_Type() {}

// Raw text content
type TextContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *TextContent) Reset() {
	*x = TextContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_v2_chat_service_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextContent) ProtoMessage() {}

func (x *TextContent) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v2_chat_service_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextContent.ProtoReflect.Descriptor instead.
func (*TextContent) Descriptor() ([]byte, []int) {
	return file_chat_v2_chat_service_proto_rawDescGZIP(), []int{34}
}

func (x *TextContent) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

// Text content that is either a localization key that should be translated on
// client, or a server-side translated piece of text.
type LocalizedContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyOrText string `protobuf:"bytes,1,opt,name=key_or_text,json=keyOrText,proto3" json:"key_or_text,omitempty"`
}

func (x *LocalizedContent) Reset() {
	*x = LocalizedContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_v2_chat_service_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalizedContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalizedContent) ProtoMessage() {}

func (x *LocalizedContent) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v2_chat_service_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalizedContent.ProtoReflect.Descriptor instead.
func (*LocalizedContent) Descriptor() ([]byte, []int) {
	return file_chat_v2_chat_service_proto_rawDescGZIP(), []int{35}
}

func (x *LocalizedContent) GetKeyOrText() string {
	if x != nil {
		return x.KeyOrText
	}
	return ""
}

// Exchange data content for movement of a value of Kin
type ExchangeDataContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Verb describing how the amount of Kin was exchanged
	//
	// Note: The current definition is not suitable outside a NOTIFICATION chat
	//
	//	as not enough context is provided as to which member this verb is
	//	associated with.
	Verb ExchangeDataContent_Verb `protobuf:"varint,1,opt,name=verb,proto3,enum=code.chat.v2.ExchangeDataContent_Verb" json:"verb,omitempty"`
	// An amount of Kin being exchanged
	//
	// Types that are assignable to ExchangeData:
	//
	//	*ExchangeDataContent_Exact
	//	*ExchangeDataContent_Partial
	ExchangeData isExchangeDataContent_ExchangeData `protobuf_oneof:"exchange_data"`
	// An ID that can be referenced to the source of the exchange of Kin
	//
	// Types that are assignable to Reference:
	//
	//	*ExchangeDataContent_Intent
	//	*ExchangeDataContent_Signature
	Reference isExchangeDataContent_Reference `protobuf_oneof:"reference"`
}

func (x *ExchangeDataContent) Reset() {
	*x = ExchangeDataContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_v2_chat_service_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeDataContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeDataContent) ProtoMessage() {}

func (x *ExchangeDataContent) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v2_chat_service_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeDataContent.ProtoReflect.Descriptor instead.
func (*ExchangeDataContent) Descriptor() ([]byte, []int) {
	return file_chat_v2_chat_service_proto_rawDescGZIP(), []int{36}
}

func (x *ExchangeDataContent) GetVerb() ExchangeDataContent_Verb {
	if x != nil {
		return x.Verb
	}
	return ExchangeDataContent_UNKNOWN
}

func (m *ExchangeDataContent) GetExchangeData() isExchangeDataContent_ExchangeData {
	if m != nil {
		return m.ExchangeData
	}
	return nil
}

func (x *ExchangeDataContent) GetExact() *v2.ExchangeData {
	if x, ok := x.GetExchangeData().(*ExchangeDataContent_Exact); ok {
		return x.Exact
	}
	return nil
}

func (x *ExchangeDataContent) GetPartial() *v2.ExchangeDataWithoutRate {
	if x, ok := x.GetExchangeData().(*ExchangeDataContent_Partial); ok {
		return x.Partial
	}
	return nil
}

func (m *ExchangeDataContent) GetReference() isExchangeDataContent_Reference {
	if m != nil {
		return m.Reference
	}
	return nil
}

func (x *ExchangeDataContent) GetIntent() *v1.IntentId {
	if x, ok := x.GetReference().(*ExchangeDataContent_Intent); ok {
		return x.Intent
	}
	return nil
}

func (x *ExchangeDataContent) GetSignature() *v1.Signature {
	if x, ok := x.GetReference().(*ExchangeDataContent_Signature); ok {
		return x.Signature
	}
	return nil
}

type isExchangeDataContent_ExchangeData interface {
	isExchangeDataContent_ExchangeData()
}

type ExchangeDataContent_Exact struct {
	Exact *v2.ExchangeData `protobuf:"bytes,2,opt,name=exact,proto3,oneof"`
}

type ExchangeDataContent_Partial struct {
	Partial *v2.ExchangeDataWithoutRate `protobuf:"bytes,3,opt,name=partial,proto3,oneof"`
}

func (*ExchangeDataContent_Exact) isExchangeDataContent_ExchangeData() {}

func (*ExchangeDataContent_Partial) isExchangeDataContent_ExchangeData() {}

type isExchangeDataContent_Reference interface {
	isExchangeDataContent_Reference()
}

type ExchangeDataContent_Intent struct {
	Intent *v1.IntentId `protobuf:"bytes,4,opt,name=intent,proto3,oneof"`
}

type ExchangeDataContent_Signature struct {
	Signature *v1.Signature `protobuf:"bytes,5,opt,name=signature,proto3,oneof"`
}

func (*ExchangeDataContent_Intent) isExchangeDataContent_Reference() {}

func (*ExchangeDataContent_Signature) isExchangeDataContent_Reference() {}

// Encrypted piece of content using NaCl box encryption
type NaclBoxEncryptedContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The sender's public key that is used to derive the shared private key for
	// decryption for message content.
	PeerPublicKey *v1.SolanaAccountId `protobuf:"bytes,1,opt,name=peer_public_key,json=peerPublicKey,proto3" json:"peer_public_key,omitempty"`
	// Globally random nonce that is unique to this encrypted piece of content
	Nonce []byte `protobuf:"bytes,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// The encrypted piece of message content
	EncryptedPayload []byte `protobuf:"bytes,3,opt,name=encrypted_payload,json=encryptedPayload,proto3" json:"encrypted_payload,omitempty"`
}

func (x *NaclBoxEncryptedContent) Reset() {
	*x = NaclBoxEncryptedContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_v2_chat_service_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NaclBoxEncryptedContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NaclBoxEncryptedContent) ProtoMessage() {}

func (x *NaclBoxEncryptedContent) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v2_chat_service_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NaclBoxEncryptedContent.ProtoReflect.Descriptor instead.
func (*NaclBoxEncryptedContent) Descriptor() ([]byte, []int) {
	return file_chat_v2_chat_service_proto_rawDescGZIP(), []int{37}
}

func (x *NaclBoxEncryptedContent) GetPeerPublicKey() *v1.SolanaAccountId {
	if x != nil {
		return x.PeerPublicKey
	}
	return nil
}

func (x *NaclBoxEncryptedContent) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *NaclBoxEncryptedContent) GetEncryptedPayload() []byte {
	if x != nil {
		return x.EncryptedPayload
	}
	return nil
}

// Thank you content that is used to thank Code users for tips
type ThankYouContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The tip intent that is being thanked.
	TipIntent *v1.IntentId `protobuf:"bytes,1,opt,name=tip_intent,json=tipIntent,proto3" json:"tip_intent,omitempty"`
}

func (x *ThankYouContent) Reset() {
	*x = ThankYouContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_v2_chat_service_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThankYouContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThankYouContent) ProtoMessage() {}

func (x *ThankYouContent) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v2_chat_service_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThankYouContent.ProtoReflect.Descriptor instead.
func (*ThankYouContent) Descriptor() ([]byte, []int) {
	return file_chat_v2_chat_service_proto_rawDescGZIP(), []int{38}
}

func (x *ThankYouContent) GetTipIntent() *v1.IntentId {
	if x != nil {
		return x.TipIntent
	}
	return nil
}

// Identity revealed content that is inserted into chat whenever a chat member
// reveals their identity
type IdentityRevealedContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The chat member who revealed their identity
	MemberId *ChatMemberId `protobuf:"bytes,1,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`
	// The identity that was revealed
	Identity *ChatMemberIdentity `protobuf:"bytes,2,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (x *IdentityRevealedContent) Reset() {
	*x = IdentityRevealedContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_v2_chat_service_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentityRevealedContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentityRevealedContent) ProtoMessage() {}

func (x *IdentityRevealedContent) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v2_chat_service_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentityRevealedContent.ProtoReflect.Descriptor instead.
func (*IdentityRevealedContent) Descriptor() ([]byte, []int) {
	return file_chat_v2_chat_service_proto_rawDescGZIP(), []int{39}
}

func (x *IdentityRevealedContent) GetMemberId() *ChatMemberId {
	if x != nil {
		return x.MemberId
	}
	return nil
}

func (x *IdentityRevealedContent) GetIdentity() *ChatMemberIdentity {
	if x != nil {
		return x.Identity
	}
	return nil
}

// Opaque cursor used across paged APIs. Underlying bytes may change as paging
// strategies evolve. Expected length value will vary based on the RPC being
// executed.
type Cursor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Cursor) Reset() {
	*x = Cursor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_v2_chat_service_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cursor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cursor) ProtoMessage() {}

func (x *Cursor) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v2_chat_service_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cursor.ProtoReflect.Descriptor instead.
func (*Cursor) Descriptor() ([]byte, []int) {
	return file_chat_v2_chat_service_proto_rawDescGZIP(), []int{40}
}

func (x *Cursor) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

var File_chat_v2_chat_service_proto protoreflect.FileDescriptor

var file_chat_v2_chat_service_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x63, 0x6f,
	0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x32, 0x1a, 0x15, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x28, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76,
	0x32, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd6, 0x02, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x05, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05,
	0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03,
	0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x26, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x09, 0xba, 0xe9, 0xc0, 0x03, 0x04, 0x2a, 0x02, 0x18, 0x64, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x63, 0x75, 0x72,
	0x73, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x52,
	0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x45, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x1e,
	0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x07, 0x0a, 0x03, 0x41,
	0x53, 0x43, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x45, 0x53, 0x43, 0x10, 0x01, 0x22, 0xb2,
	0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x3e, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x32,
	0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x0c, 0xba,
	0xe9, 0xc0, 0x03, 0x07, 0x92, 0x01, 0x04, 0x08, 0x00, 0x10, 0x64, 0x52, 0x05, 0x63, 0x68, 0x61,
	0x74, 0x73, 0x22, 0x1f, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02,
	0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e,
	0x44, 0x10, 0x01, 0x22, 0xdc, 0x03, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x07, 0x63, 0x68,
	0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x49,
	0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x63,
	0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e,
	0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03,
	0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x43, 0x0a,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x0a, 0xba, 0xe9, 0xc0,
	0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x26, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x09, 0xba, 0xe9, 0xc0, 0x03, 0x04, 0x2a, 0x02, 0x18, 0x64,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x63, 0x75,
	0x72, 0x73, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72,
	0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x48, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x1e, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x07, 0x0a, 0x03, 0x41, 0x53, 0x43, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x45, 0x53, 0x43,
	0x10, 0x01, 0x22, 0xe5, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x43, 0x0a, 0x08,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x68,
	0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0c, 0xba, 0xe9, 0xc0, 0x03, 0x07,
	0x92, 0x01, 0x04, 0x08, 0x00, 0x10, 0x64, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x22, 0x47, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f,
	0x4b, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x12, 0x0a, 0x0e, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e,
	0x44, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x03, 0x22, 0x9d, 0x02, 0x0a, 0x13, 0x4f,
	0x70, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x12, 0x39, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x76, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05,
	0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x43, 0x0a,
	0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x32, 0x2e,
	0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9,
	0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x41, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x05,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x0f, 0x43,
	0x68, 0x61, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x35,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x43,
	0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52,
	0x07, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x42, 0x0d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x05, 0xb8, 0xe9, 0xc0, 0x03, 0x01, 0x22, 0x5c, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x74, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12,
	0x44, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x43,
	0x68, 0x61, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x0d,
	0xba, 0xe9, 0xc0, 0x03, 0x08, 0x92, 0x01, 0x05, 0x08, 0x01, 0x10, 0x80, 0x08, 0x52, 0x06, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x7b, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x74, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3b, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x26, 0x0a, 0x04, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12,
	0x0a, 0x0e, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44,
	0x10, 0x01, 0x22, 0xa0, 0x01, 0x0a, 0x17, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44,
	0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x76, 0x32, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x48, 0x00, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x12, 0x30, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x6e, 0x67, 0x48, 0x00,
	0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x42, 0x0d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x05,
	0xb8, 0xe9, 0xc0, 0x03, 0x01, 0x22, 0xd5, 0x01, 0x0a, 0x18, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x43, 0x68, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76,
	0x32, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x48, 0x00, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x30, 0x0a, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x04, 0x70, 0x69,
	0x6e, 0x67, 0x12, 0x3a, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x32,
	0x2e, 0x43, 0x68, 0x61, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x0d,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x05, 0xb8, 0xe9, 0xc0, 0x03, 0x01, 0x22, 0xf2, 0x01,
	0x0a, 0x10, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x41, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x05,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x74, 0x69,
	0x70, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x70, 0x43, 0x68, 0x61, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x48, 0x00, 0x52, 0x07, 0x74, 0x69, 0x70, 0x43, 0x68, 0x61, 0x74, 0x42, 0x13, 0x0a,
	0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x05, 0xb8, 0xe9, 0xc0,
	0x03, 0x01, 0x22, 0x5b, 0x0a, 0x16, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x70, 0x43, 0x68,
	0x61, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x41, 0x0a, 0x09,
	0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05,
	0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22,
	0xb8, 0x01, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x68, 0x61, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x76, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x63, 0x68, 0x61, 0x74, 0x22, 0x33, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4e, 0x49, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x10, 0x02, 0x22, 0xdb, 0x02, 0x0a, 0x12, 0x53,
	0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x39, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76,
	0x32, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x09,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x43,
	0x68, 0x61, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0,
	0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x3d, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76,
	0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0xba, 0xe9, 0xc0, 0x03, 0x07,
	0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x41, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xef, 0x01, 0x0a, 0x13, 0x53, 0x65, 0x6e,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x40, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x28, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x32, 0x2e,
	0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x33, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x76, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x61, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4e,
	0x49, 0x45, 0x44, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x03,
	0x12, 0x18, 0x0a, 0x14, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x54,
	0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x04, 0x22, 0x97, 0x02, 0x0a, 0x15, 0x41,
	0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0,
	0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12,
	0x3b, 0x0a, 0x07, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x32, 0x2e,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01,
	0x02, 0x10, 0x01, 0x52, 0x07, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x05,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c,
	0x61, 0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9,
	0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12,
	0x43, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x0a, 0xba,
	0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x22, 0xc0, 0x01, 0x0a, 0x16, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x43, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2b, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x41,
	0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x61, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06,
	0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46,
	0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x03, 0x12, 0x18, 0x0a,
	0x14, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x04, 0x22, 0xe9, 0x02, 0x0a, 0x15, 0x52, 0x65, 0x76, 0x65,
	0x61, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x39, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76,
	0x32, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x09,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x43,
	0x68, 0x61, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0,
	0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x48, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x76, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10,
	0x01, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x41, 0x0a, 0x05, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61,
	0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0,
	0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x43,
	0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x0a, 0xba, 0xe9,
	0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x22, 0xe5, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65,
	0x76, 0x65, 0x61, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x33, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x76, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x51, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45,
	0x4e, 0x49, 0x45, 0x44, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x49,
	0x46, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59,
	0x5f, 0x52, 0x45, 0x56, 0x45, 0x41, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x22, 0xb8, 0x02, 0x0a, 0x13,
	0x53, 0x65, 0x74, 0x4d, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x76, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03,
	0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x43,
	0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x32,
	0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x42, 0x0a, 0xba,
	0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x4d, 0x75, 0x74, 0x65, 0x64, 0x12, 0x41,
	0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x0a,
	0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x12, 0x43, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42,
	0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x9a, 0x01, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x4d, 0x75,
	0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x41, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x29, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x53,
	0x65, 0x74, 0x4d, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x3f, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02,
	0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x12, 0x0a, 0x0e, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55,
	0x4e, 0x44, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x54, 0x5f, 0x4d, 0x55, 0x54,
	0x45, 0x10, 0x03, 0x22, 0xca, 0x02, 0x0a, 0x1b, 0x53, 0x65, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x76, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03,
	0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x43,
	0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x32,
	0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x42, 0x0a, 0xba,
	0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x12, 0x41, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05,
	0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x22, 0xb1, 0x01, 0x0a, 0x1c, 0x53, 0x65, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x49, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x32,
	0x2e, 0x53, 0x65, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x46, 0x0a, 0x06,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x48,
	0x41, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x14,
	0x0a, 0x10, 0x43, 0x41, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49,
	0x42, 0x45, 0x10, 0x03, 0x22, 0xbc, 0x02, 0x0a, 0x15, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x49,
	0x73, 0x54, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39,
	0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x43,
	0x68, 0x61, 0x74, 0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10,
	0x01, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x09, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x74,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x69, 0x73, 0x54, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x41, 0x0a, 0x05, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61,
	0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0,
	0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x43,
	0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x0a, 0xba, 0xe9,
	0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x16, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x49, 0x73,
	0x54, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x49, 0x73, 0x54, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x30, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a,
	0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x02, 0x22, 0x2b, 0x0a, 0x06, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x0b,
	0xba, 0xe9, 0xc0, 0x03, 0x06, 0x7a, 0x04, 0x10, 0x20, 0x18, 0x20, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x32, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x42, 0x0b, 0xba, 0xe9, 0xc0, 0x03, 0x06, 0x7a, 0x04, 0x10, 0x10, 0x18, 0x10, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x31, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x0b, 0xba, 0xe9, 0xc0, 0x03, 0x06, 0x7a, 0x04, 0x10, 0x10,
	0x18, 0x10, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd9, 0x02, 0x0a, 0x0c, 0x43, 0x68,
	0x61, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x07, 0x63, 0x68,
	0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x49,
	0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x63,
	0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x76, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0xba, 0xe9, 0xc0,
	0x03, 0x05, 0x82, 0x01, 0x02, 0x20, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xba, 0xe9,
	0xc0, 0x03, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0x80, 0x08, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x40, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76,
	0x32, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x0c, 0xba, 0xe9,
	0xc0, 0x03, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x02, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x61, 0x6e, 0x5f, 0x6d, 0x75, 0x74, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x61, 0x6e, 0x4d, 0x75, 0x74, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x63, 0x61, 0x6e, 0x5f, 0x75, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x61, 0x6e, 0x55, 0x6e, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x52, 0x06, 0x63,
	0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0xb3, 0x02, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x46, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02,
	0x10, 0x01, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x37, 0x0a,
	0x09, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x32, 0x2e,
	0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x52, 0x08, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x0c,
	0xba, 0xe9, 0xc0, 0x03, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x02, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0xba,
	0xe9, 0xc0, 0x03, 0x05, 0xb2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x02, 0x74, 0x73, 0x12, 0x2c, 0x0a,
	0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x75, 0x72,
	0x73, 0x6f, 0x72, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0xc8, 0x02, 0x0a, 0x0a,
	0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x09, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x68, 0x61,
	0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05,
	0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x6c, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x69, 0x73, 0x53, 0x65, 0x6c, 0x66, 0x12, 0x3c, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x3f, 0x0a, 0x08, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x42,
	0x0c, 0xba, 0xe9, 0xc0, 0x03, 0x07, 0x92, 0x01, 0x04, 0x08, 0x00, 0x10, 0x02, 0x52, 0x08, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x5f, 0x75,
	0x6e, 0x72, 0x65, 0x61, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6e, 0x75, 0x6d,
	0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x6d, 0x75, 0x74,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x4d, 0x75, 0x74, 0x65,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x22, 0x7d, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x3e, 0x0a, 0x08,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x82, 0x01, 0x02,
	0x18, 0x01, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x27, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b,
	0xba, 0xe9, 0xc0, 0x03, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x0f, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xc8, 0x01, 0x0a, 0x07, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x12, 0x39, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03,
	0x05, 0x82, 0x01, 0x02, 0x20, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x43, 0x0a, 0x09, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x68,
	0x61, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03,
	0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64,
	0x22, 0xab, 0x03, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x3e, 0x0a,
	0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x32, 0x2e,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x48, 0x0a,
	0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x76, 0x32, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x08, 0x6e, 0x61, 0x63, 0x6c, 0x5f,
	0x62, 0x6f, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x4e, 0x61, 0x63, 0x6c, 0x42, 0x6f, 0x78,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x07, 0x6e, 0x61, 0x63, 0x6c, 0x42, 0x6f, 0x78, 0x12, 0x3c, 0x0a, 0x09, 0x74,
	0x68, 0x61, 0x6e, 0x6b, 0x5f, 0x79, 0x6f, 0x75, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x68,
	0x61, 0x6e, 0x6b, 0x59, 0x6f, 0x75, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x08, 0x74, 0x68, 0x61, 0x6e, 0x6b, 0x59, 0x6f, 0x75, 0x12, 0x54, 0x0a, 0x11, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x76, 0x32, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x76, 0x65,
	0x61, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x10, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x42,
	0x0d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x05, 0xb8, 0xe9, 0xc0, 0x03, 0x01, 0x22, 0x2f,
	0x0a, 0x0b, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xba, 0xe9, 0xc0,
	0x03, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0x80, 0x08, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22,
	0x40, 0x0a, 0x10, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x0b, 0x6b, 0x65, 0x79, 0x5f, 0x6f, 0x72, 0x5f, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xba, 0xe9, 0xc0, 0x03, 0x07, 0x72,
	0x05, 0x10, 0x01, 0x18, 0x80, 0x08, 0x52, 0x09, 0x6b, 0x65, 0x79, 0x4f, 0x72, 0x54, 0x65, 0x78,
	0x74, 0x22, 0xa4, 0x04, 0x0a, 0x13, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x04, 0x76, 0x65, 0x72,
	0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x65, 0x72, 0x62, 0x42,
	0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x82, 0x01, 0x02, 0x20, 0x00, 0x52, 0x04, 0x76, 0x65, 0x72,
	0x62, 0x12, 0x39, 0x0a, 0x05, 0x65, 0x78, 0x61, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x05, 0x65, 0x78, 0x61, 0x63, 0x74, 0x12, 0x48, 0x0a, 0x07,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x32, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x52, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x07, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x32, 0x0a, 0x06, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x48, 0x01, 0x52, 0x06, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x01, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x04, 0x56, 0x65, 0x72, 0x62, 0x12, 0x0b,
	0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x47,
	0x41, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45,
	0x44, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x45, 0x57, 0x10,
	0x03, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x45, 0x44, 0x10, 0x04,
	0x12, 0x08, 0x0a, 0x04, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45,
	0x54, 0x55, 0x52, 0x4e, 0x45, 0x44, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x50, 0x45, 0x4e,
	0x54, 0x10, 0x07, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x41, 0x49, 0x44, 0x10, 0x08, 0x12, 0x0d, 0x0a,
	0x09, 0x50, 0x55, 0x52, 0x43, 0x48, 0x41, 0x53, 0x45, 0x44, 0x10, 0x09, 0x12, 0x10, 0x0a, 0x0c,
	0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x44, 0x5f, 0x54, 0x49, 0x50, 0x10, 0x0a, 0x12, 0x0c,
	0x0a, 0x08, 0x53, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x49, 0x50, 0x10, 0x0b, 0x42, 0x16, 0x0a, 0x0d,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x12, 0x05, 0xb8,
	0xe9, 0xc0, 0x03, 0x01, 0x42, 0x12, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x05, 0xb8, 0xe9, 0xc0, 0x03, 0x01, 0x22, 0xcc, 0x01, 0x0a, 0x17, 0x4e, 0x61, 0x63,
	0x6c, 0x42, 0x6f, 0x78, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x53, 0x0a, 0x0f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x0a,
	0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0d, 0x70, 0x65, 0x65, 0x72,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x05, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x0b, 0xba, 0xe9, 0xc0, 0x03, 0x06, 0x7a,
	0x04, 0x10, 0x18, 0x18, 0x18, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x11,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x0c, 0xba, 0xe9, 0xc0, 0x03, 0x07, 0x7a, 0x05,
	0x10, 0x01, 0x18, 0x80, 0x08, 0x52, 0x10, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x62, 0x0a, 0x0f, 0x54, 0x68, 0x61, 0x6e, 0x6b,
	0x59, 0x6f, 0x75, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x0a, 0x74, 0x69,
	0x70, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x09, 0x74, 0x69, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4a,
	0x04, 0x08, 0x02, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0xa8, 0x01, 0x0a, 0x17,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x65, 0x64,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02,
	0x10, 0x01, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x08,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x68,
	0x61, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x08, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x2b, 0x0a, 0x06, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72,
	0x12, 0x21, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42,
	0x0b, 0xba, 0xe9, 0xc0, 0x03, 0x06, 0x7a, 0x04, 0x10, 0x08, 0x18, 0x20, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x2a, 0x40, 0x0a, 0x08, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x15, 0x0a, 0x11, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x57, 0x4f, 0x5f,
	0x57, 0x41, 0x59, 0x10, 0x02, 0x2a, 0x2d, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x50, 0x4c, 0x41,
	0x54, 0x46, 0x4f, 0x52, 0x4d, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x57, 0x49, 0x54, 0x54,
	0x45, 0x52, 0x10, 0x01, 0x2a, 0x4a, 0x0a, 0x0b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x50,
	0x4f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a,
	0x04, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x45, 0x4c, 0x49, 0x56,
	0x45, 0x52, 0x45, 0x44, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x45, 0x41, 0x44, 0x10, 0x03,
	0x32, 0x8b, 0x07, 0x0a, 0x04, 0x43, 0x68, 0x61, 0x74, 0x12, 0x49, 0x0a, 0x08, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x74, 0x73, 0x12, 0x1d, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x20, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x10, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x25, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x76, 0x32, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12,
	0x4c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x68, 0x61, 0x74, 0x12, 0x1e, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a,
	0x0b, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x20, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x6e, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65,
	0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x5b, 0x0a, 0x0e, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x12, 0x23, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x76, 0x32, 0x2e, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b,
	0x0a, 0x0e, 0x52, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x23, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x32, 0x2e,
	0x52, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x0c, 0x53,
	0x65, 0x74, 0x4d, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x75,
	0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65,
	0x74, 0x4d, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x6d, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x29, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x5b, 0x0a, 0x0e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x49, 0x73, 0x54, 0x79, 0x70,
	0x69, 0x6e, 0x67, 0x12, 0x23, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x76, 0x32, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x49, 0x73, 0x54, 0x79, 0x70, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x49, 0x73,
	0x54, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6b,
	0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x69, 0x6e, 0x63, 0x2e, 0x67, 0x65,
	0x6e, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x32, 0x5a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x2d, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2f,
	0x67, 0x6f, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x76, 0x32, 0x3b, 0x63, 0x68, 0x61, 0x74, 0xa2,
	0x02, 0x09, 0x43, 0x50, 0x42, 0x43, 0x68, 0x61, 0x74, 0x56, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_chat_v2_chat_service_proto_rawDescOnce sync.Once
	file_chat_v2_chat_service_proto_rawDescData = file_chat_v2_chat_service_proto_rawDesc
)

func file_chat_v2_chat_service_proto_rawDescGZIP() []byte {
	file_chat_v2_chat_service_proto_rawDescOnce.Do(func() {
		file_chat_v2_chat_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_chat_v2_chat_service_proto_rawDescData)
	})
	return file_chat_v2_chat_service_proto_rawDescData
}

var file_chat_v2_chat_service_proto_enumTypes = make([]protoimpl.EnumInfo, 16)
var file_chat_v2_chat_service_proto_msgTypes = make([]protoimpl.MessageInfo, 41)
var file_chat_v2_chat_service_proto_goTypes = []interface{}{
	(ChatType)(0),                            // 0: code.chat.v2.ChatType
	(Platform)(0),                            // 1: code.chat.v2.Platform
	(PointerType)(0),                         // 2: code.chat.v2.PointerType
	(GetChatsRequest_Direction)(0),           // 3: code.chat.v2.GetChatsRequest.Direction
	(GetChatsResponse_Result)(0),             // 4: code.chat.v2.GetChatsResponse.Result
	(GetMessagesRequest_Direction)(0),        // 5: code.chat.v2.GetMessagesRequest.Direction
	(GetMessagesResponse_Result)(0),          // 6: code.chat.v2.GetMessagesResponse.Result
	(ChatStreamEventError_Code)(0),           // 7: code.chat.v2.ChatStreamEventError.Code
	(StartChatResponse_Result)(0),            // 8: code.chat.v2.StartChatResponse.Result
	(SendMessageResponse_Result)(0),          // 9: code.chat.v2.SendMessageResponse.Result
	(AdvancePointerResponse_Result)(0),       // 10: code.chat.v2.AdvancePointerResponse.Result
	(RevealIdentityResponse_Result)(0),       // 11: code.chat.v2.RevealIdentityResponse.Result
	(SetMuteStateResponse_Result)(0),         // 12: code.chat.v2.SetMuteStateResponse.Result
	(SetSubscriptionStateResponse_Result)(0), // 13: code.chat.v2.SetSubscriptionStateResponse.Result
	(NotifyIsTypingResponse_Result)(0),       // 14: code.chat.v2.NotifyIsTypingResponse.Result
	(ExchangeDataContent_Verb)(0),            // 15: code.chat.v2.ExchangeDataContent.Verb
	(*GetChatsRequest)(nil),                  // 16: code.chat.v2.GetChatsRequest
	(*GetChatsResponse)(nil),                 // 17: code.chat.v2.GetChatsResponse
	(*GetMessagesRequest)(nil),               // 18: code.chat.v2.GetMessagesRequest
	(*GetMessagesResponse)(nil),              // 19: code.chat.v2.GetMessagesResponse
	(*OpenChatEventStream)(nil),              // 20: code.chat.v2.OpenChatEventStream
	(*ChatStreamEvent)(nil),                  // 21: code.chat.v2.ChatStreamEvent
	(*ChatStreamEventBatch)(nil),             // 22: code.chat.v2.ChatStreamEventBatch
	(*ChatStreamEventError)(nil),             // 23: code.chat.v2.ChatStreamEventError
	(*StreamChatEventsRequest)(nil),          // 24: code.chat.v2.StreamChatEventsRequest
	(*StreamChatEventsResponse)(nil),         // 25: code.chat.v2.StreamChatEventsResponse
	(*StartChatRequest)(nil),                 // 26: code.chat.v2.StartChatRequest
	(*StartTipChatParameters)(nil),           // 27: code.chat.v2.StartTipChatParameters
	(*StartChatResponse)(nil),                // 28: code.chat.v2.StartChatResponse
	(*SendMessageRequest)(nil),               // 29: code.chat.v2.SendMessageRequest
	(*SendMessageResponse)(nil),              // 30: code.chat.v2.SendMessageResponse
	(*AdvancePointerRequest)(nil),            // 31: code.chat.v2.AdvancePointerRequest
	(*AdvancePointerResponse)(nil),           // 32: code.chat.v2.AdvancePointerResponse
	(*RevealIdentityRequest)(nil),            // 33: code.chat.v2.RevealIdentityRequest
	(*RevealIdentityResponse)(nil),           // 34: code.chat.v2.RevealIdentityResponse
	(*SetMuteStateRequest)(nil),              // 35: code.chat.v2.SetMuteStateRequest
	(*SetMuteStateResponse)(nil),             // 36: code.chat.v2.SetMuteStateResponse
	(*SetSubscriptionStateRequest)(nil),      // 37: code.chat.v2.SetSubscriptionStateRequest
	(*SetSubscriptionStateResponse)(nil),     // 38: code.chat.v2.SetSubscriptionStateResponse
	(*NotifyIsTypingRequest)(nil),            // 39: code.chat.v2.NotifyIsTypingRequest
	(*NotifyIsTypingResponse)(nil),           // 40: code.chat.v2.NotifyIsTypingResponse
	(*ChatId)(nil),                           // 41: code.chat.v2.ChatId
	(*ChatMessageId)(nil),                    // 42: code.chat.v2.ChatMessageId
	(*ChatMemberId)(nil),                     // 43: code.chat.v2.ChatMemberId
	(*ChatMetadata)(nil),                     // 44: code.chat.v2.ChatMetadata
	(*ChatMessage)(nil),                      // 45: code.chat.v2.ChatMessage
	(*ChatMember)(nil),                       // 46: code.chat.v2.ChatMember
	(*ChatMemberIdentity)(nil),               // 47: code.chat.v2.ChatMemberIdentity
	(*Pointer)(nil),                          // 48: code.chat.v2.Pointer
	(*Content)(nil),                          // 49: code.chat.v2.Content
	(*TextContent)(nil),                      // 50: code.chat.v2.TextContent
	(*LocalizedContent)(nil),                 // 51: code.chat.v2.LocalizedContent
	(*ExchangeDataContent)(nil),              // 52: code.chat.v2.ExchangeDataContent
	(*NaclBoxEncryptedContent)(nil),          // 53: code.chat.v2.NaclBoxEncryptedContent
	(*ThankYouContent)(nil),                  // 54: code.chat.v2.ThankYouContent
	(*IdentityRevealedContent)(nil),          // 55: code.chat.v2.IdentityRevealedContent
	(*Cursor)(nil),                           // 56: code.chat.v2.Cursor
	(*v1.SolanaAccountId)(nil),               // 57: code.common.v1.SolanaAccountId
	(*v1.Signature)(nil),                     // 58: code.common.v1.Signature
	(*v1.ClientPong)(nil),                    // 59: code.common.v1.ClientPong
	(*v1.ServerPing)(nil),                    // 60: code.common.v1.ServerPing
	(*v1.IntentId)(nil),                      // 61: code.common.v1.IntentId
	(*timestamppb.Timestamp)(nil),            // 62: google.protobuf.Timestamp
	(*v2.ExchangeData)(nil),                  // 63: code.transaction.v2.ExchangeData
	(*v2.ExchangeDataWithoutRate)(nil),       // 64: code.transaction.v2.ExchangeDataWithoutRate
}
var file_chat_v2_chat_service_proto_depIdxs = []int32{
	57,  // 0: code.chat.v2.GetChatsRequest.owner:type_name -> code.common.v1.SolanaAccountId
	58,  // 1: code.chat.v2.GetChatsRequest.signature:type_name -> code.common.v1.Signature
	56,  // 2: code.chat.v2.GetChatsRequest.cursor:type_name -> code.chat.v2.Cursor
	3,   // 3: code.chat.v2.GetChatsRequest.direction:type_name -> code.chat.v2.GetChatsRequest.Direction
	4,   // 4: code.chat.v2.GetChatsResponse.result:type_name -> code.chat.v2.GetChatsResponse.Result
	44,  // 5: code.chat.v2.GetChatsResponse.chats:type_name -> code.chat.v2.ChatMetadata
	41,  // 6: code.chat.v2.GetMessagesRequest.chat_id:type_name -> code.chat.v2.ChatId
	43,  // 7: code.chat.v2.GetMessagesRequest.member_id:type_name -> code.chat.v2.ChatMemberId
	57,  // 8: code.chat.v2.GetMessagesRequest.owner:type_name -> code.common.v1.SolanaAccountId
	58,  // 9: code.chat.v2.GetMessagesRequest.signature:type_name -> code.common.v1.Signature
	56,  // 10: code.chat.v2.GetMessagesRequest.cursor:type_name -> code.chat.v2.Cursor
	5,   // 11: code.chat.v2.GetMessagesRequest.direction:type_name -> code.chat.v2.GetMessagesRequest.Direction
	6,   // 12: code.chat.v2.GetMessagesResponse.result:type_name -> code.chat.v2.GetMessagesResponse.Result
	45,  // 13: code.chat.v2.GetMessagesResponse.messages:type_name -> code.chat.v2.ChatMessage
	41,  // 14: code.chat.v2.OpenChatEventStream.chat_id:type_name -> code.chat.v2.ChatId
	43,  // 15: code.chat.v2.OpenChatEventStream.member_id:type_name -> code.chat.v2.ChatMemberId
	57,  // 16: code.chat.v2.OpenChatEventStream.owner:type_name -> code.common.v1.SolanaAccountId
	58,  // 17: code.chat.v2.OpenChatEventStream.signature:type_name -> code.common.v1.Signature
	45,  // 18: code.chat.v2.ChatStreamEvent.message:type_name -> code.chat.v2.ChatMessage
	48,  // 19: code.chat.v2.ChatStreamEvent.pointer:type_name -> code.chat.v2.Pointer
	21,  // 20: code.chat.v2.ChatStreamEventBatch.events:type_name -> code.chat.v2.ChatStreamEvent
	7,   // 21: code.chat.v2.ChatStreamEventError.code:type_name -> code.chat.v2.ChatStreamEventError.Code
	20,  // 22: code.chat.v2.StreamChatEventsRequest.open_stream:type_name -> code.chat.v2.OpenChatEventStream
	59,  // 23: code.chat.v2.StreamChatEventsRequest.pong:type_name -> code.common.v1.ClientPong
	22,  // 24: code.chat.v2.StreamChatEventsResponse.events:type_name -> code.chat.v2.ChatStreamEventBatch
	60,  // 25: code.chat.v2.StreamChatEventsResponse.ping:type_name -> code.common.v1.ServerPing
	23,  // 26: code.chat.v2.StreamChatEventsResponse.error:type_name -> code.chat.v2.ChatStreamEventError
	57,  // 27: code.chat.v2.StartChatRequest.owner:type_name -> code.common.v1.SolanaAccountId
	58,  // 28: code.chat.v2.StartChatRequest.signature:type_name -> code.common.v1.Signature
	27,  // 29: code.chat.v2.StartChatRequest.tip_chat:type_name -> code.chat.v2.StartTipChatParameters
	61,  // 30: code.chat.v2.StartTipChatParameters.intent_id:type_name -> code.common.v1.IntentId
	8,   // 31: code.chat.v2.StartChatResponse.result:type_name -> code.chat.v2.StartChatResponse.Result
	44,  // 32: code.chat.v2.StartChatResponse.chat:type_name -> code.chat.v2.ChatMetadata
	41,  // 33: code.chat.v2.SendMessageRequest.chat_id:type_name -> code.chat.v2.ChatId
	43,  // 34: code.chat.v2.SendMessageRequest.member_id:type_name -> code.chat.v2.ChatMemberId
	49,  // 35: code.chat.v2.SendMessageRequest.content:type_name -> code.chat.v2.Content
	57,  // 36: code.chat.v2.SendMessageRequest.owner:type_name -> code.common.v1.SolanaAccountId
	58,  // 37: code.chat.v2.SendMessageRequest.signature:type_name -> code.common.v1.Signature
	9,   // 38: code.chat.v2.SendMessageResponse.result:type_name -> code.chat.v2.SendMessageResponse.Result
	45,  // 39: code.chat.v2.SendMessageResponse.message:type_name -> code.chat.v2.ChatMessage
	41,  // 40: code.chat.v2.AdvancePointerRequest.chat_id:type_name -> code.chat.v2.ChatId
	48,  // 41: code.chat.v2.AdvancePointerRequest.pointer:type_name -> code.chat.v2.Pointer
	57,  // 42: code.chat.v2.AdvancePointerRequest.owner:type_name -> code.common.v1.SolanaAccountId
	58,  // 43: code.chat.v2.AdvancePointerRequest.signature:type_name -> code.common.v1.Signature
	10,  // 44: code.chat.v2.AdvancePointerResponse.result:type_name -> code.chat.v2.AdvancePointerResponse.Result
	41,  // 45: code.chat.v2.RevealIdentityRequest.chat_id:type_name -> code.chat.v2.ChatId
	43,  // 46: code.chat.v2.RevealIdentityRequest.member_id:type_name -> code.chat.v2.ChatMemberId
	47,  // 47: code.chat.v2.RevealIdentityRequest.identity:type_name -> code.chat.v2.ChatMemberIdentity
	57,  // 48: code.chat.v2.RevealIdentityRequest.owner:type_name -> code.common.v1.SolanaAccountId
	58,  // 49: code.chat.v2.RevealIdentityRequest.signature:type_name -> code.common.v1.Signature
	11,  // 50: code.chat.v2.RevealIdentityResponse.result:type_name -> code.chat.v2.RevealIdentityResponse.Result
	45,  // 51: code.chat.v2.RevealIdentityResponse.message:type_name -> code.chat.v2.ChatMessage
	41,  // 52: code.chat.v2.SetMuteStateRequest.chat_id:type_name -> code.chat.v2.ChatId
	43,  // 53: code.chat.v2.SetMuteStateRequest.member_id:type_name -> code.chat.v2.ChatMemberId
	57,  // 54: code.chat.v2.SetMuteStateRequest.owner:type_name -> code.common.v1.SolanaAccountId
	58,  // 55: code.chat.v2.SetMuteStateRequest.signature:type_name -> code.common.v1.Signature
	12,  // 56: code.chat.v2.SetMuteStateResponse.result:type_name -> code.chat.v2.SetMuteStateResponse.Result
	41,  // 57: code.chat.v2.SetSubscriptionStateRequest.chat_id:type_name -> code.chat.v2.ChatId
	43,  // 58: code.chat.v2.SetSubscriptionStateRequest.member_id:type_name -> code.chat.v2.ChatMemberId
	57,  // 59: code.chat.v2.SetSubscriptionStateRequest.owner:type_name -> code.common.v1.SolanaAccountId
	58,  // 60: code.chat.v2.SetSubscriptionStateRequest.signature:type_name -> code.common.v1.Signature
	13,  // 61: code.chat.v2.SetSubscriptionStateResponse.result:type_name -> code.chat.v2.SetSubscriptionStateResponse.Result
	41,  // 62: code.chat.v2.NotifyIsTypingRequest.chat_id:type_name -> code.chat.v2.ChatId
	43,  // 63: code.chat.v2.NotifyIsTypingRequest.member_id:type_name -> code.chat.v2.ChatMemberId
	57,  // 64: code.chat.v2.NotifyIsTypingRequest.owner:type_name -> code.common.v1.SolanaAccountId
	58,  // 65: code.chat.v2.NotifyIsTypingRequest.signature:type_name -> code.common.v1.Signature
	14,  // 66: code.chat.v2.NotifyIsTypingResponse.result:type_name -> code.chat.v2.NotifyIsTypingResponse.Result
	41,  // 67: code.chat.v2.ChatMetadata.chat_id:type_name -> code.chat.v2.ChatId
	0,   // 68: code.chat.v2.ChatMetadata.type:type_name -> code.chat.v2.ChatType
	46,  // 69: code.chat.v2.ChatMetadata.members:type_name -> code.chat.v2.ChatMember
	56,  // 70: code.chat.v2.ChatMetadata.cursor:type_name -> code.chat.v2.Cursor
	42,  // 71: code.chat.v2.ChatMessage.message_id:type_name -> code.chat.v2.ChatMessageId
	43,  // 72: code.chat.v2.ChatMessage.sender_id:type_name -> code.chat.v2.ChatMemberId
	49,  // 73: code.chat.v2.ChatMessage.content:type_name -> code.chat.v2.Content
	62,  // 74: code.chat.v2.ChatMessage.ts:type_name -> google.protobuf.Timestamp
	56,  // 75: code.chat.v2.ChatMessage.cursor:type_name -> code.chat.v2.Cursor
	43,  // 76: code.chat.v2.ChatMember.member_id:type_name -> code.chat.v2.ChatMemberId
	47,  // 77: code.chat.v2.ChatMember.identity:type_name -> code.chat.v2.ChatMemberIdentity
	48,  // 78: code.chat.v2.ChatMember.pointers:type_name -> code.chat.v2.Pointer
	1,   // 79: code.chat.v2.ChatMemberIdentity.platform:type_name -> code.chat.v2.Platform
	2,   // 80: code.chat.v2.Pointer.type:type_name -> code.chat.v2.PointerType
	42,  // 81: code.chat.v2.Pointer.value:type_name -> code.chat.v2.ChatMessageId
	43,  // 82: code.chat.v2.Pointer.member_id:type_name -> code.chat.v2.ChatMemberId
	50,  // 83: code.chat.v2.Content.text:type_name -> code.chat.v2.TextContent
	51,  // 84: code.chat.v2.Content.localized:type_name -> code.chat.v2.LocalizedContent
	52,  // 85: code.chat.v2.Content.exchange_data:type_name -> code.chat.v2.ExchangeDataContent
	53,  // 86: code.chat.v2.Content.nacl_box:type_name -> code.chat.v2.NaclBoxEncryptedContent
	54,  // 87: code.chat.v2.Content.thank_you:type_name -> code.chat.v2.ThankYouContent
	55,  // 88: code.chat.v2.Content.identity_revealed:type_name -> code.chat.v2.IdentityRevealedContent
	15,  // 89: code.chat.v2.ExchangeDataContent.verb:type_name -> code.chat.v2.ExchangeDataContent.Verb
	63,  // 90: code.chat.v2.ExchangeDataContent.exact:type_name -> code.transaction.v2.ExchangeData
	64,  // 91: code.chat.v2.ExchangeDataContent.partial:type_name -> code.transaction.v2.ExchangeDataWithoutRate
	61,  // 92: code.chat.v2.ExchangeDataContent.intent:type_name -> code.common.v1.IntentId
	58,  // 93: code.chat.v2.ExchangeDataContent.signature:type_name -> code.common.v1.Signature
	57,  // 94: code.chat.v2.NaclBoxEncryptedContent.peer_public_key:type_name -> code.common.v1.SolanaAccountId
	61,  // 95: code.chat.v2.ThankYouContent.tip_intent:type_name -> code.common.v1.IntentId
	43,  // 96: code.chat.v2.IdentityRevealedContent.member_id:type_name -> code.chat.v2.ChatMemberId
	47,  // 97: code.chat.v2.IdentityRevealedContent.identity:type_name -> code.chat.v2.ChatMemberIdentity
	16,  // 98: code.chat.v2.Chat.GetChats:input_type -> code.chat.v2.GetChatsRequest
	18,  // 99: code.chat.v2.Chat.GetMessages:input_type -> code.chat.v2.GetMessagesRequest
	24,  // 100: code.chat.v2.Chat.StreamChatEvents:input_type -> code.chat.v2.StreamChatEventsRequest
	26,  // 101: code.chat.v2.Chat.StartChat:input_type -> code.chat.v2.StartChatRequest
	29,  // 102: code.chat.v2.Chat.SendMessage:input_type -> code.chat.v2.SendMessageRequest
	31,  // 103: code.chat.v2.Chat.AdvancePointer:input_type -> code.chat.v2.AdvancePointerRequest
	33,  // 104: code.chat.v2.Chat.RevealIdentity:input_type -> code.chat.v2.RevealIdentityRequest
	35,  // 105: code.chat.v2.Chat.SetMuteState:input_type -> code.chat.v2.SetMuteStateRequest
	37,  // 106: code.chat.v2.Chat.SetSubscriptionState:input_type -> code.chat.v2.SetSubscriptionStateRequest
	39,  // 107: code.chat.v2.Chat.NotifyIsTyping:input_type -> code.chat.v2.NotifyIsTypingRequest
	17,  // 108: code.chat.v2.Chat.GetChats:output_type -> code.chat.v2.GetChatsResponse
	19,  // 109: code.chat.v2.Chat.GetMessages:output_type -> code.chat.v2.GetMessagesResponse
	25,  // 110: code.chat.v2.Chat.StreamChatEvents:output_type -> code.chat.v2.StreamChatEventsResponse
	28,  // 111: code.chat.v2.Chat.StartChat:output_type -> code.chat.v2.StartChatResponse
	30,  // 112: code.chat.v2.Chat.SendMessage:output_type -> code.chat.v2.SendMessageResponse
	32,  // 113: code.chat.v2.Chat.AdvancePointer:output_type -> code.chat.v2.AdvancePointerResponse
	34,  // 114: code.chat.v2.Chat.RevealIdentity:output_type -> code.chat.v2.RevealIdentityResponse
	36,  // 115: code.chat.v2.Chat.SetMuteState:output_type -> code.chat.v2.SetMuteStateResponse
	38,  // 116: code.chat.v2.Chat.SetSubscriptionState:output_type -> code.chat.v2.SetSubscriptionStateResponse
	40,  // 117: code.chat.v2.Chat.NotifyIsTyping:output_type -> code.chat.v2.NotifyIsTypingResponse
	108, // [108:118] is the sub-list for method output_type
	98,  // [98:108] is the sub-list for method input_type
	98,  // [98:98] is the sub-list for extension type_name
	98,  // [98:98] is the sub-list for extension extendee
	0,   // [0:98] is the sub-list for field type_name
}

func init() { file_chat_v2_chat_service_proto_init() }
func file_chat_v2_chat_service_proto_init() {
	if File_chat_v2_chat_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_chat_v2_chat_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_v2_chat_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_v2_chat_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMessagesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_v2_chat_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMessagesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_v2_chat_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenChatEventStream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_v2_chat_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatStreamEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_v2_chat_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatStreamEventBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_v2_chat_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatStreamEventError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_v2_chat_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamChatEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_v2_chat_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamChatEventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_v2_chat_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartChatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_v2_chat_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartTipChatParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_v2_chat_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartChatResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_v2_chat_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_v2_chat_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_v2_chat_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdvancePointerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_v2_chat_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdvancePointerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_v2_chat_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevealIdentityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_v2_chat_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevealIdentityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_v2_chat_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMuteStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_v2_chat_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMuteStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_v2_chat_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSubscriptionStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_v2_chat_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSubscriptionStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_v2_chat_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyIsTypingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_v2_chat_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyIsTypingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_v2_chat_service_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_v2_chat_service_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatMessageId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_v2_chat_service_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatMemberId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_v2_chat_service_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_v2_chat_service_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_v2_chat_service_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_v2_chat_service_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatMemberIdentity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_v2_chat_service_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pointer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_v2_chat_service_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Content); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_v2_chat_service_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_v2_chat_service_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalizedContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_v2_chat_service_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeDataContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_v2_chat_service_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NaclBoxEncryptedContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_v2_chat_service_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThankYouContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_v2_chat_service_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentityRevealedContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_v2_chat_service_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cursor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_chat_v2_chat_service_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*ChatStreamEvent_Message)(nil),
		(*ChatStreamEvent_Pointer)(nil),
	}
	file_chat_v2_chat_service_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*StreamChatEventsRequest_OpenStream)(nil),
		(*StreamChatEventsRequest_Pong)(nil),
	}
	file_chat_v2_chat_service_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*StreamChatEventsResponse_Events)(nil),
		(*StreamChatEventsResponse_Ping)(nil),
		(*StreamChatEventsResponse_Error)(nil),
	}
	file_chat_v2_chat_service_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*StartChatRequest_TipChat)(nil),
	}
	file_chat_v2_chat_service_proto_msgTypes[33].OneofWrappers = []interface{}{
		(*Content_Text)(nil),
		(*Content_Localized)(nil),
		(*Content_ExchangeData)(nil),
		(*Content_NaclBox)(nil),
		(*Content_ThankYou)(nil),
		(*Content_IdentityRevealed)(nil),
	}
	file_chat_v2_chat_service_proto_msgTypes[36].OneofWrappers = []interface{}{
		(*ExchangeDataContent_Exact)(nil),
		(*ExchangeDataContent_Partial)(nil),
		(*ExchangeDataContent_Intent)(nil),
		(*ExchangeDataContent_Signature)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chat_v2_chat_service_proto_rawDesc,
			NumEnums:      16,
			NumMessages:   41,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_chat_v2_chat_service_proto_goTypes,
		DependencyIndexes: file_chat_v2_chat_service_proto_depIdxs,
		EnumInfos:         file_chat_v2_chat_service_proto_enumTypes,
		MessageInfos:      file_chat_v2_chat_service_proto_msgTypes,
	}.Build()
	File_chat_v2_chat_service_proto = out.File
	file_chat_v2_chat_service_proto_rawDesc = nil
	file_chat_v2_chat_service_proto_goTypes = nil
	file_chat_v2_chat_service_proto_depIdxs = nil
}
