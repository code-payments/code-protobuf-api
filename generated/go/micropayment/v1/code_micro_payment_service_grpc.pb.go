// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: micropayment/v1/code_micro_payment_service.proto

package micropayment

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MicroPayment_GetStatus_FullMethodName       = "/code.micropayment.v1.MicroPayment/GetStatus"
	MicroPayment_RegisterWebhook_FullMethodName = "/code.micropayment.v1.MicroPayment/RegisterWebhook"
	MicroPayment_Codify_FullMethodName          = "/code.micropayment.v1.MicroPayment/Codify"
	MicroPayment_GetPathMetadata_FullMethodName = "/code.micropayment.v1.MicroPayment/GetPathMetadata"
)

// MicroPaymentClient is the client API for MicroPayment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// todo: Migrate this to a generic "request" service
type MicroPaymentClient interface {
	// GetStatus gets basic request status
	GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error)
	// RegisterWebhook registers a webhook for a request
	//
	// todo: Once Kik codes can encode the entire payment request details, we can
	//
	//	remove the messaging service component and have a Create RPC that
	//	reserves the intent ID with payment details, plus registers the webhook
	//	at the same time. Until that's possible, we're stuck with two RPC calls.
	RegisterWebhook(ctx context.Context, in *RegisterWebhookRequest, opts ...grpc.CallOption) (*RegisterWebhookResponse, error)
	// Codify adds a trial micro paywall to any URL
	Codify(ctx context.Context, in *CodifyRequest, opts ...grpc.CallOption) (*CodifyResponse, error)
	// GetPathMetadata gets codified website metadata for a given path
	//
	// Important Note: This RPC's current implementation is insecure and
	// it's sole design is to enable PoC and trials.
	GetPathMetadata(ctx context.Context, in *GetPathMetadataRequest, opts ...grpc.CallOption) (*GetPathMetadataResponse, error)
}

type microPaymentClient struct {
	cc grpc.ClientConnInterface
}

func NewMicroPaymentClient(cc grpc.ClientConnInterface) MicroPaymentClient {
	return &microPaymentClient{cc}
}

func (c *microPaymentClient) GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStatusResponse)
	err := c.cc.Invoke(ctx, MicroPayment_GetStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microPaymentClient) RegisterWebhook(ctx context.Context, in *RegisterWebhookRequest, opts ...grpc.CallOption) (*RegisterWebhookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterWebhookResponse)
	err := c.cc.Invoke(ctx, MicroPayment_RegisterWebhook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microPaymentClient) Codify(ctx context.Context, in *CodifyRequest, opts ...grpc.CallOption) (*CodifyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CodifyResponse)
	err := c.cc.Invoke(ctx, MicroPayment_Codify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microPaymentClient) GetPathMetadata(ctx context.Context, in *GetPathMetadataRequest, opts ...grpc.CallOption) (*GetPathMetadataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPathMetadataResponse)
	err := c.cc.Invoke(ctx, MicroPayment_GetPathMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MicroPaymentServer is the server API for MicroPayment service.
// All implementations must embed UnimplementedMicroPaymentServer
// for forward compatibility.
//
// todo: Migrate this to a generic "request" service
type MicroPaymentServer interface {
	// GetStatus gets basic request status
	GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error)
	// RegisterWebhook registers a webhook for a request
	//
	// todo: Once Kik codes can encode the entire payment request details, we can
	//
	//	remove the messaging service component and have a Create RPC that
	//	reserves the intent ID with payment details, plus registers the webhook
	//	at the same time. Until that's possible, we're stuck with two RPC calls.
	RegisterWebhook(context.Context, *RegisterWebhookRequest) (*RegisterWebhookResponse, error)
	// Codify adds a trial micro paywall to any URL
	Codify(context.Context, *CodifyRequest) (*CodifyResponse, error)
	// GetPathMetadata gets codified website metadata for a given path
	//
	// Important Note: This RPC's current implementation is insecure and
	// it's sole design is to enable PoC and trials.
	GetPathMetadata(context.Context, *GetPathMetadataRequest) (*GetPathMetadataResponse, error)
	mustEmbedUnimplementedMicroPaymentServer()
}

// UnimplementedMicroPaymentServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMicroPaymentServer struct{}

func (UnimplementedMicroPaymentServer) GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedMicroPaymentServer) RegisterWebhook(context.Context, *RegisterWebhookRequest) (*RegisterWebhookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterWebhook not implemented")
}
func (UnimplementedMicroPaymentServer) Codify(context.Context, *CodifyRequest) (*CodifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Codify not implemented")
}
func (UnimplementedMicroPaymentServer) GetPathMetadata(context.Context, *GetPathMetadataRequest) (*GetPathMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPathMetadata not implemented")
}
func (UnimplementedMicroPaymentServer) mustEmbedUnimplementedMicroPaymentServer() {}
func (UnimplementedMicroPaymentServer) testEmbeddedByValue()                      {}

// UnsafeMicroPaymentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MicroPaymentServer will
// result in compilation errors.
type UnsafeMicroPaymentServer interface {
	mustEmbedUnimplementedMicroPaymentServer()
}

func RegisterMicroPaymentServer(s grpc.ServiceRegistrar, srv MicroPaymentServer) {
	// If the following call pancis, it indicates UnimplementedMicroPaymentServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MicroPayment_ServiceDesc, srv)
}

func _MicroPayment_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroPaymentServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MicroPayment_GetStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroPaymentServer).GetStatus(ctx, req.(*GetStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MicroPayment_RegisterWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroPaymentServer).RegisterWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MicroPayment_RegisterWebhook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroPaymentServer).RegisterWebhook(ctx, req.(*RegisterWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MicroPayment_Codify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CodifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroPaymentServer).Codify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MicroPayment_Codify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroPaymentServer).Codify(ctx, req.(*CodifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MicroPayment_GetPathMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPathMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroPaymentServer).GetPathMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MicroPayment_GetPathMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroPaymentServer).GetPathMetadata(ctx, req.(*GetPathMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MicroPayment_ServiceDesc is the grpc.ServiceDesc for MicroPayment service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MicroPayment_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "code.micropayment.v1.MicroPayment",
	HandlerType: (*MicroPaymentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatus",
			Handler:    _MicroPayment_GetStatus_Handler,
		},
		{
			MethodName: "RegisterWebhook",
			Handler:    _MicroPayment_RegisterWebhook_Handler,
		},
		{
			MethodName: "Codify",
			Handler:    _MicroPayment_Codify_Handler,
		},
		{
			MethodName: "GetPathMetadata",
			Handler:    _MicroPayment_GetPathMetadata_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "micropayment/v1/code_micro_payment_service.proto",
}
