// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: micropayment/v1/micro_payment_service.proto

package micropayment

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on GetStatusRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetStatusRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetIntentId() == nil {
		return GetStatusRequestValidationError{
			field:  "IntentId",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetIntentId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetStatusRequestValidationError{
				field:  "IntentId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetStatusRequestValidationError is the validation error returned by
// GetStatusRequest.Validate if the designated constraints aren't met.
type GetStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStatusRequestValidationError) ErrorName() string { return "GetStatusRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStatusRequestValidationError{}

// Validate checks the field values on GetStatusResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetStatusResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Exists

	// no validation rules for CodeScanned

	// no validation rules for IntentSubmitted

	return nil
}

// GetStatusResponseValidationError is the validation error returned by
// GetStatusResponse.Validate if the designated constraints aren't met.
type GetStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStatusResponseValidationError) ErrorName() string {
	return "GetStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStatusResponseValidationError{}

// Validate checks the field values on RegisterWebhookRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RegisterWebhookRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetIntentId() == nil {
		return RegisterWebhookRequestValidationError{
			field:  "IntentId",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetIntentId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegisterWebhookRequestValidationError{
				field:  "IntentId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := utf8.RuneCountInString(m.GetUrl()); l < 1 || l > 1024 {
		return RegisterWebhookRequestValidationError{
			field:  "Url",
			reason: "value length must be between 1 and 1024 runes, inclusive",
		}
	}

	if !strings.HasPrefix(m.GetUrl(), "http") {
		return RegisterWebhookRequestValidationError{
			field:  "Url",
			reason: "value does not have prefix \"http\"",
		}
	}

	if uri, err := url.Parse(m.GetUrl()); err != nil {
		return RegisterWebhookRequestValidationError{
			field:  "Url",
			reason: "value must be a valid URI",
			cause:  err,
		}
	} else if !uri.IsAbs() {
		return RegisterWebhookRequestValidationError{
			field:  "Url",
			reason: "value must be absolute",
		}
	}

	return nil
}

// RegisterWebhookRequestValidationError is the validation error returned by
// RegisterWebhookRequest.Validate if the designated constraints aren't met.
type RegisterWebhookRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterWebhookRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterWebhookRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterWebhookRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterWebhookRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterWebhookRequestValidationError) ErrorName() string {
	return "RegisterWebhookRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterWebhookRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterWebhookRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterWebhookRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterWebhookRequestValidationError{}

// Validate checks the field values on RegisterWebhookResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RegisterWebhookResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Result

	return nil
}

// RegisterWebhookResponseValidationError is the validation error returned by
// RegisterWebhookResponse.Validate if the designated constraints aren't met.
type RegisterWebhookResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterWebhookResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterWebhookResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterWebhookResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterWebhookResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterWebhookResponseValidationError) ErrorName() string {
	return "RegisterWebhookResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterWebhookResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterWebhookResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterWebhookResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterWebhookResponseValidationError{}
