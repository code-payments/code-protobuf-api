// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: transaction/v2/transaction_service.proto

package transaction

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"

	common "github.com/code-payments/code-protobuf-api/generated/go/common/v1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}

	_ = common.AccountType(0)
)

// Validate checks the field values on SubmitIntentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SubmitIntentRequest) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Request.(type) {

	case *SubmitIntentRequest_SubmitActions_:

		if v, ok := interface{}(m.GetSubmitActions()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SubmitIntentRequestValidationError{
					field:  "SubmitActions",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SubmitIntentRequest_SubmitSignatures_:

		if v, ok := interface{}(m.GetSubmitSignatures()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SubmitIntentRequestValidationError{
					field:  "SubmitSignatures",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		return SubmitIntentRequestValidationError{
			field:  "Request",
			reason: "value is required",
		}

	}

	return nil
}

// SubmitIntentRequestValidationError is the validation error returned by
// SubmitIntentRequest.Validate if the designated constraints aren't met.
type SubmitIntentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitIntentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmitIntentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmitIntentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmitIntentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmitIntentRequestValidationError) ErrorName() string {
	return "SubmitIntentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitIntentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitIntentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitIntentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitIntentRequestValidationError{}

// Validate checks the field values on SubmitIntentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SubmitIntentResponse) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Response.(type) {

	case *SubmitIntentResponse_ServerParameters_:

		if v, ok := interface{}(m.GetServerParameters()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SubmitIntentResponseValidationError{
					field:  "ServerParameters",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SubmitIntentResponse_Success_:

		if v, ok := interface{}(m.GetSuccess()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SubmitIntentResponseValidationError{
					field:  "Success",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SubmitIntentResponse_Error_:

		if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SubmitIntentResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		return SubmitIntentResponseValidationError{
			field:  "Response",
			reason: "value is required",
		}

	}

	return nil
}

// SubmitIntentResponseValidationError is the validation error returned by
// SubmitIntentResponse.Validate if the designated constraints aren't met.
type SubmitIntentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitIntentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmitIntentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmitIntentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmitIntentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmitIntentResponseValidationError) ErrorName() string {
	return "SubmitIntentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitIntentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitIntentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitIntentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitIntentResponseValidationError{}

// Validate checks the field values on GetIntentMetadataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetIntentMetadataRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetIntentId() == nil {
		return GetIntentMetadataRequestValidationError{
			field:  "IntentId",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetIntentId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetIntentMetadataRequestValidationError{
				field:  "IntentId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetOwner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetIntentMetadataRequestValidationError{
				field:  "Owner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetSignature() == nil {
		return GetIntentMetadataRequestValidationError{
			field:  "Signature",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetSignature()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetIntentMetadataRequestValidationError{
				field:  "Signature",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetIntentMetadataRequestValidationError is the validation error returned by
// GetIntentMetadataRequest.Validate if the designated constraints aren't met.
type GetIntentMetadataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetIntentMetadataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetIntentMetadataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetIntentMetadataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetIntentMetadataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetIntentMetadataRequestValidationError) ErrorName() string {
	return "GetIntentMetadataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetIntentMetadataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetIntentMetadataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetIntentMetadataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetIntentMetadataRequestValidationError{}

// Validate checks the field values on GetIntentMetadataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetIntentMetadataResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Result

	if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetIntentMetadataResponseValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetIntentMetadataResponseValidationError is the validation error returned by
// GetIntentMetadataResponse.Validate if the designated constraints aren't met.
type GetIntentMetadataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetIntentMetadataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetIntentMetadataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetIntentMetadataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetIntentMetadataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetIntentMetadataResponseValidationError) ErrorName() string {
	return "GetIntentMetadataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetIntentMetadataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetIntentMetadataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetIntentMetadataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetIntentMetadataResponseValidationError{}

// Validate checks the field values on GetLimitsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetLimitsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetOwner() == nil {
		return GetLimitsRequestValidationError{
			field:  "Owner",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetOwner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetLimitsRequestValidationError{
				field:  "Owner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetSignature() == nil {
		return GetLimitsRequestValidationError{
			field:  "Signature",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetSignature()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetLimitsRequestValidationError{
				field:  "Signature",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetConsumedSince() == nil {
		return GetLimitsRequestValidationError{
			field:  "ConsumedSince",
			reason: "value is required",
		}
	}

	return nil
}

// GetLimitsRequestValidationError is the validation error returned by
// GetLimitsRequest.Validate if the designated constraints aren't met.
type GetLimitsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLimitsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLimitsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLimitsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLimitsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLimitsRequestValidationError) ErrorName() string { return "GetLimitsRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetLimitsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLimitsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLimitsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLimitsRequestValidationError{}

// Validate checks the field values on GetLimitsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetLimitsResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Result

	// no validation rules for SendLimitsByCurrency

	if m.GetUsdTransacted() < 0 {
		return GetLimitsResponseValidationError{
			field:  "UsdTransacted",
			reason: "value must be greater than or equal to 0",
		}
	}

	return nil
}

// GetLimitsResponseValidationError is the validation error returned by
// GetLimitsResponse.Validate if the designated constraints aren't met.
type GetLimitsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLimitsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLimitsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLimitsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLimitsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLimitsResponseValidationError) ErrorName() string {
	return "GetLimitsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetLimitsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLimitsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLimitsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLimitsResponseValidationError{}

// Validate checks the field values on CanWithdrawToAccountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CanWithdrawToAccountRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetAccount() == nil {
		return CanWithdrawToAccountRequestValidationError{
			field:  "Account",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CanWithdrawToAccountRequestValidationError{
				field:  "Account",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetMint()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CanWithdrawToAccountRequestValidationError{
				field:  "Mint",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CanWithdrawToAccountRequestValidationError is the validation error returned
// by CanWithdrawToAccountRequest.Validate if the designated constraints
// aren't met.
type CanWithdrawToAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CanWithdrawToAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CanWithdrawToAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CanWithdrawToAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CanWithdrawToAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CanWithdrawToAccountRequestValidationError) ErrorName() string {
	return "CanWithdrawToAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CanWithdrawToAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCanWithdrawToAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CanWithdrawToAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CanWithdrawToAccountRequestValidationError{}

// Validate checks the field values on CanWithdrawToAccountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CanWithdrawToAccountResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for IsValidPaymentDestination

	// no validation rules for AccountType

	// no validation rules for RequiresInitialization

	if v, ok := interface{}(m.GetFeeAmount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CanWithdrawToAccountResponseValidationError{
				field:  "FeeAmount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CanWithdrawToAccountResponseValidationError is the validation error returned
// by CanWithdrawToAccountResponse.Validate if the designated constraints
// aren't met.
type CanWithdrawToAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CanWithdrawToAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CanWithdrawToAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CanWithdrawToAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CanWithdrawToAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CanWithdrawToAccountResponseValidationError) ErrorName() string {
	return "CanWithdrawToAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CanWithdrawToAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCanWithdrawToAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CanWithdrawToAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CanWithdrawToAccountResponseValidationError{}

// Validate checks the field values on AirdropRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *AirdropRequest) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _AirdropRequest_AirdropType_NotInLookup[m.GetAirdropType()]; ok {
		return AirdropRequestValidationError{
			field:  "AirdropType",
			reason: "value must not be in list [0 1]",
		}
	}

	if m.GetOwner() == nil {
		return AirdropRequestValidationError{
			field:  "Owner",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetOwner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AirdropRequestValidationError{
				field:  "Owner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetSignature() == nil {
		return AirdropRequestValidationError{
			field:  "Signature",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetSignature()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AirdropRequestValidationError{
				field:  "Signature",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AirdropRequestValidationError is the validation error returned by
// AirdropRequest.Validate if the designated constraints aren't met.
type AirdropRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AirdropRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AirdropRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AirdropRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AirdropRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AirdropRequestValidationError) ErrorName() string { return "AirdropRequestValidationError" }

// Error satisfies the builtin error interface
func (e AirdropRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAirdropRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AirdropRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AirdropRequestValidationError{}

var _AirdropRequest_AirdropType_NotInLookup = map[AirdropType]struct{}{
	0: {},
	1: {},
}

// Validate checks the field values on AirdropResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *AirdropResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Result

	if v, ok := interface{}(m.GetExchangeData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AirdropResponseValidationError{
				field:  "ExchangeData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AirdropResponseValidationError is the validation error returned by
// AirdropResponse.Validate if the designated constraints aren't met.
type AirdropResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AirdropResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AirdropResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AirdropResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AirdropResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AirdropResponseValidationError) ErrorName() string { return "AirdropResponseValidationError" }

// Error satisfies the builtin error interface
func (e AirdropResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAirdropResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AirdropResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AirdropResponseValidationError{}

// Validate checks the field values on VoidGiftCardRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *VoidGiftCardRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetOwner() == nil {
		return VoidGiftCardRequestValidationError{
			field:  "Owner",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetOwner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VoidGiftCardRequestValidationError{
				field:  "Owner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetGiftCardVault() == nil {
		return VoidGiftCardRequestValidationError{
			field:  "GiftCardVault",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetGiftCardVault()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VoidGiftCardRequestValidationError{
				field:  "GiftCardVault",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetSignature() == nil {
		return VoidGiftCardRequestValidationError{
			field:  "Signature",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetSignature()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VoidGiftCardRequestValidationError{
				field:  "Signature",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// VoidGiftCardRequestValidationError is the validation error returned by
// VoidGiftCardRequest.Validate if the designated constraints aren't met.
type VoidGiftCardRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VoidGiftCardRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VoidGiftCardRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VoidGiftCardRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VoidGiftCardRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VoidGiftCardRequestValidationError) ErrorName() string {
	return "VoidGiftCardRequestValidationError"
}

// Error satisfies the builtin error interface
func (e VoidGiftCardRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVoidGiftCardRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VoidGiftCardRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VoidGiftCardRequestValidationError{}

// Validate checks the field values on VoidGiftCardResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *VoidGiftCardResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Result

	return nil
}

// VoidGiftCardResponseValidationError is the validation error returned by
// VoidGiftCardResponse.Validate if the designated constraints aren't met.
type VoidGiftCardResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VoidGiftCardResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VoidGiftCardResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VoidGiftCardResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VoidGiftCardResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VoidGiftCardResponseValidationError) ErrorName() string {
	return "VoidGiftCardResponseValidationError"
}

// Error satisfies the builtin error interface
func (e VoidGiftCardResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVoidGiftCardResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VoidGiftCardResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VoidGiftCardResponseValidationError{}

// Validate checks the field values on Metadata with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Metadata) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Type.(type) {

	case *Metadata_OpenAccounts:

		if v, ok := interface{}(m.GetOpenAccounts()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MetadataValidationError{
					field:  "OpenAccounts",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Metadata_SendPublicPayment:

		if v, ok := interface{}(m.GetSendPublicPayment()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MetadataValidationError{
					field:  "SendPublicPayment",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Metadata_ReceivePaymentsPublicly:

		if v, ok := interface{}(m.GetReceivePaymentsPublicly()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MetadataValidationError{
					field:  "ReceivePaymentsPublicly",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Metadata_PublicDistribution:

		if v, ok := interface{}(m.GetPublicDistribution()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MetadataValidationError{
					field:  "PublicDistribution",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		return MetadataValidationError{
			field:  "Type",
			reason: "value is required",
		}

	}

	return nil
}

// MetadataValidationError is the validation error returned by
// Metadata.Validate if the designated constraints aren't met.
type MetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetadataValidationError) ErrorName() string { return "MetadataValidationError" }

// Error satisfies the builtin error interface
func (e MetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetadataValidationError{}

// Validate checks the field values on OpenAccountsMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *OpenAccountsMetadata) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := OpenAccountsMetadata_AccountSet_name[int32(m.GetAccountSet())]; !ok {
		return OpenAccountsMetadataValidationError{
			field:  "AccountSet",
			reason: "value must be one of the defined enum values",
		}
	}

	if v, ok := interface{}(m.GetMint()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OpenAccountsMetadataValidationError{
				field:  "Mint",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// OpenAccountsMetadataValidationError is the validation error returned by
// OpenAccountsMetadata.Validate if the designated constraints aren't met.
type OpenAccountsMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpenAccountsMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpenAccountsMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpenAccountsMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpenAccountsMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpenAccountsMetadataValidationError) ErrorName() string {
	return "OpenAccountsMetadataValidationError"
}

// Error satisfies the builtin error interface
func (e OpenAccountsMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpenAccountsMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpenAccountsMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpenAccountsMetadataValidationError{}

// Validate checks the field values on SendPublicPaymentMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SendPublicPaymentMetadata) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetSource() == nil {
		return SendPublicPaymentMetadataValidationError{
			field:  "Source",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetSource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendPublicPaymentMetadataValidationError{
				field:  "Source",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetDestination() == nil {
		return SendPublicPaymentMetadataValidationError{
			field:  "Destination",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetDestination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendPublicPaymentMetadataValidationError{
				field:  "Destination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDestinationOwner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendPublicPaymentMetadataValidationError{
				field:  "DestinationOwner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetExchangeData() == nil {
		return SendPublicPaymentMetadataValidationError{
			field:  "ExchangeData",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetExchangeData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendPublicPaymentMetadataValidationError{
				field:  "ExchangeData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IsWithdrawal

	// no validation rules for IsRemoteSend

	if v, ok := interface{}(m.GetMint()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendPublicPaymentMetadataValidationError{
				field:  "Mint",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SendPublicPaymentMetadataValidationError is the validation error returned by
// SendPublicPaymentMetadata.Validate if the designated constraints aren't met.
type SendPublicPaymentMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendPublicPaymentMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendPublicPaymentMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendPublicPaymentMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendPublicPaymentMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendPublicPaymentMetadataValidationError) ErrorName() string {
	return "SendPublicPaymentMetadataValidationError"
}

// Error satisfies the builtin error interface
func (e SendPublicPaymentMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendPublicPaymentMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendPublicPaymentMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendPublicPaymentMetadataValidationError{}

// Validate checks the field values on ReceivePaymentsPubliclyMetadata with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReceivePaymentsPubliclyMetadata) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetSource() == nil {
		return ReceivePaymentsPubliclyMetadataValidationError{
			field:  "Source",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetSource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReceivePaymentsPubliclyMetadataValidationError{
				field:  "Source",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetQuarks() <= 0 {
		return ReceivePaymentsPubliclyMetadataValidationError{
			field:  "Quarks",
			reason: "value must be greater than 0",
		}
	}

	if m.GetIsRemoteSend() != true {
		return ReceivePaymentsPubliclyMetadataValidationError{
			field:  "IsRemoteSend",
			reason: "value must equal true",
		}
	}

	if v, ok := interface{}(m.GetExchangeData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReceivePaymentsPubliclyMetadataValidationError{
				field:  "ExchangeData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetMint()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReceivePaymentsPubliclyMetadataValidationError{
				field:  "Mint",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReceivePaymentsPubliclyMetadataValidationError is the validation error
// returned by ReceivePaymentsPubliclyMetadata.Validate if the designated
// constraints aren't met.
type ReceivePaymentsPubliclyMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReceivePaymentsPubliclyMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReceivePaymentsPubliclyMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReceivePaymentsPubliclyMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReceivePaymentsPubliclyMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReceivePaymentsPubliclyMetadataValidationError) ErrorName() string {
	return "ReceivePaymentsPubliclyMetadataValidationError"
}

// Error satisfies the builtin error interface
func (e ReceivePaymentsPubliclyMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReceivePaymentsPubliclyMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReceivePaymentsPubliclyMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReceivePaymentsPubliclyMetadataValidationError{}

// Validate checks the field values on PublicDistributionMetadata with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PublicDistributionMetadata) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetSource() == nil {
		return PublicDistributionMetadataValidationError{
			field:  "Source",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetSource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PublicDistributionMetadataValidationError{
				field:  "Source",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetDistributions()) < 1 {
		return PublicDistributionMetadataValidationError{
			field:  "Distributions",
			reason: "value must contain at least 1 item(s)",
		}
	}

	for idx, item := range m.GetDistributions() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PublicDistributionMetadataValidationError{
					field:  fmt.Sprintf("Distributions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetMint()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PublicDistributionMetadataValidationError{
				field:  "Mint",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// PublicDistributionMetadataValidationError is the validation error returned
// by PublicDistributionMetadata.Validate if the designated constraints aren't met.
type PublicDistributionMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublicDistributionMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublicDistributionMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublicDistributionMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublicDistributionMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublicDistributionMetadataValidationError) ErrorName() string {
	return "PublicDistributionMetadataValidationError"
}

// Error satisfies the builtin error interface
func (e PublicDistributionMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublicDistributionMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublicDistributionMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublicDistributionMetadataValidationError{}

// Validate checks the field values on Action with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Action) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	switch m.Type.(type) {

	case *Action_OpenAccount:

		if v, ok := interface{}(m.GetOpenAccount()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ActionValidationError{
					field:  "OpenAccount",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Action_NoPrivacyTransfer:

		if v, ok := interface{}(m.GetNoPrivacyTransfer()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ActionValidationError{
					field:  "NoPrivacyTransfer",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Action_NoPrivacyWithdraw:

		if v, ok := interface{}(m.GetNoPrivacyWithdraw()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ActionValidationError{
					field:  "NoPrivacyWithdraw",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Action_FeePayment:

		if v, ok := interface{}(m.GetFeePayment()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ActionValidationError{
					field:  "FeePayment",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		return ActionValidationError{
			field:  "Type",
			reason: "value is required",
		}

	}

	return nil
}

// ActionValidationError is the validation error returned by Action.Validate if
// the designated constraints aren't met.
type ActionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActionValidationError) ErrorName() string { return "ActionValidationError" }

// Error satisfies the builtin error interface
func (e ActionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActionValidationError{}

// Validate checks the field values on OpenAccountAction with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *OpenAccountAction) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _OpenAccountAction_AccountType_NotInLookup[m.GetAccountType()]; ok {
		return OpenAccountActionValidationError{
			field:  "AccountType",
			reason: "value must not be in list [0]",
		}
	}

	if m.GetOwner() == nil {
		return OpenAccountActionValidationError{
			field:  "Owner",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetOwner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OpenAccountActionValidationError{
				field:  "Owner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Index

	if m.GetAuthority() == nil {
		return OpenAccountActionValidationError{
			field:  "Authority",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetAuthority()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OpenAccountActionValidationError{
				field:  "Authority",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetToken() == nil {
		return OpenAccountActionValidationError{
			field:  "Token",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetToken()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OpenAccountActionValidationError{
				field:  "Token",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetAuthoritySignature() == nil {
		return OpenAccountActionValidationError{
			field:  "AuthoritySignature",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetAuthoritySignature()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OpenAccountActionValidationError{
				field:  "AuthoritySignature",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetMint()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OpenAccountActionValidationError{
				field:  "Mint",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// OpenAccountActionValidationError is the validation error returned by
// OpenAccountAction.Validate if the designated constraints aren't met.
type OpenAccountActionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpenAccountActionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpenAccountActionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpenAccountActionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpenAccountActionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpenAccountActionValidationError) ErrorName() string {
	return "OpenAccountActionValidationError"
}

// Error satisfies the builtin error interface
func (e OpenAccountActionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpenAccountAction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpenAccountActionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpenAccountActionValidationError{}

var _OpenAccountAction_AccountType_NotInLookup = map[common.AccountType]struct{}{
	0: {},
}

// Validate checks the field values on NoPrivacyTransferAction with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *NoPrivacyTransferAction) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetAuthority() == nil {
		return NoPrivacyTransferActionValidationError{
			field:  "Authority",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetAuthority()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NoPrivacyTransferActionValidationError{
				field:  "Authority",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetSource() == nil {
		return NoPrivacyTransferActionValidationError{
			field:  "Source",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetSource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NoPrivacyTransferActionValidationError{
				field:  "Source",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetDestination() == nil {
		return NoPrivacyTransferActionValidationError{
			field:  "Destination",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetDestination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NoPrivacyTransferActionValidationError{
				field:  "Destination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetAmount() <= 0 {
		return NoPrivacyTransferActionValidationError{
			field:  "Amount",
			reason: "value must be greater than 0",
		}
	}

	if v, ok := interface{}(m.GetMint()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NoPrivacyTransferActionValidationError{
				field:  "Mint",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// NoPrivacyTransferActionValidationError is the validation error returned by
// NoPrivacyTransferAction.Validate if the designated constraints aren't met.
type NoPrivacyTransferActionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NoPrivacyTransferActionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NoPrivacyTransferActionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NoPrivacyTransferActionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NoPrivacyTransferActionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NoPrivacyTransferActionValidationError) ErrorName() string {
	return "NoPrivacyTransferActionValidationError"
}

// Error satisfies the builtin error interface
func (e NoPrivacyTransferActionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNoPrivacyTransferAction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NoPrivacyTransferActionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NoPrivacyTransferActionValidationError{}

// Validate checks the field values on NoPrivacyWithdrawAction with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *NoPrivacyWithdrawAction) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetAuthority() == nil {
		return NoPrivacyWithdrawActionValidationError{
			field:  "Authority",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetAuthority()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NoPrivacyWithdrawActionValidationError{
				field:  "Authority",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetSource() == nil {
		return NoPrivacyWithdrawActionValidationError{
			field:  "Source",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetSource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NoPrivacyWithdrawActionValidationError{
				field:  "Source",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetDestination() == nil {
		return NoPrivacyWithdrawActionValidationError{
			field:  "Destination",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetDestination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NoPrivacyWithdrawActionValidationError{
				field:  "Destination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetAmount() <= 0 {
		return NoPrivacyWithdrawActionValidationError{
			field:  "Amount",
			reason: "value must be greater than 0",
		}
	}

	if m.GetShouldClose() != true {
		return NoPrivacyWithdrawActionValidationError{
			field:  "ShouldClose",
			reason: "value must equal true",
		}
	}

	// no validation rules for IsAutoReturn

	if v, ok := interface{}(m.GetMint()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NoPrivacyWithdrawActionValidationError{
				field:  "Mint",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// NoPrivacyWithdrawActionValidationError is the validation error returned by
// NoPrivacyWithdrawAction.Validate if the designated constraints aren't met.
type NoPrivacyWithdrawActionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NoPrivacyWithdrawActionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NoPrivacyWithdrawActionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NoPrivacyWithdrawActionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NoPrivacyWithdrawActionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NoPrivacyWithdrawActionValidationError) ErrorName() string {
	return "NoPrivacyWithdrawActionValidationError"
}

// Error satisfies the builtin error interface
func (e NoPrivacyWithdrawActionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNoPrivacyWithdrawAction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NoPrivacyWithdrawActionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NoPrivacyWithdrawActionValidationError{}

// Validate checks the field values on FeePaymentAction with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *FeePaymentAction) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _FeePaymentAction_Type_NotInLookup[m.GetType()]; ok {
		return FeePaymentActionValidationError{
			field:  "Type",
			reason: "value must not be in list [0]",
		}
	}

	if m.GetAuthority() == nil {
		return FeePaymentActionValidationError{
			field:  "Authority",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetAuthority()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FeePaymentActionValidationError{
				field:  "Authority",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetSource() == nil {
		return FeePaymentActionValidationError{
			field:  "Source",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetSource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FeePaymentActionValidationError{
				field:  "Source",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetAmount() <= 0 {
		return FeePaymentActionValidationError{
			field:  "Amount",
			reason: "value must be greater than 0",
		}
	}

	if v, ok := interface{}(m.GetMint()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FeePaymentActionValidationError{
				field:  "Mint",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// FeePaymentActionValidationError is the validation error returned by
// FeePaymentAction.Validate if the designated constraints aren't met.
type FeePaymentActionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FeePaymentActionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FeePaymentActionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FeePaymentActionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FeePaymentActionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FeePaymentActionValidationError) ErrorName() string { return "FeePaymentActionValidationError" }

// Error satisfies the builtin error interface
func (e FeePaymentActionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFeePaymentAction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FeePaymentActionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FeePaymentActionValidationError{}

var _FeePaymentAction_Type_NotInLookup = map[FeePaymentAction_FeeType]struct{}{
	0: {},
}

// Validate checks the field values on ServerParameter with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ServerParameter) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ActionId

	if len(m.GetNonces()) > 1 {
		return ServerParameterValidationError{
			field:  "Nonces",
			reason: "value must contain no more than 1 item(s)",
		}
	}

	for idx, item := range m.GetNonces() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServerParameterValidationError{
					field:  fmt.Sprintf("Nonces[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	switch m.Type.(type) {

	case *ServerParameter_OpenAccount:

		if v, ok := interface{}(m.GetOpenAccount()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServerParameterValidationError{
					field:  "OpenAccount",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ServerParameter_NoPrivacyTransfer:

		if v, ok := interface{}(m.GetNoPrivacyTransfer()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServerParameterValidationError{
					field:  "NoPrivacyTransfer",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ServerParameter_NoPrivacyWithdraw:

		if v, ok := interface{}(m.GetNoPrivacyWithdraw()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServerParameterValidationError{
					field:  "NoPrivacyWithdraw",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ServerParameter_FeePayment:

		if v, ok := interface{}(m.GetFeePayment()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServerParameterValidationError{
					field:  "FeePayment",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		return ServerParameterValidationError{
			field:  "Type",
			reason: "value is required",
		}

	}

	return nil
}

// ServerParameterValidationError is the validation error returned by
// ServerParameter.Validate if the designated constraints aren't met.
type ServerParameterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerParameterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerParameterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerParameterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerParameterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerParameterValidationError) ErrorName() string { return "ServerParameterValidationError" }

// Error satisfies the builtin error interface
func (e ServerParameterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerParameter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerParameterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerParameterValidationError{}

// Validate checks the field values on NoncedTransactionMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *NoncedTransactionMetadata) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetNonce() == nil {
		return NoncedTransactionMetadataValidationError{
			field:  "Nonce",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetNonce()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NoncedTransactionMetadataValidationError{
				field:  "Nonce",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetBlockhash() == nil {
		return NoncedTransactionMetadataValidationError{
			field:  "Blockhash",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetBlockhash()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NoncedTransactionMetadataValidationError{
				field:  "Blockhash",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// NoncedTransactionMetadataValidationError is the validation error returned by
// NoncedTransactionMetadata.Validate if the designated constraints aren't met.
type NoncedTransactionMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NoncedTransactionMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NoncedTransactionMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NoncedTransactionMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NoncedTransactionMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NoncedTransactionMetadataValidationError) ErrorName() string {
	return "NoncedTransactionMetadataValidationError"
}

// Error satisfies the builtin error interface
func (e NoncedTransactionMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNoncedTransactionMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NoncedTransactionMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NoncedTransactionMetadataValidationError{}

// Validate checks the field values on OpenAccountServerParameter with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *OpenAccountServerParameter) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// OpenAccountServerParameterValidationError is the validation error returned
// by OpenAccountServerParameter.Validate if the designated constraints aren't met.
type OpenAccountServerParameterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpenAccountServerParameterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpenAccountServerParameterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpenAccountServerParameterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpenAccountServerParameterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpenAccountServerParameterValidationError) ErrorName() string {
	return "OpenAccountServerParameterValidationError"
}

// Error satisfies the builtin error interface
func (e OpenAccountServerParameterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpenAccountServerParameter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpenAccountServerParameterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpenAccountServerParameterValidationError{}

// Validate checks the field values on NoPrivacyTransferServerParameter with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *NoPrivacyTransferServerParameter) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// NoPrivacyTransferServerParameterValidationError is the validation error
// returned by NoPrivacyTransferServerParameter.Validate if the designated
// constraints aren't met.
type NoPrivacyTransferServerParameterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NoPrivacyTransferServerParameterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NoPrivacyTransferServerParameterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NoPrivacyTransferServerParameterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NoPrivacyTransferServerParameterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NoPrivacyTransferServerParameterValidationError) ErrorName() string {
	return "NoPrivacyTransferServerParameterValidationError"
}

// Error satisfies the builtin error interface
func (e NoPrivacyTransferServerParameterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNoPrivacyTransferServerParameter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NoPrivacyTransferServerParameterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NoPrivacyTransferServerParameterValidationError{}

// Validate checks the field values on NoPrivacyWithdrawServerParameter with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *NoPrivacyWithdrawServerParameter) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// NoPrivacyWithdrawServerParameterValidationError is the validation error
// returned by NoPrivacyWithdrawServerParameter.Validate if the designated
// constraints aren't met.
type NoPrivacyWithdrawServerParameterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NoPrivacyWithdrawServerParameterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NoPrivacyWithdrawServerParameterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NoPrivacyWithdrawServerParameterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NoPrivacyWithdrawServerParameterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NoPrivacyWithdrawServerParameterValidationError) ErrorName() string {
	return "NoPrivacyWithdrawServerParameterValidationError"
}

// Error satisfies the builtin error interface
func (e NoPrivacyWithdrawServerParameterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNoPrivacyWithdrawServerParameter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NoPrivacyWithdrawServerParameterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NoPrivacyWithdrawServerParameterValidationError{}

// Validate checks the field values on FeePaymentServerParameter with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *FeePaymentServerParameter) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetDestination() == nil {
		return FeePaymentServerParameterValidationError{
			field:  "Destination",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetDestination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FeePaymentServerParameterValidationError{
				field:  "Destination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// FeePaymentServerParameterValidationError is the validation error returned by
// FeePaymentServerParameter.Validate if the designated constraints aren't met.
type FeePaymentServerParameterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FeePaymentServerParameterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FeePaymentServerParameterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FeePaymentServerParameterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FeePaymentServerParameterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FeePaymentServerParameterValidationError) ErrorName() string {
	return "FeePaymentServerParameterValidationError"
}

// Error satisfies the builtin error interface
func (e FeePaymentServerParameterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFeePaymentServerParameter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FeePaymentServerParameterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FeePaymentServerParameterValidationError{}

// Validate checks the field values on ErrorDetails with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ErrorDetails) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Type.(type) {

	case *ErrorDetails_ReasonString:

		if v, ok := interface{}(m.GetReasonString()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ErrorDetailsValidationError{
					field:  "ReasonString",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ErrorDetails_InvalidSignature:

		if v, ok := interface{}(m.GetInvalidSignature()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ErrorDetailsValidationError{
					field:  "InvalidSignature",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ErrorDetails_Denied:

		if v, ok := interface{}(m.GetDenied()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ErrorDetailsValidationError{
					field:  "Denied",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		return ErrorDetailsValidationError{
			field:  "Type",
			reason: "value is required",
		}

	}

	return nil
}

// ErrorDetailsValidationError is the validation error returned by
// ErrorDetails.Validate if the designated constraints aren't met.
type ErrorDetailsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ErrorDetailsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ErrorDetailsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ErrorDetailsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ErrorDetailsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ErrorDetailsValidationError) ErrorName() string { return "ErrorDetailsValidationError" }

// Error satisfies the builtin error interface
func (e ErrorDetailsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sErrorDetails.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ErrorDetailsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ErrorDetailsValidationError{}

// Validate checks the field values on ReasonStringErrorDetails with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReasonStringErrorDetails) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetReason()); l < 1 || l > 2048 {
		return ReasonStringErrorDetailsValidationError{
			field:  "Reason",
			reason: "value length must be between 1 and 2048 runes, inclusive",
		}
	}

	return nil
}

// ReasonStringErrorDetailsValidationError is the validation error returned by
// ReasonStringErrorDetails.Validate if the designated constraints aren't met.
type ReasonStringErrorDetailsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReasonStringErrorDetailsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReasonStringErrorDetailsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReasonStringErrorDetailsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReasonStringErrorDetailsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReasonStringErrorDetailsValidationError) ErrorName() string {
	return "ReasonStringErrorDetailsValidationError"
}

// Error satisfies the builtin error interface
func (e ReasonStringErrorDetailsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReasonStringErrorDetails.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReasonStringErrorDetailsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReasonStringErrorDetailsValidationError{}

// Validate checks the field values on InvalidSignatureErrorDetails with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *InvalidSignatureErrorDetails) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ActionId

	if m.GetProvidedSignature() == nil {
		return InvalidSignatureErrorDetailsValidationError{
			field:  "ProvidedSignature",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetProvidedSignature()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InvalidSignatureErrorDetailsValidationError{
				field:  "ProvidedSignature",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch m.ExpectedBlob.(type) {

	case *InvalidSignatureErrorDetails_ExpectedTransaction:

		if v, ok := interface{}(m.GetExpectedTransaction()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InvalidSignatureErrorDetailsValidationError{
					field:  "ExpectedTransaction",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *InvalidSignatureErrorDetails_ExpectedVixnHash:

		if v, ok := interface{}(m.GetExpectedVixnHash()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InvalidSignatureErrorDetailsValidationError{
					field:  "ExpectedVixnHash",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		return InvalidSignatureErrorDetailsValidationError{
			field:  "ExpectedBlob",
			reason: "value is required",
		}

	}

	return nil
}

// InvalidSignatureErrorDetailsValidationError is the validation error returned
// by InvalidSignatureErrorDetails.Validate if the designated constraints
// aren't met.
type InvalidSignatureErrorDetailsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InvalidSignatureErrorDetailsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InvalidSignatureErrorDetailsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InvalidSignatureErrorDetailsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InvalidSignatureErrorDetailsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InvalidSignatureErrorDetailsValidationError) ErrorName() string {
	return "InvalidSignatureErrorDetailsValidationError"
}

// Error satisfies the builtin error interface
func (e InvalidSignatureErrorDetailsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInvalidSignatureErrorDetails.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InvalidSignatureErrorDetailsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InvalidSignatureErrorDetailsValidationError{}

// Validate checks the field values on DeniedErrorDetails with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeniedErrorDetails) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	if l := utf8.RuneCountInString(m.GetReason()); l < 1 || l > 2048 {
		return DeniedErrorDetailsValidationError{
			field:  "Reason",
			reason: "value length must be between 1 and 2048 runes, inclusive",
		}
	}

	return nil
}

// DeniedErrorDetailsValidationError is the validation error returned by
// DeniedErrorDetails.Validate if the designated constraints aren't met.
type DeniedErrorDetailsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeniedErrorDetailsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeniedErrorDetailsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeniedErrorDetailsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeniedErrorDetailsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeniedErrorDetailsValidationError) ErrorName() string {
	return "DeniedErrorDetailsValidationError"
}

// Error satisfies the builtin error interface
func (e DeniedErrorDetailsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeniedErrorDetails.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeniedErrorDetailsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeniedErrorDetailsValidationError{}

// Validate checks the field values on ExchangeData with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ExchangeData) Validate() error {
	if m == nil {
		return nil
	}

	if !_ExchangeData_Currency_Pattern.MatchString(m.GetCurrency()) {
		return ExchangeDataValidationError{
			field:  "Currency",
			reason: "value does not match regex pattern \"^[a-z]{3,4}$\"",
		}
	}

	if m.GetExchangeRate() <= 0 {
		return ExchangeDataValidationError{
			field:  "ExchangeRate",
			reason: "value must be greater than 0",
		}
	}

	if m.GetNativeAmount() <= 0 {
		return ExchangeDataValidationError{
			field:  "NativeAmount",
			reason: "value must be greater than 0",
		}
	}

	if m.GetQuarks() <= 0 {
		return ExchangeDataValidationError{
			field:  "Quarks",
			reason: "value must be greater than 0",
		}
	}

	if v, ok := interface{}(m.GetMint()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExchangeDataValidationError{
				field:  "Mint",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ExchangeDataValidationError is the validation error returned by
// ExchangeData.Validate if the designated constraints aren't met.
type ExchangeDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExchangeDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExchangeDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExchangeDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExchangeDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExchangeDataValidationError) ErrorName() string { return "ExchangeDataValidationError" }

// Error satisfies the builtin error interface
func (e ExchangeDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExchangeData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExchangeDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExchangeDataValidationError{}

var _ExchangeData_Currency_Pattern = regexp.MustCompile("^[a-z]{3,4}$")

// Validate checks the field values on ExchangeDataWithoutRate with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ExchangeDataWithoutRate) Validate() error {
	if m == nil {
		return nil
	}

	if !_ExchangeDataWithoutRate_Currency_Pattern.MatchString(m.GetCurrency()) {
		return ExchangeDataWithoutRateValidationError{
			field:  "Currency",
			reason: "value does not match regex pattern \"^[a-z]{3,4}$\"",
		}
	}

	if m.GetNativeAmount() <= 0 {
		return ExchangeDataWithoutRateValidationError{
			field:  "NativeAmount",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// ExchangeDataWithoutRateValidationError is the validation error returned by
// ExchangeDataWithoutRate.Validate if the designated constraints aren't met.
type ExchangeDataWithoutRateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExchangeDataWithoutRateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExchangeDataWithoutRateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExchangeDataWithoutRateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExchangeDataWithoutRateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExchangeDataWithoutRateValidationError) ErrorName() string {
	return "ExchangeDataWithoutRateValidationError"
}

// Error satisfies the builtin error interface
func (e ExchangeDataWithoutRateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExchangeDataWithoutRate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExchangeDataWithoutRateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExchangeDataWithoutRateValidationError{}

var _ExchangeDataWithoutRate_Currency_Pattern = regexp.MustCompile("^[a-z]{3,4}$")

// Validate checks the field values on SendLimit with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *SendLimit) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for NextTransaction

	// no validation rules for MaxPerTransaction

	// no validation rules for MaxPerDay

	return nil
}

// SendLimitValidationError is the validation error returned by
// SendLimit.Validate if the designated constraints aren't met.
type SendLimitValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendLimitValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendLimitValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendLimitValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendLimitValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendLimitValidationError) ErrorName() string { return "SendLimitValidationError" }

// Error satisfies the builtin error interface
func (e SendLimitValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendLimit.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendLimitValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendLimitValidationError{}

// Validate checks the field values on SubmitIntentRequest_SubmitActions with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *SubmitIntentRequest_SubmitActions) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetId() == nil {
		return SubmitIntentRequest_SubmitActionsValidationError{
			field:  "Id",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubmitIntentRequest_SubmitActionsValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetOwner() == nil {
		return SubmitIntentRequest_SubmitActionsValidationError{
			field:  "Owner",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetOwner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubmitIntentRequest_SubmitActionsValidationError{
				field:  "Owner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetMetadata() == nil {
		return SubmitIntentRequest_SubmitActionsValidationError{
			field:  "Metadata",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubmitIntentRequest_SubmitActionsValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := len(m.GetActions()); l < 1 || l > 1024 {
		return SubmitIntentRequest_SubmitActionsValidationError{
			field:  "Actions",
			reason: "value must contain between 1 and 1024 items, inclusive",
		}
	}

	for idx, item := range m.GetActions() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SubmitIntentRequest_SubmitActionsValidationError{
					field:  fmt.Sprintf("Actions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.GetSignature() == nil {
		return SubmitIntentRequest_SubmitActionsValidationError{
			field:  "Signature",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetSignature()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubmitIntentRequest_SubmitActionsValidationError{
				field:  "Signature",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SubmitIntentRequest_SubmitActionsValidationError is the validation error
// returned by SubmitIntentRequest_SubmitActions.Validate if the designated
// constraints aren't met.
type SubmitIntentRequest_SubmitActionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitIntentRequest_SubmitActionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmitIntentRequest_SubmitActionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmitIntentRequest_SubmitActionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmitIntentRequest_SubmitActionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmitIntentRequest_SubmitActionsValidationError) ErrorName() string {
	return "SubmitIntentRequest_SubmitActionsValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitIntentRequest_SubmitActionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitIntentRequest_SubmitActions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitIntentRequest_SubmitActionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitIntentRequest_SubmitActionsValidationError{}

// Validate checks the field values on SubmitIntentRequest_SubmitSignatures
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *SubmitIntentRequest_SubmitSignatures) Validate() error {
	if m == nil {
		return nil
	}

	if l := len(m.GetSignatures()); l < 1 || l > 1024 {
		return SubmitIntentRequest_SubmitSignaturesValidationError{
			field:  "Signatures",
			reason: "value must contain between 1 and 1024 items, inclusive",
		}
	}

	for idx, item := range m.GetSignatures() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SubmitIntentRequest_SubmitSignaturesValidationError{
					field:  fmt.Sprintf("Signatures[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// SubmitIntentRequest_SubmitSignaturesValidationError is the validation error
// returned by SubmitIntentRequest_SubmitSignatures.Validate if the designated
// constraints aren't met.
type SubmitIntentRequest_SubmitSignaturesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitIntentRequest_SubmitSignaturesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmitIntentRequest_SubmitSignaturesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmitIntentRequest_SubmitSignaturesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmitIntentRequest_SubmitSignaturesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmitIntentRequest_SubmitSignaturesValidationError) ErrorName() string {
	return "SubmitIntentRequest_SubmitSignaturesValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitIntentRequest_SubmitSignaturesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitIntentRequest_SubmitSignatures.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitIntentRequest_SubmitSignaturesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitIntentRequest_SubmitSignaturesValidationError{}

// Validate checks the field values on SubmitIntentResponse_ServerParameters
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *SubmitIntentResponse_ServerParameters) Validate() error {
	if m == nil {
		return nil
	}

	if l := len(m.GetServerParameters()); l < 1 || l > 1024 {
		return SubmitIntentResponse_ServerParametersValidationError{
			field:  "ServerParameters",
			reason: "value must contain between 1 and 1024 items, inclusive",
		}
	}

	for idx, item := range m.GetServerParameters() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SubmitIntentResponse_ServerParametersValidationError{
					field:  fmt.Sprintf("ServerParameters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// SubmitIntentResponse_ServerParametersValidationError is the validation error
// returned by SubmitIntentResponse_ServerParameters.Validate if the
// designated constraints aren't met.
type SubmitIntentResponse_ServerParametersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitIntentResponse_ServerParametersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmitIntentResponse_ServerParametersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmitIntentResponse_ServerParametersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmitIntentResponse_ServerParametersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmitIntentResponse_ServerParametersValidationError) ErrorName() string {
	return "SubmitIntentResponse_ServerParametersValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitIntentResponse_ServerParametersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitIntentResponse_ServerParameters.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitIntentResponse_ServerParametersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitIntentResponse_ServerParametersValidationError{}

// Validate checks the field values on SubmitIntentResponse_Success with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SubmitIntentResponse_Success) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	return nil
}

// SubmitIntentResponse_SuccessValidationError is the validation error returned
// by SubmitIntentResponse_Success.Validate if the designated constraints
// aren't met.
type SubmitIntentResponse_SuccessValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitIntentResponse_SuccessValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmitIntentResponse_SuccessValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmitIntentResponse_SuccessValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmitIntentResponse_SuccessValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmitIntentResponse_SuccessValidationError) ErrorName() string {
	return "SubmitIntentResponse_SuccessValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitIntentResponse_SuccessValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitIntentResponse_Success.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitIntentResponse_SuccessValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitIntentResponse_SuccessValidationError{}

// Validate checks the field values on SubmitIntentResponse_Error with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SubmitIntentResponse_Error) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	for idx, item := range m.GetErrorDetails() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SubmitIntentResponse_ErrorValidationError{
					field:  fmt.Sprintf("ErrorDetails[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// SubmitIntentResponse_ErrorValidationError is the validation error returned
// by SubmitIntentResponse_Error.Validate if the designated constraints aren't met.
type SubmitIntentResponse_ErrorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitIntentResponse_ErrorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmitIntentResponse_ErrorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmitIntentResponse_ErrorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmitIntentResponse_ErrorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmitIntentResponse_ErrorValidationError) ErrorName() string {
	return "SubmitIntentResponse_ErrorValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitIntentResponse_ErrorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitIntentResponse_Error.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitIntentResponse_ErrorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitIntentResponse_ErrorValidationError{}

// Validate checks the field values on PublicDistributionMetadata_Distribution
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *PublicDistributionMetadata_Distribution) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetDestination() == nil {
		return PublicDistributionMetadata_DistributionValidationError{
			field:  "Destination",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetDestination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PublicDistributionMetadata_DistributionValidationError{
				field:  "Destination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetQuarks() <= 0 {
		return PublicDistributionMetadata_DistributionValidationError{
			field:  "Quarks",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// PublicDistributionMetadata_DistributionValidationError is the validation
// error returned by PublicDistributionMetadata_Distribution.Validate if the
// designated constraints aren't met.
type PublicDistributionMetadata_DistributionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublicDistributionMetadata_DistributionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublicDistributionMetadata_DistributionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublicDistributionMetadata_DistributionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublicDistributionMetadata_DistributionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublicDistributionMetadata_DistributionValidationError) ErrorName() string {
	return "PublicDistributionMetadata_DistributionValidationError"
}

// Error satisfies the builtin error interface
func (e PublicDistributionMetadata_DistributionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublicDistributionMetadata_Distribution.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublicDistributionMetadata_DistributionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublicDistributionMetadata_DistributionValidationError{}
