// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: transaction/v2/transaction_service.proto

package transaction

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"

	common "github.com/code-payments/code-protobuf-api/generated/go/common/v1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}

	_ = common.AccountType(0)

	_ = common.AccountType(0)
)

// Validate checks the field values on SubmitIntentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SubmitIntentRequest) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Request.(type) {

	case *SubmitIntentRequest_SubmitActions_:

		if v, ok := interface{}(m.GetSubmitActions()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SubmitIntentRequestValidationError{
					field:  "SubmitActions",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SubmitIntentRequest_SubmitSignatures_:

		if v, ok := interface{}(m.GetSubmitSignatures()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SubmitIntentRequestValidationError{
					field:  "SubmitSignatures",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		return SubmitIntentRequestValidationError{
			field:  "Request",
			reason: "value is required",
		}

	}

	return nil
}

// SubmitIntentRequestValidationError is the validation error returned by
// SubmitIntentRequest.Validate if the designated constraints aren't met.
type SubmitIntentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitIntentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmitIntentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmitIntentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmitIntentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmitIntentRequestValidationError) ErrorName() string {
	return "SubmitIntentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitIntentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitIntentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitIntentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitIntentRequestValidationError{}

// Validate checks the field values on SubmitIntentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SubmitIntentResponse) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Response.(type) {

	case *SubmitIntentResponse_ServerParameters_:

		if v, ok := interface{}(m.GetServerParameters()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SubmitIntentResponseValidationError{
					field:  "ServerParameters",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SubmitIntentResponse_Success_:

		if v, ok := interface{}(m.GetSuccess()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SubmitIntentResponseValidationError{
					field:  "Success",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SubmitIntentResponse_Error_:

		if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SubmitIntentResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		return SubmitIntentResponseValidationError{
			field:  "Response",
			reason: "value is required",
		}

	}

	return nil
}

// SubmitIntentResponseValidationError is the validation error returned by
// SubmitIntentResponse.Validate if the designated constraints aren't met.
type SubmitIntentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitIntentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmitIntentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmitIntentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmitIntentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmitIntentResponseValidationError) ErrorName() string {
	return "SubmitIntentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitIntentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitIntentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitIntentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitIntentResponseValidationError{}

// Validate checks the field values on GetIntentMetadataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetIntentMetadataRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetIntentId() == nil {
		return GetIntentMetadataRequestValidationError{
			field:  "IntentId",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetIntentId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetIntentMetadataRequestValidationError{
				field:  "IntentId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetOwner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetIntentMetadataRequestValidationError{
				field:  "Owner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetSignature() == nil {
		return GetIntentMetadataRequestValidationError{
			field:  "Signature",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetSignature()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetIntentMetadataRequestValidationError{
				field:  "Signature",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetIntentMetadataRequestValidationError is the validation error returned by
// GetIntentMetadataRequest.Validate if the designated constraints aren't met.
type GetIntentMetadataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetIntentMetadataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetIntentMetadataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetIntentMetadataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetIntentMetadataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetIntentMetadataRequestValidationError) ErrorName() string {
	return "GetIntentMetadataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetIntentMetadataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetIntentMetadataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetIntentMetadataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetIntentMetadataRequestValidationError{}

// Validate checks the field values on GetIntentMetadataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetIntentMetadataResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Result

	if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetIntentMetadataResponseValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetIntentMetadataResponseValidationError is the validation error returned by
// GetIntentMetadataResponse.Validate if the designated constraints aren't met.
type GetIntentMetadataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetIntentMetadataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetIntentMetadataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetIntentMetadataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetIntentMetadataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetIntentMetadataResponseValidationError) ErrorName() string {
	return "GetIntentMetadataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetIntentMetadataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetIntentMetadataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetIntentMetadataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetIntentMetadataResponseValidationError{}

// Validate checks the field values on GetPrivacyUpgradeStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetPrivacyUpgradeStatusRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetIntentId() == nil {
		return GetPrivacyUpgradeStatusRequestValidationError{
			field:  "IntentId",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetIntentId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPrivacyUpgradeStatusRequestValidationError{
				field:  "IntentId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ActionId

	return nil
}

// GetPrivacyUpgradeStatusRequestValidationError is the validation error
// returned by GetPrivacyUpgradeStatusRequest.Validate if the designated
// constraints aren't met.
type GetPrivacyUpgradeStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPrivacyUpgradeStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPrivacyUpgradeStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPrivacyUpgradeStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPrivacyUpgradeStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPrivacyUpgradeStatusRequestValidationError) ErrorName() string {
	return "GetPrivacyUpgradeStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPrivacyUpgradeStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPrivacyUpgradeStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPrivacyUpgradeStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPrivacyUpgradeStatusRequestValidationError{}

// Validate checks the field values on GetPrivacyUpgradeStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetPrivacyUpgradeStatusResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Result

	// no validation rules for Status

	return nil
}

// GetPrivacyUpgradeStatusResponseValidationError is the validation error
// returned by GetPrivacyUpgradeStatusResponse.Validate if the designated
// constraints aren't met.
type GetPrivacyUpgradeStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPrivacyUpgradeStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPrivacyUpgradeStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPrivacyUpgradeStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPrivacyUpgradeStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPrivacyUpgradeStatusResponseValidationError) ErrorName() string {
	return "GetPrivacyUpgradeStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPrivacyUpgradeStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPrivacyUpgradeStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPrivacyUpgradeStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPrivacyUpgradeStatusResponseValidationError{}

// Validate checks the field values on
// GetPrioritizedIntentsForPrivacyUpgradeRequest with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *GetPrioritizedIntentsForPrivacyUpgradeRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetOwner() == nil {
		return GetPrioritizedIntentsForPrivacyUpgradeRequestValidationError{
			field:  "Owner",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetOwner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPrioritizedIntentsForPrivacyUpgradeRequestValidationError{
				field:  "Owner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetLimit() > 100 {
		return GetPrioritizedIntentsForPrivacyUpgradeRequestValidationError{
			field:  "Limit",
			reason: "value must be less than or equal to 100",
		}
	}

	if m.GetSignature() == nil {
		return GetPrioritizedIntentsForPrivacyUpgradeRequestValidationError{
			field:  "Signature",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetSignature()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPrioritizedIntentsForPrivacyUpgradeRequestValidationError{
				field:  "Signature",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetPrioritizedIntentsForPrivacyUpgradeRequestValidationError is the
// validation error returned by
// GetPrioritizedIntentsForPrivacyUpgradeRequest.Validate if the designated
// constraints aren't met.
type GetPrioritizedIntentsForPrivacyUpgradeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPrioritizedIntentsForPrivacyUpgradeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPrioritizedIntentsForPrivacyUpgradeRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetPrioritizedIntentsForPrivacyUpgradeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPrioritizedIntentsForPrivacyUpgradeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPrioritizedIntentsForPrivacyUpgradeRequestValidationError) ErrorName() string {
	return "GetPrioritizedIntentsForPrivacyUpgradeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPrioritizedIntentsForPrivacyUpgradeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPrioritizedIntentsForPrivacyUpgradeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPrioritizedIntentsForPrivacyUpgradeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPrioritizedIntentsForPrivacyUpgradeRequestValidationError{}

// Validate checks the field values on
// GetPrioritizedIntentsForPrivacyUpgradeResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetPrioritizedIntentsForPrivacyUpgradeResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Result

	if len(m.GetItems()) > 100 {
		return GetPrioritizedIntentsForPrivacyUpgradeResponseValidationError{
			field:  "Items",
			reason: "value must contain no more than 100 item(s)",
		}
	}

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPrioritizedIntentsForPrivacyUpgradeResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetPrioritizedIntentsForPrivacyUpgradeResponseValidationError is the
// validation error returned by
// GetPrioritizedIntentsForPrivacyUpgradeResponse.Validate if the designated
// constraints aren't met.
type GetPrioritizedIntentsForPrivacyUpgradeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPrioritizedIntentsForPrivacyUpgradeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPrioritizedIntentsForPrivacyUpgradeResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetPrioritizedIntentsForPrivacyUpgradeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPrioritizedIntentsForPrivacyUpgradeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPrioritizedIntentsForPrivacyUpgradeResponseValidationError) ErrorName() string {
	return "GetPrioritizedIntentsForPrivacyUpgradeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPrioritizedIntentsForPrivacyUpgradeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPrioritizedIntentsForPrivacyUpgradeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPrioritizedIntentsForPrivacyUpgradeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPrioritizedIntentsForPrivacyUpgradeResponseValidationError{}

// Validate checks the field values on GetLimitsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetLimitsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetOwner() == nil {
		return GetLimitsRequestValidationError{
			field:  "Owner",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetOwner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetLimitsRequestValidationError{
				field:  "Owner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetSignature() == nil {
		return GetLimitsRequestValidationError{
			field:  "Signature",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetSignature()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetLimitsRequestValidationError{
				field:  "Signature",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetConsumedSince() == nil {
		return GetLimitsRequestValidationError{
			field:  "ConsumedSince",
			reason: "value is required",
		}
	}

	return nil
}

// GetLimitsRequestValidationError is the validation error returned by
// GetLimitsRequest.Validate if the designated constraints aren't met.
type GetLimitsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLimitsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLimitsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLimitsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLimitsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLimitsRequestValidationError) ErrorName() string { return "GetLimitsRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetLimitsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLimitsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLimitsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLimitsRequestValidationError{}

// Validate checks the field values on GetLimitsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetLimitsResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Result

	// no validation rules for SendLimitsByCurrency

	if v, ok := interface{}(m.GetDepositLimit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetLimitsResponseValidationError{
				field:  "DepositLimit",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for MicroPaymentLimitsByCurrency

	// no validation rules for BuyModuleLimitsByCurrency

	return nil
}

// GetLimitsResponseValidationError is the validation error returned by
// GetLimitsResponse.Validate if the designated constraints aren't met.
type GetLimitsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLimitsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLimitsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLimitsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLimitsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLimitsResponseValidationError) ErrorName() string {
	return "GetLimitsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetLimitsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLimitsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLimitsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLimitsResponseValidationError{}

// Validate checks the field values on CanWithdrawToAccountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CanWithdrawToAccountRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetAccount() == nil {
		return CanWithdrawToAccountRequestValidationError{
			field:  "Account",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CanWithdrawToAccountRequestValidationError{
				field:  "Account",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CanWithdrawToAccountRequestValidationError is the validation error returned
// by CanWithdrawToAccountRequest.Validate if the designated constraints
// aren't met.
type CanWithdrawToAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CanWithdrawToAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CanWithdrawToAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CanWithdrawToAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CanWithdrawToAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CanWithdrawToAccountRequestValidationError) ErrorName() string {
	return "CanWithdrawToAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CanWithdrawToAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCanWithdrawToAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CanWithdrawToAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CanWithdrawToAccountRequestValidationError{}

// Validate checks the field values on CanWithdrawToAccountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CanWithdrawToAccountResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AccountType

	// no validation rules for IsValidPaymentDestination

	// no validation rules for RequiresInitialization

	return nil
}

// CanWithdrawToAccountResponseValidationError is the validation error returned
// by CanWithdrawToAccountResponse.Validate if the designated constraints
// aren't met.
type CanWithdrawToAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CanWithdrawToAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CanWithdrawToAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CanWithdrawToAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CanWithdrawToAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CanWithdrawToAccountResponseValidationError) ErrorName() string {
	return "CanWithdrawToAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CanWithdrawToAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCanWithdrawToAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CanWithdrawToAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CanWithdrawToAccountResponseValidationError{}

// Validate checks the field values on AirdropRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *AirdropRequest) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _AirdropRequest_AirdropType_NotInLookup[m.GetAirdropType()]; ok {
		return AirdropRequestValidationError{
			field:  "AirdropType",
			reason: "value must not be in list [0 1]",
		}
	}

	if m.GetOwner() == nil {
		return AirdropRequestValidationError{
			field:  "Owner",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetOwner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AirdropRequestValidationError{
				field:  "Owner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetSignature() == nil {
		return AirdropRequestValidationError{
			field:  "Signature",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetSignature()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AirdropRequestValidationError{
				field:  "Signature",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AirdropRequestValidationError is the validation error returned by
// AirdropRequest.Validate if the designated constraints aren't met.
type AirdropRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AirdropRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AirdropRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AirdropRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AirdropRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AirdropRequestValidationError) ErrorName() string { return "AirdropRequestValidationError" }

// Error satisfies the builtin error interface
func (e AirdropRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAirdropRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AirdropRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AirdropRequestValidationError{}

var _AirdropRequest_AirdropType_NotInLookup = map[AirdropType]struct{}{
	0: {},
	1: {},
}

// Validate checks the field values on AirdropResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *AirdropResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Result

	if v, ok := interface{}(m.GetExchangeData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AirdropResponseValidationError{
				field:  "ExchangeData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AirdropResponseValidationError is the validation error returned by
// AirdropResponse.Validate if the designated constraints aren't met.
type AirdropResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AirdropResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AirdropResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AirdropResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AirdropResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AirdropResponseValidationError) ErrorName() string { return "AirdropResponseValidationError" }

// Error satisfies the builtin error interface
func (e AirdropResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAirdropResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AirdropResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AirdropResponseValidationError{}

// Validate checks the field values on SwapRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SwapRequest) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Request.(type) {

	case *SwapRequest_Initiate_:

		if v, ok := interface{}(m.GetInitiate()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SwapRequestValidationError{
					field:  "Initiate",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SwapRequest_SubmitSignature_:

		if v, ok := interface{}(m.GetSubmitSignature()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SwapRequestValidationError{
					field:  "SubmitSignature",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		return SwapRequestValidationError{
			field:  "Request",
			reason: "value is required",
		}

	}

	return nil
}

// SwapRequestValidationError is the validation error returned by
// SwapRequest.Validate if the designated constraints aren't met.
type SwapRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SwapRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SwapRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SwapRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SwapRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SwapRequestValidationError) ErrorName() string { return "SwapRequestValidationError" }

// Error satisfies the builtin error interface
func (e SwapRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSwapRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SwapRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SwapRequestValidationError{}

// Validate checks the field values on SwapResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SwapResponse) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Response.(type) {

	case *SwapResponse_ServerParameters_:

		if v, ok := interface{}(m.GetServerParameters()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SwapResponseValidationError{
					field:  "ServerParameters",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SwapResponse_Success_:

		if v, ok := interface{}(m.GetSuccess()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SwapResponseValidationError{
					field:  "Success",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SwapResponse_Error_:

		if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SwapResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		return SwapResponseValidationError{
			field:  "Response",
			reason: "value is required",
		}

	}

	return nil
}

// SwapResponseValidationError is the validation error returned by
// SwapResponse.Validate if the designated constraints aren't met.
type SwapResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SwapResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SwapResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SwapResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SwapResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SwapResponseValidationError) ErrorName() string { return "SwapResponseValidationError" }

// Error satisfies the builtin error interface
func (e SwapResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSwapResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SwapResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SwapResponseValidationError{}

// Validate checks the field values on DeclareFiatOnrampPurchaseAttemptRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *DeclareFiatOnrampPurchaseAttemptRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetOwner() == nil {
		return DeclareFiatOnrampPurchaseAttemptRequestValidationError{
			field:  "Owner",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetOwner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeclareFiatOnrampPurchaseAttemptRequestValidationError{
				field:  "Owner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPurchaseAmount() == nil {
		return DeclareFiatOnrampPurchaseAttemptRequestValidationError{
			field:  "PurchaseAmount",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetPurchaseAmount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeclareFiatOnrampPurchaseAttemptRequestValidationError{
				field:  "PurchaseAmount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetNonce() == nil {
		return DeclareFiatOnrampPurchaseAttemptRequestValidationError{
			field:  "Nonce",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetNonce()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeclareFiatOnrampPurchaseAttemptRequestValidationError{
				field:  "Nonce",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetSignature() == nil {
		return DeclareFiatOnrampPurchaseAttemptRequestValidationError{
			field:  "Signature",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetSignature()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeclareFiatOnrampPurchaseAttemptRequestValidationError{
				field:  "Signature",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DeclareFiatOnrampPurchaseAttemptRequestValidationError is the validation
// error returned by DeclareFiatOnrampPurchaseAttemptRequest.Validate if the
// designated constraints aren't met.
type DeclareFiatOnrampPurchaseAttemptRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeclareFiatOnrampPurchaseAttemptRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeclareFiatOnrampPurchaseAttemptRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeclareFiatOnrampPurchaseAttemptRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeclareFiatOnrampPurchaseAttemptRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeclareFiatOnrampPurchaseAttemptRequestValidationError) ErrorName() string {
	return "DeclareFiatOnrampPurchaseAttemptRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeclareFiatOnrampPurchaseAttemptRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeclareFiatOnrampPurchaseAttemptRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeclareFiatOnrampPurchaseAttemptRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeclareFiatOnrampPurchaseAttemptRequestValidationError{}

// Validate checks the field values on DeclareFiatOnrampPurchaseAttemptResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *DeclareFiatOnrampPurchaseAttemptResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Result

	return nil
}

// DeclareFiatOnrampPurchaseAttemptResponseValidationError is the validation
// error returned by DeclareFiatOnrampPurchaseAttemptResponse.Validate if the
// designated constraints aren't met.
type DeclareFiatOnrampPurchaseAttemptResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeclareFiatOnrampPurchaseAttemptResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeclareFiatOnrampPurchaseAttemptResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeclareFiatOnrampPurchaseAttemptResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeclareFiatOnrampPurchaseAttemptResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeclareFiatOnrampPurchaseAttemptResponseValidationError) ErrorName() string {
	return "DeclareFiatOnrampPurchaseAttemptResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeclareFiatOnrampPurchaseAttemptResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeclareFiatOnrampPurchaseAttemptResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeclareFiatOnrampPurchaseAttemptResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeclareFiatOnrampPurchaseAttemptResponseValidationError{}

// Validate checks the field values on Metadata with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Metadata) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Type.(type) {

	case *Metadata_OpenAccounts:

		if v, ok := interface{}(m.GetOpenAccounts()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MetadataValidationError{
					field:  "OpenAccounts",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Metadata_SendPrivatePayment:

		if v, ok := interface{}(m.GetSendPrivatePayment()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MetadataValidationError{
					field:  "SendPrivatePayment",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Metadata_ReceivePaymentsPrivately:

		if v, ok := interface{}(m.GetReceivePaymentsPrivately()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MetadataValidationError{
					field:  "ReceivePaymentsPrivately",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Metadata_UpgradePrivacy:

		if v, ok := interface{}(m.GetUpgradePrivacy()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MetadataValidationError{
					field:  "UpgradePrivacy",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Metadata_SendPublicPayment:

		if v, ok := interface{}(m.GetSendPublicPayment()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MetadataValidationError{
					field:  "SendPublicPayment",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Metadata_ReceivePaymentsPublicly:

		if v, ok := interface{}(m.GetReceivePaymentsPublicly()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MetadataValidationError{
					field:  "ReceivePaymentsPublicly",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Metadata_EstablishRelationship:

		if v, ok := interface{}(m.GetEstablishRelationship()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MetadataValidationError{
					field:  "EstablishRelationship",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		return MetadataValidationError{
			field:  "Type",
			reason: "value is required",
		}

	}

	return nil
}

// MetadataValidationError is the validation error returned by
// Metadata.Validate if the designated constraints aren't met.
type MetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetadataValidationError) ErrorName() string { return "MetadataValidationError" }

// Error satisfies the builtin error interface
func (e MetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetadataValidationError{}

// Validate checks the field values on OpenAccountsMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *OpenAccountsMetadata) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// OpenAccountsMetadataValidationError is the validation error returned by
// OpenAccountsMetadata.Validate if the designated constraints aren't met.
type OpenAccountsMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpenAccountsMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpenAccountsMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpenAccountsMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpenAccountsMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpenAccountsMetadataValidationError) ErrorName() string {
	return "OpenAccountsMetadataValidationError"
}

// Error satisfies the builtin error interface
func (e OpenAccountsMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpenAccountsMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpenAccountsMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpenAccountsMetadataValidationError{}

// Validate checks the field values on SendPrivatePaymentMetadata with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SendPrivatePaymentMetadata) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetDestination() == nil {
		return SendPrivatePaymentMetadataValidationError{
			field:  "Destination",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetDestination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendPrivatePaymentMetadataValidationError{
				field:  "Destination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetExchangeData() == nil {
		return SendPrivatePaymentMetadataValidationError{
			field:  "ExchangeData",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetExchangeData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendPrivatePaymentMetadataValidationError{
				field:  "ExchangeData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IsWithdrawal

	// no validation rules for IsRemoteSend

	// no validation rules for IsTip

	if v, ok := interface{}(m.GetTippedUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendPrivatePaymentMetadataValidationError{
				field:  "TippedUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SendPrivatePaymentMetadataValidationError is the validation error returned
// by SendPrivatePaymentMetadata.Validate if the designated constraints aren't met.
type SendPrivatePaymentMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendPrivatePaymentMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendPrivatePaymentMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendPrivatePaymentMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendPrivatePaymentMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendPrivatePaymentMetadataValidationError) ErrorName() string {
	return "SendPrivatePaymentMetadataValidationError"
}

// Error satisfies the builtin error interface
func (e SendPrivatePaymentMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendPrivatePaymentMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendPrivatePaymentMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendPrivatePaymentMetadataValidationError{}

// Validate checks the field values on SendPublicPaymentMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SendPublicPaymentMetadata) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetSource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendPublicPaymentMetadataValidationError{
				field:  "Source",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetDestination() == nil {
		return SendPublicPaymentMetadataValidationError{
			field:  "Destination",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetDestination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendPublicPaymentMetadataValidationError{
				field:  "Destination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetExchangeData() == nil {
		return SendPublicPaymentMetadataValidationError{
			field:  "ExchangeData",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetExchangeData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendPublicPaymentMetadataValidationError{
				field:  "ExchangeData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetIsWithdrawal() != true {
		return SendPublicPaymentMetadataValidationError{
			field:  "IsWithdrawal",
			reason: "value must equal true",
		}
	}

	return nil
}

// SendPublicPaymentMetadataValidationError is the validation error returned by
// SendPublicPaymentMetadata.Validate if the designated constraints aren't met.
type SendPublicPaymentMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendPublicPaymentMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendPublicPaymentMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendPublicPaymentMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendPublicPaymentMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendPublicPaymentMetadataValidationError) ErrorName() string {
	return "SendPublicPaymentMetadataValidationError"
}

// Error satisfies the builtin error interface
func (e SendPublicPaymentMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendPublicPaymentMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendPublicPaymentMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendPublicPaymentMetadataValidationError{}

// Validate checks the field values on ReceivePaymentsPrivatelyMetadata with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ReceivePaymentsPrivatelyMetadata) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetSource() == nil {
		return ReceivePaymentsPrivatelyMetadataValidationError{
			field:  "Source",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetSource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReceivePaymentsPrivatelyMetadataValidationError{
				field:  "Source",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetQuarks() <= 0 {
		return ReceivePaymentsPrivatelyMetadataValidationError{
			field:  "Quarks",
			reason: "value must be greater than 0",
		}
	}

	// no validation rules for IsDeposit

	return nil
}

// ReceivePaymentsPrivatelyMetadataValidationError is the validation error
// returned by ReceivePaymentsPrivatelyMetadata.Validate if the designated
// constraints aren't met.
type ReceivePaymentsPrivatelyMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReceivePaymentsPrivatelyMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReceivePaymentsPrivatelyMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReceivePaymentsPrivatelyMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReceivePaymentsPrivatelyMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReceivePaymentsPrivatelyMetadataValidationError) ErrorName() string {
	return "ReceivePaymentsPrivatelyMetadataValidationError"
}

// Error satisfies the builtin error interface
func (e ReceivePaymentsPrivatelyMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReceivePaymentsPrivatelyMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReceivePaymentsPrivatelyMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReceivePaymentsPrivatelyMetadataValidationError{}

// Validate checks the field values on ReceivePaymentsPubliclyMetadata with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReceivePaymentsPubliclyMetadata) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetSource() == nil {
		return ReceivePaymentsPubliclyMetadataValidationError{
			field:  "Source",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetSource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReceivePaymentsPubliclyMetadataValidationError{
				field:  "Source",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetQuarks() <= 0 {
		return ReceivePaymentsPubliclyMetadataValidationError{
			field:  "Quarks",
			reason: "value must be greater than 0",
		}
	}

	if m.GetIsRemoteSend() != true {
		return ReceivePaymentsPubliclyMetadataValidationError{
			field:  "IsRemoteSend",
			reason: "value must equal true",
		}
	}

	// no validation rules for IsIssuerVoidingGiftCard

	if v, ok := interface{}(m.GetExchangeData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReceivePaymentsPubliclyMetadataValidationError{
				field:  "ExchangeData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReceivePaymentsPubliclyMetadataValidationError is the validation error
// returned by ReceivePaymentsPubliclyMetadata.Validate if the designated
// constraints aren't met.
type ReceivePaymentsPubliclyMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReceivePaymentsPubliclyMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReceivePaymentsPubliclyMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReceivePaymentsPubliclyMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReceivePaymentsPubliclyMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReceivePaymentsPubliclyMetadataValidationError) ErrorName() string {
	return "ReceivePaymentsPubliclyMetadataValidationError"
}

// Error satisfies the builtin error interface
func (e ReceivePaymentsPubliclyMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReceivePaymentsPubliclyMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReceivePaymentsPubliclyMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReceivePaymentsPubliclyMetadataValidationError{}

// Validate checks the field values on UpgradePrivacyMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpgradePrivacyMetadata) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// UpgradePrivacyMetadataValidationError is the validation error returned by
// UpgradePrivacyMetadata.Validate if the designated constraints aren't met.
type UpgradePrivacyMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpgradePrivacyMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpgradePrivacyMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpgradePrivacyMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpgradePrivacyMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpgradePrivacyMetadataValidationError) ErrorName() string {
	return "UpgradePrivacyMetadataValidationError"
}

// Error satisfies the builtin error interface
func (e UpgradePrivacyMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpgradePrivacyMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpgradePrivacyMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpgradePrivacyMetadataValidationError{}

// Validate checks the field values on EstablishRelationshipMetadata with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *EstablishRelationshipMetadata) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetRelationship() == nil {
		return EstablishRelationshipMetadataValidationError{
			field:  "Relationship",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetRelationship()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstablishRelationshipMetadataValidationError{
				field:  "Relationship",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// EstablishRelationshipMetadataValidationError is the validation error
// returned by EstablishRelationshipMetadata.Validate if the designated
// constraints aren't met.
type EstablishRelationshipMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EstablishRelationshipMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EstablishRelationshipMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EstablishRelationshipMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EstablishRelationshipMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EstablishRelationshipMetadataValidationError) ErrorName() string {
	return "EstablishRelationshipMetadataValidationError"
}

// Error satisfies the builtin error interface
func (e EstablishRelationshipMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEstablishRelationshipMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EstablishRelationshipMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EstablishRelationshipMetadataValidationError{}

// Validate checks the field values on Action with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Action) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	switch m.Type.(type) {

	case *Action_OpenAccount:

		if v, ok := interface{}(m.GetOpenAccount()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ActionValidationError{
					field:  "OpenAccount",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Action_NoPrivacyTransfer:

		if v, ok := interface{}(m.GetNoPrivacyTransfer()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ActionValidationError{
					field:  "NoPrivacyTransfer",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Action_NoPrivacyWithdraw:

		if v, ok := interface{}(m.GetNoPrivacyWithdraw()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ActionValidationError{
					field:  "NoPrivacyWithdraw",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Action_TemporaryPrivacyTransfer:

		if v, ok := interface{}(m.GetTemporaryPrivacyTransfer()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ActionValidationError{
					field:  "TemporaryPrivacyTransfer",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Action_TemporaryPrivacyExchange:

		if v, ok := interface{}(m.GetTemporaryPrivacyExchange()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ActionValidationError{
					field:  "TemporaryPrivacyExchange",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Action_PermanentPrivacyUpgrade:

		if v, ok := interface{}(m.GetPermanentPrivacyUpgrade()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ActionValidationError{
					field:  "PermanentPrivacyUpgrade",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Action_FeePayment:

		if v, ok := interface{}(m.GetFeePayment()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ActionValidationError{
					field:  "FeePayment",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		return ActionValidationError{
			field:  "Type",
			reason: "value is required",
		}

	}

	return nil
}

// ActionValidationError is the validation error returned by Action.Validate if
// the designated constraints aren't met.
type ActionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActionValidationError) ErrorName() string { return "ActionValidationError" }

// Error satisfies the builtin error interface
func (e ActionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActionValidationError{}

// Validate checks the field values on OpenAccountAction with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *OpenAccountAction) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _OpenAccountAction_AccountType_NotInLookup[m.GetAccountType()]; ok {
		return OpenAccountActionValidationError{
			field:  "AccountType",
			reason: "value must not be in list [0]",
		}
	}

	if m.GetOwner() == nil {
		return OpenAccountActionValidationError{
			field:  "Owner",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetOwner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OpenAccountActionValidationError{
				field:  "Owner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Index

	if m.GetAuthority() == nil {
		return OpenAccountActionValidationError{
			field:  "Authority",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetAuthority()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OpenAccountActionValidationError{
				field:  "Authority",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetToken() == nil {
		return OpenAccountActionValidationError{
			field:  "Token",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetToken()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OpenAccountActionValidationError{
				field:  "Token",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetAuthoritySignature() == nil {
		return OpenAccountActionValidationError{
			field:  "AuthoritySignature",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetAuthoritySignature()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OpenAccountActionValidationError{
				field:  "AuthoritySignature",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// OpenAccountActionValidationError is the validation error returned by
// OpenAccountAction.Validate if the designated constraints aren't met.
type OpenAccountActionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpenAccountActionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpenAccountActionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpenAccountActionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpenAccountActionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpenAccountActionValidationError) ErrorName() string {
	return "OpenAccountActionValidationError"
}

// Error satisfies the builtin error interface
func (e OpenAccountActionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpenAccountAction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpenAccountActionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpenAccountActionValidationError{}

var _OpenAccountAction_AccountType_NotInLookup = map[common.AccountType]struct{}{
	0: {},
}

// Validate checks the field values on NoPrivacyTransferAction with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *NoPrivacyTransferAction) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetAuthority() == nil {
		return NoPrivacyTransferActionValidationError{
			field:  "Authority",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetAuthority()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NoPrivacyTransferActionValidationError{
				field:  "Authority",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetSource() == nil {
		return NoPrivacyTransferActionValidationError{
			field:  "Source",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetSource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NoPrivacyTransferActionValidationError{
				field:  "Source",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetDestination() == nil {
		return NoPrivacyTransferActionValidationError{
			field:  "Destination",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetDestination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NoPrivacyTransferActionValidationError{
				field:  "Destination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetAmount() <= 0 {
		return NoPrivacyTransferActionValidationError{
			field:  "Amount",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// NoPrivacyTransferActionValidationError is the validation error returned by
// NoPrivacyTransferAction.Validate if the designated constraints aren't met.
type NoPrivacyTransferActionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NoPrivacyTransferActionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NoPrivacyTransferActionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NoPrivacyTransferActionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NoPrivacyTransferActionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NoPrivacyTransferActionValidationError) ErrorName() string {
	return "NoPrivacyTransferActionValidationError"
}

// Error satisfies the builtin error interface
func (e NoPrivacyTransferActionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNoPrivacyTransferAction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NoPrivacyTransferActionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NoPrivacyTransferActionValidationError{}

// Validate checks the field values on NoPrivacyWithdrawAction with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *NoPrivacyWithdrawAction) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetAuthority() == nil {
		return NoPrivacyWithdrawActionValidationError{
			field:  "Authority",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetAuthority()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NoPrivacyWithdrawActionValidationError{
				field:  "Authority",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetSource() == nil {
		return NoPrivacyWithdrawActionValidationError{
			field:  "Source",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetSource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NoPrivacyWithdrawActionValidationError{
				field:  "Source",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetDestination() == nil {
		return NoPrivacyWithdrawActionValidationError{
			field:  "Destination",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetDestination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NoPrivacyWithdrawActionValidationError{
				field:  "Destination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetAmount() <= 0 {
		return NoPrivacyWithdrawActionValidationError{
			field:  "Amount",
			reason: "value must be greater than 0",
		}
	}

	if m.GetShouldClose() != true {
		return NoPrivacyWithdrawActionValidationError{
			field:  "ShouldClose",
			reason: "value must equal true",
		}
	}

	return nil
}

// NoPrivacyWithdrawActionValidationError is the validation error returned by
// NoPrivacyWithdrawAction.Validate if the designated constraints aren't met.
type NoPrivacyWithdrawActionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NoPrivacyWithdrawActionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NoPrivacyWithdrawActionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NoPrivacyWithdrawActionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NoPrivacyWithdrawActionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NoPrivacyWithdrawActionValidationError) ErrorName() string {
	return "NoPrivacyWithdrawActionValidationError"
}

// Error satisfies the builtin error interface
func (e NoPrivacyWithdrawActionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNoPrivacyWithdrawAction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NoPrivacyWithdrawActionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NoPrivacyWithdrawActionValidationError{}

// Validate checks the field values on TemporaryPrivacyTransferAction with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *TemporaryPrivacyTransferAction) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetAuthority() == nil {
		return TemporaryPrivacyTransferActionValidationError{
			field:  "Authority",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetAuthority()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TemporaryPrivacyTransferActionValidationError{
				field:  "Authority",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetSource() == nil {
		return TemporaryPrivacyTransferActionValidationError{
			field:  "Source",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetSource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TemporaryPrivacyTransferActionValidationError{
				field:  "Source",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetDestination() == nil {
		return TemporaryPrivacyTransferActionValidationError{
			field:  "Destination",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetDestination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TemporaryPrivacyTransferActionValidationError{
				field:  "Destination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetAmount() <= 0 {
		return TemporaryPrivacyTransferActionValidationError{
			field:  "Amount",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// TemporaryPrivacyTransferActionValidationError is the validation error
// returned by TemporaryPrivacyTransferAction.Validate if the designated
// constraints aren't met.
type TemporaryPrivacyTransferActionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TemporaryPrivacyTransferActionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TemporaryPrivacyTransferActionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TemporaryPrivacyTransferActionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TemporaryPrivacyTransferActionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TemporaryPrivacyTransferActionValidationError) ErrorName() string {
	return "TemporaryPrivacyTransferActionValidationError"
}

// Error satisfies the builtin error interface
func (e TemporaryPrivacyTransferActionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTemporaryPrivacyTransferAction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TemporaryPrivacyTransferActionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TemporaryPrivacyTransferActionValidationError{}

// Validate checks the field values on TemporaryPrivacyExchangeAction with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *TemporaryPrivacyExchangeAction) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetAuthority() == nil {
		return TemporaryPrivacyExchangeActionValidationError{
			field:  "Authority",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetAuthority()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TemporaryPrivacyExchangeActionValidationError{
				field:  "Authority",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetSource() == nil {
		return TemporaryPrivacyExchangeActionValidationError{
			field:  "Source",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetSource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TemporaryPrivacyExchangeActionValidationError{
				field:  "Source",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetDestination() == nil {
		return TemporaryPrivacyExchangeActionValidationError{
			field:  "Destination",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetDestination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TemporaryPrivacyExchangeActionValidationError{
				field:  "Destination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetAmount() <= 0 {
		return TemporaryPrivacyExchangeActionValidationError{
			field:  "Amount",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// TemporaryPrivacyExchangeActionValidationError is the validation error
// returned by TemporaryPrivacyExchangeAction.Validate if the designated
// constraints aren't met.
type TemporaryPrivacyExchangeActionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TemporaryPrivacyExchangeActionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TemporaryPrivacyExchangeActionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TemporaryPrivacyExchangeActionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TemporaryPrivacyExchangeActionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TemporaryPrivacyExchangeActionValidationError) ErrorName() string {
	return "TemporaryPrivacyExchangeActionValidationError"
}

// Error satisfies the builtin error interface
func (e TemporaryPrivacyExchangeActionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTemporaryPrivacyExchangeAction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TemporaryPrivacyExchangeActionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TemporaryPrivacyExchangeActionValidationError{}

// Validate checks the field values on PermanentPrivacyUpgradeAction with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PermanentPrivacyUpgradeAction) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ActionId

	return nil
}

// PermanentPrivacyUpgradeActionValidationError is the validation error
// returned by PermanentPrivacyUpgradeAction.Validate if the designated
// constraints aren't met.
type PermanentPrivacyUpgradeActionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PermanentPrivacyUpgradeActionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PermanentPrivacyUpgradeActionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PermanentPrivacyUpgradeActionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PermanentPrivacyUpgradeActionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PermanentPrivacyUpgradeActionValidationError) ErrorName() string {
	return "PermanentPrivacyUpgradeActionValidationError"
}

// Error satisfies the builtin error interface
func (e PermanentPrivacyUpgradeActionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPermanentPrivacyUpgradeAction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PermanentPrivacyUpgradeActionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PermanentPrivacyUpgradeActionValidationError{}

// Validate checks the field values on FeePaymentAction with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *FeePaymentAction) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Type

	if m.GetAuthority() == nil {
		return FeePaymentActionValidationError{
			field:  "Authority",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetAuthority()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FeePaymentActionValidationError{
				field:  "Authority",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetSource() == nil {
		return FeePaymentActionValidationError{
			field:  "Source",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetSource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FeePaymentActionValidationError{
				field:  "Source",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetAmount() <= 0 {
		return FeePaymentActionValidationError{
			field:  "Amount",
			reason: "value must be greater than 0",
		}
	}

	if v, ok := interface{}(m.GetDestination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FeePaymentActionValidationError{
				field:  "Destination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// FeePaymentActionValidationError is the validation error returned by
// FeePaymentAction.Validate if the designated constraints aren't met.
type FeePaymentActionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FeePaymentActionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FeePaymentActionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FeePaymentActionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FeePaymentActionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FeePaymentActionValidationError) ErrorName() string { return "FeePaymentActionValidationError" }

// Error satisfies the builtin error interface
func (e FeePaymentActionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFeePaymentAction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FeePaymentActionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FeePaymentActionValidationError{}

// Validate checks the field values on ServerParameter with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ServerParameter) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ActionId

	if len(m.GetNonces()) > 1 {
		return ServerParameterValidationError{
			field:  "Nonces",
			reason: "value must contain no more than 1 item(s)",
		}
	}

	for idx, item := range m.GetNonces() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServerParameterValidationError{
					field:  fmt.Sprintf("Nonces[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	switch m.Type.(type) {

	case *ServerParameter_OpenAccount:

		if v, ok := interface{}(m.GetOpenAccount()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServerParameterValidationError{
					field:  "OpenAccount",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ServerParameter_NoPrivacyTransfer:

		if v, ok := interface{}(m.GetNoPrivacyTransfer()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServerParameterValidationError{
					field:  "NoPrivacyTransfer",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ServerParameter_NoPrivacyWithdraw:

		if v, ok := interface{}(m.GetNoPrivacyWithdraw()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServerParameterValidationError{
					field:  "NoPrivacyWithdraw",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ServerParameter_TemporaryPrivacyTransfer:

		if v, ok := interface{}(m.GetTemporaryPrivacyTransfer()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServerParameterValidationError{
					field:  "TemporaryPrivacyTransfer",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ServerParameter_TemporaryPrivacyExchange:

		if v, ok := interface{}(m.GetTemporaryPrivacyExchange()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServerParameterValidationError{
					field:  "TemporaryPrivacyExchange",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ServerParameter_PermanentPrivacyUpgrade:

		if v, ok := interface{}(m.GetPermanentPrivacyUpgrade()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServerParameterValidationError{
					field:  "PermanentPrivacyUpgrade",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ServerParameter_FeePayment:

		if v, ok := interface{}(m.GetFeePayment()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServerParameterValidationError{
					field:  "FeePayment",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		return ServerParameterValidationError{
			field:  "Type",
			reason: "value is required",
		}

	}

	return nil
}

// ServerParameterValidationError is the validation error returned by
// ServerParameter.Validate if the designated constraints aren't met.
type ServerParameterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerParameterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerParameterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerParameterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerParameterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerParameterValidationError) ErrorName() string { return "ServerParameterValidationError" }

// Error satisfies the builtin error interface
func (e ServerParameterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerParameter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerParameterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerParameterValidationError{}

// Validate checks the field values on NoncedTransactionMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *NoncedTransactionMetadata) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetNonce() == nil {
		return NoncedTransactionMetadataValidationError{
			field:  "Nonce",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetNonce()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NoncedTransactionMetadataValidationError{
				field:  "Nonce",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetBlockhash() == nil {
		return NoncedTransactionMetadataValidationError{
			field:  "Blockhash",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetBlockhash()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NoncedTransactionMetadataValidationError{
				field:  "Blockhash",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// NoncedTransactionMetadataValidationError is the validation error returned by
// NoncedTransactionMetadata.Validate if the designated constraints aren't met.
type NoncedTransactionMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NoncedTransactionMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NoncedTransactionMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NoncedTransactionMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NoncedTransactionMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NoncedTransactionMetadataValidationError) ErrorName() string {
	return "NoncedTransactionMetadataValidationError"
}

// Error satisfies the builtin error interface
func (e NoncedTransactionMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNoncedTransactionMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NoncedTransactionMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NoncedTransactionMetadataValidationError{}

// Validate checks the field values on OpenAccountServerParameter with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *OpenAccountServerParameter) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// OpenAccountServerParameterValidationError is the validation error returned
// by OpenAccountServerParameter.Validate if the designated constraints aren't met.
type OpenAccountServerParameterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpenAccountServerParameterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpenAccountServerParameterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpenAccountServerParameterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpenAccountServerParameterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpenAccountServerParameterValidationError) ErrorName() string {
	return "OpenAccountServerParameterValidationError"
}

// Error satisfies the builtin error interface
func (e OpenAccountServerParameterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpenAccountServerParameter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpenAccountServerParameterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpenAccountServerParameterValidationError{}

// Validate checks the field values on NoPrivacyTransferServerParameter with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *NoPrivacyTransferServerParameter) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// NoPrivacyTransferServerParameterValidationError is the validation error
// returned by NoPrivacyTransferServerParameter.Validate if the designated
// constraints aren't met.
type NoPrivacyTransferServerParameterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NoPrivacyTransferServerParameterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NoPrivacyTransferServerParameterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NoPrivacyTransferServerParameterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NoPrivacyTransferServerParameterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NoPrivacyTransferServerParameterValidationError) ErrorName() string {
	return "NoPrivacyTransferServerParameterValidationError"
}

// Error satisfies the builtin error interface
func (e NoPrivacyTransferServerParameterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNoPrivacyTransferServerParameter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NoPrivacyTransferServerParameterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NoPrivacyTransferServerParameterValidationError{}

// Validate checks the field values on NoPrivacyWithdrawServerParameter with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *NoPrivacyWithdrawServerParameter) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// NoPrivacyWithdrawServerParameterValidationError is the validation error
// returned by NoPrivacyWithdrawServerParameter.Validate if the designated
// constraints aren't met.
type NoPrivacyWithdrawServerParameterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NoPrivacyWithdrawServerParameterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NoPrivacyWithdrawServerParameterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NoPrivacyWithdrawServerParameterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NoPrivacyWithdrawServerParameterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NoPrivacyWithdrawServerParameterValidationError) ErrorName() string {
	return "NoPrivacyWithdrawServerParameterValidationError"
}

// Error satisfies the builtin error interface
func (e NoPrivacyWithdrawServerParameterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNoPrivacyWithdrawServerParameter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NoPrivacyWithdrawServerParameterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NoPrivacyWithdrawServerParameterValidationError{}

// Validate checks the field values on TemporaryPrivacyTransferServerParameter
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *TemporaryPrivacyTransferServerParameter) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetTreasury() == nil {
		return TemporaryPrivacyTransferServerParameterValidationError{
			field:  "Treasury",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetTreasury()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TemporaryPrivacyTransferServerParameterValidationError{
				field:  "Treasury",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetRecentRoot() == nil {
		return TemporaryPrivacyTransferServerParameterValidationError{
			field:  "RecentRoot",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetRecentRoot()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TemporaryPrivacyTransferServerParameterValidationError{
				field:  "RecentRoot",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// TemporaryPrivacyTransferServerParameterValidationError is the validation
// error returned by TemporaryPrivacyTransferServerParameter.Validate if the
// designated constraints aren't met.
type TemporaryPrivacyTransferServerParameterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TemporaryPrivacyTransferServerParameterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TemporaryPrivacyTransferServerParameterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TemporaryPrivacyTransferServerParameterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TemporaryPrivacyTransferServerParameterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TemporaryPrivacyTransferServerParameterValidationError) ErrorName() string {
	return "TemporaryPrivacyTransferServerParameterValidationError"
}

// Error satisfies the builtin error interface
func (e TemporaryPrivacyTransferServerParameterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTemporaryPrivacyTransferServerParameter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TemporaryPrivacyTransferServerParameterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TemporaryPrivacyTransferServerParameterValidationError{}

// Validate checks the field values on TemporaryPrivacyExchangeServerParameter
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *TemporaryPrivacyExchangeServerParameter) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetTreasury() == nil {
		return TemporaryPrivacyExchangeServerParameterValidationError{
			field:  "Treasury",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetTreasury()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TemporaryPrivacyExchangeServerParameterValidationError{
				field:  "Treasury",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetRecentRoot() == nil {
		return TemporaryPrivacyExchangeServerParameterValidationError{
			field:  "RecentRoot",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetRecentRoot()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TemporaryPrivacyExchangeServerParameterValidationError{
				field:  "RecentRoot",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// TemporaryPrivacyExchangeServerParameterValidationError is the validation
// error returned by TemporaryPrivacyExchangeServerParameter.Validate if the
// designated constraints aren't met.
type TemporaryPrivacyExchangeServerParameterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TemporaryPrivacyExchangeServerParameterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TemporaryPrivacyExchangeServerParameterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TemporaryPrivacyExchangeServerParameterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TemporaryPrivacyExchangeServerParameterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TemporaryPrivacyExchangeServerParameterValidationError) ErrorName() string {
	return "TemporaryPrivacyExchangeServerParameterValidationError"
}

// Error satisfies the builtin error interface
func (e TemporaryPrivacyExchangeServerParameterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTemporaryPrivacyExchangeServerParameter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TemporaryPrivacyExchangeServerParameterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TemporaryPrivacyExchangeServerParameterValidationError{}

// Validate checks the field values on PermanentPrivacyUpgradeServerParameter
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *PermanentPrivacyUpgradeServerParameter) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetNewCommitment() == nil {
		return PermanentPrivacyUpgradeServerParameterValidationError{
			field:  "NewCommitment",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetNewCommitment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PermanentPrivacyUpgradeServerParameterValidationError{
				field:  "NewCommitment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetNewCommitmentTranscript() == nil {
		return PermanentPrivacyUpgradeServerParameterValidationError{
			field:  "NewCommitmentTranscript",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetNewCommitmentTranscript()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PermanentPrivacyUpgradeServerParameterValidationError{
				field:  "NewCommitmentTranscript",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetNewCommitmentDestination() == nil {
		return PermanentPrivacyUpgradeServerParameterValidationError{
			field:  "NewCommitmentDestination",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetNewCommitmentDestination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PermanentPrivacyUpgradeServerParameterValidationError{
				field:  "NewCommitmentDestination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetNewCommitmentAmount() <= 0 {
		return PermanentPrivacyUpgradeServerParameterValidationError{
			field:  "NewCommitmentAmount",
			reason: "value must be greater than 0",
		}
	}

	if m.GetMerkleRoot() == nil {
		return PermanentPrivacyUpgradeServerParameterValidationError{
			field:  "MerkleRoot",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetMerkleRoot()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PermanentPrivacyUpgradeServerParameterValidationError{
				field:  "MerkleRoot",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := len(m.GetMerkleProof()); l < 1 || l > 64 {
		return PermanentPrivacyUpgradeServerParameterValidationError{
			field:  "MerkleProof",
			reason: "value must contain between 1 and 64 items, inclusive",
		}
	}

	for idx, item := range m.GetMerkleProof() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PermanentPrivacyUpgradeServerParameterValidationError{
					field:  fmt.Sprintf("MerkleProof[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// PermanentPrivacyUpgradeServerParameterValidationError is the validation
// error returned by PermanentPrivacyUpgradeServerParameter.Validate if the
// designated constraints aren't met.
type PermanentPrivacyUpgradeServerParameterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PermanentPrivacyUpgradeServerParameterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PermanentPrivacyUpgradeServerParameterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PermanentPrivacyUpgradeServerParameterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PermanentPrivacyUpgradeServerParameterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PermanentPrivacyUpgradeServerParameterValidationError) ErrorName() string {
	return "PermanentPrivacyUpgradeServerParameterValidationError"
}

// Error satisfies the builtin error interface
func (e PermanentPrivacyUpgradeServerParameterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPermanentPrivacyUpgradeServerParameter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PermanentPrivacyUpgradeServerParameterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PermanentPrivacyUpgradeServerParameterValidationError{}

// Validate checks the field values on FeePaymentServerParameter with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *FeePaymentServerParameter) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCodeDestination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FeePaymentServerParameterValidationError{
				field:  "CodeDestination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// FeePaymentServerParameterValidationError is the validation error returned by
// FeePaymentServerParameter.Validate if the designated constraints aren't met.
type FeePaymentServerParameterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FeePaymentServerParameterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FeePaymentServerParameterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FeePaymentServerParameterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FeePaymentServerParameterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FeePaymentServerParameterValidationError) ErrorName() string {
	return "FeePaymentServerParameterValidationError"
}

// Error satisfies the builtin error interface
func (e FeePaymentServerParameterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFeePaymentServerParameter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FeePaymentServerParameterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FeePaymentServerParameterValidationError{}

// Validate checks the field values on ErrorDetails with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ErrorDetails) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Type.(type) {

	case *ErrorDetails_ReasonString:

		if v, ok := interface{}(m.GetReasonString()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ErrorDetailsValidationError{
					field:  "ReasonString",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ErrorDetails_InvalidSignature:

		if v, ok := interface{}(m.GetInvalidSignature()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ErrorDetailsValidationError{
					field:  "InvalidSignature",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ErrorDetails_Denied:

		if v, ok := interface{}(m.GetDenied()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ErrorDetailsValidationError{
					field:  "Denied",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		return ErrorDetailsValidationError{
			field:  "Type",
			reason: "value is required",
		}

	}

	return nil
}

// ErrorDetailsValidationError is the validation error returned by
// ErrorDetails.Validate if the designated constraints aren't met.
type ErrorDetailsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ErrorDetailsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ErrorDetailsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ErrorDetailsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ErrorDetailsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ErrorDetailsValidationError) ErrorName() string { return "ErrorDetailsValidationError" }

// Error satisfies the builtin error interface
func (e ErrorDetailsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sErrorDetails.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ErrorDetailsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ErrorDetailsValidationError{}

// Validate checks the field values on ReasonStringErrorDetails with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReasonStringErrorDetails) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetReason()); l < 1 || l > 2048 {
		return ReasonStringErrorDetailsValidationError{
			field:  "Reason",
			reason: "value length must be between 1 and 2048 runes, inclusive",
		}
	}

	return nil
}

// ReasonStringErrorDetailsValidationError is the validation error returned by
// ReasonStringErrorDetails.Validate if the designated constraints aren't met.
type ReasonStringErrorDetailsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReasonStringErrorDetailsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReasonStringErrorDetailsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReasonStringErrorDetailsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReasonStringErrorDetailsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReasonStringErrorDetailsValidationError) ErrorName() string {
	return "ReasonStringErrorDetailsValidationError"
}

// Error satisfies the builtin error interface
func (e ReasonStringErrorDetailsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReasonStringErrorDetails.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReasonStringErrorDetailsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReasonStringErrorDetailsValidationError{}

// Validate checks the field values on InvalidSignatureErrorDetails with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *InvalidSignatureErrorDetails) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ActionId

	if m.GetProvidedSignature() == nil {
		return InvalidSignatureErrorDetailsValidationError{
			field:  "ProvidedSignature",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetProvidedSignature()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InvalidSignatureErrorDetailsValidationError{
				field:  "ProvidedSignature",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch m.ExpectedBlob.(type) {

	case *InvalidSignatureErrorDetails_ExpectedTransaction:

		if v, ok := interface{}(m.GetExpectedTransaction()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InvalidSignatureErrorDetailsValidationError{
					field:  "ExpectedTransaction",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *InvalidSignatureErrorDetails_ExpectedVixnHash:

		if v, ok := interface{}(m.GetExpectedVixnHash()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InvalidSignatureErrorDetailsValidationError{
					field:  "ExpectedVixnHash",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		return InvalidSignatureErrorDetailsValidationError{
			field:  "ExpectedBlob",
			reason: "value is required",
		}

	}

	return nil
}

// InvalidSignatureErrorDetailsValidationError is the validation error returned
// by InvalidSignatureErrorDetails.Validate if the designated constraints
// aren't met.
type InvalidSignatureErrorDetailsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InvalidSignatureErrorDetailsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InvalidSignatureErrorDetailsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InvalidSignatureErrorDetailsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InvalidSignatureErrorDetailsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InvalidSignatureErrorDetailsValidationError) ErrorName() string {
	return "InvalidSignatureErrorDetailsValidationError"
}

// Error satisfies the builtin error interface
func (e InvalidSignatureErrorDetailsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInvalidSignatureErrorDetails.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InvalidSignatureErrorDetailsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InvalidSignatureErrorDetailsValidationError{}

// Validate checks the field values on DeniedErrorDetails with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeniedErrorDetails) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	if l := utf8.RuneCountInString(m.GetReason()); l < 1 || l > 2048 {
		return DeniedErrorDetailsValidationError{
			field:  "Reason",
			reason: "value length must be between 1 and 2048 runes, inclusive",
		}
	}

	return nil
}

// DeniedErrorDetailsValidationError is the validation error returned by
// DeniedErrorDetails.Validate if the designated constraints aren't met.
type DeniedErrorDetailsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeniedErrorDetailsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeniedErrorDetailsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeniedErrorDetailsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeniedErrorDetailsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeniedErrorDetailsValidationError) ErrorName() string {
	return "DeniedErrorDetailsValidationError"
}

// Error satisfies the builtin error interface
func (e DeniedErrorDetailsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeniedErrorDetails.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeniedErrorDetailsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeniedErrorDetailsValidationError{}

// Validate checks the field values on UpgradeableIntent with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UpgradeableIntent) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetId() == nil {
		return UpgradeableIntentValidationError{
			field:  "Id",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpgradeableIntentValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := len(m.GetActions()); l < 1 || l > 256 {
		return UpgradeableIntentValidationError{
			field:  "Actions",
			reason: "value must contain between 1 and 256 items, inclusive",
		}
	}

	for idx, item := range m.GetActions() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpgradeableIntentValidationError{
					field:  fmt.Sprintf("Actions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// UpgradeableIntentValidationError is the validation error returned by
// UpgradeableIntent.Validate if the designated constraints aren't met.
type UpgradeableIntentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpgradeableIntentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpgradeableIntentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpgradeableIntentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpgradeableIntentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpgradeableIntentValidationError) ErrorName() string {
	return "UpgradeableIntentValidationError"
}

// Error satisfies the builtin error interface
func (e UpgradeableIntentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpgradeableIntent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpgradeableIntentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpgradeableIntentValidationError{}

// Validate checks the field values on ExchangeData with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ExchangeData) Validate() error {
	if m == nil {
		return nil
	}

	if !_ExchangeData_Currency_Pattern.MatchString(m.GetCurrency()) {
		return ExchangeDataValidationError{
			field:  "Currency",
			reason: "value does not match regex pattern \"^[a-z]{3}$\"",
		}
	}

	if m.GetExchangeRate() <= 0 {
		return ExchangeDataValidationError{
			field:  "ExchangeRate",
			reason: "value must be greater than 0",
		}
	}

	if m.GetNativeAmount() <= 0 {
		return ExchangeDataValidationError{
			field:  "NativeAmount",
			reason: "value must be greater than 0",
		}
	}

	if m.GetQuarks() <= 0 {
		return ExchangeDataValidationError{
			field:  "Quarks",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// ExchangeDataValidationError is the validation error returned by
// ExchangeData.Validate if the designated constraints aren't met.
type ExchangeDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExchangeDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExchangeDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExchangeDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExchangeDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExchangeDataValidationError) ErrorName() string { return "ExchangeDataValidationError" }

// Error satisfies the builtin error interface
func (e ExchangeDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExchangeData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExchangeDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExchangeDataValidationError{}

var _ExchangeData_Currency_Pattern = regexp.MustCompile("^[a-z]{3}$")

// Validate checks the field values on ExchangeDataWithoutRate with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ExchangeDataWithoutRate) Validate() error {
	if m == nil {
		return nil
	}

	if !_ExchangeDataWithoutRate_Currency_Pattern.MatchString(m.GetCurrency()) {
		return ExchangeDataWithoutRateValidationError{
			field:  "Currency",
			reason: "value does not match regex pattern \"^[a-z]{3}$\"",
		}
	}

	if m.GetNativeAmount() <= 0 {
		return ExchangeDataWithoutRateValidationError{
			field:  "NativeAmount",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// ExchangeDataWithoutRateValidationError is the validation error returned by
// ExchangeDataWithoutRate.Validate if the designated constraints aren't met.
type ExchangeDataWithoutRateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExchangeDataWithoutRateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExchangeDataWithoutRateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExchangeDataWithoutRateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExchangeDataWithoutRateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExchangeDataWithoutRateValidationError) ErrorName() string {
	return "ExchangeDataWithoutRateValidationError"
}

// Error satisfies the builtin error interface
func (e ExchangeDataWithoutRateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExchangeDataWithoutRate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExchangeDataWithoutRateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExchangeDataWithoutRateValidationError{}

var _ExchangeDataWithoutRate_Currency_Pattern = regexp.MustCompile("^[a-z]{3}$")

// Validate checks the field values on AdditionalFeePayment with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AdditionalFeePayment) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetDestination() == nil {
		return AdditionalFeePaymentValidationError{
			field:  "Destination",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetDestination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdditionalFeePaymentValidationError{
				field:  "Destination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if val := m.GetFeeBps(); val <= 0 || val > 10000 {
		return AdditionalFeePaymentValidationError{
			field:  "FeeBps",
			reason: "value must be inside range (0, 10000]",
		}
	}

	return nil
}

// AdditionalFeePaymentValidationError is the validation error returned by
// AdditionalFeePayment.Validate if the designated constraints aren't met.
type AdditionalFeePaymentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdditionalFeePaymentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdditionalFeePaymentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdditionalFeePaymentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdditionalFeePaymentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdditionalFeePaymentValidationError) ErrorName() string {
	return "AdditionalFeePaymentValidationError"
}

// Error satisfies the builtin error interface
func (e AdditionalFeePaymentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdditionalFeePayment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdditionalFeePaymentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdditionalFeePaymentValidationError{}

// Validate checks the field values on SendLimit with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *SendLimit) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for NextTransaction

	// no validation rules for MaxPerTransaction

	// no validation rules for MaxPerDay

	return nil
}

// SendLimitValidationError is the validation error returned by
// SendLimit.Validate if the designated constraints aren't met.
type SendLimitValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendLimitValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendLimitValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendLimitValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendLimitValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendLimitValidationError) ErrorName() string { return "SendLimitValidationError" }

// Error satisfies the builtin error interface
func (e SendLimitValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendLimit.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendLimitValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendLimitValidationError{}

// Validate checks the field values on DepositLimit with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *DepositLimit) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for MaxQuarks

	return nil
}

// DepositLimitValidationError is the validation error returned by
// DepositLimit.Validate if the designated constraints aren't met.
type DepositLimitValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DepositLimitValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DepositLimitValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DepositLimitValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DepositLimitValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DepositLimitValidationError) ErrorName() string { return "DepositLimitValidationError" }

// Error satisfies the builtin error interface
func (e DepositLimitValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDepositLimit.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DepositLimitValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DepositLimitValidationError{}

// Validate checks the field values on MicroPaymentLimit with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *MicroPaymentLimit) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for MaxPerTransaction

	// no validation rules for MinPerTransaction

	return nil
}

// MicroPaymentLimitValidationError is the validation error returned by
// MicroPaymentLimit.Validate if the designated constraints aren't met.
type MicroPaymentLimitValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MicroPaymentLimitValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MicroPaymentLimitValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MicroPaymentLimitValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MicroPaymentLimitValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MicroPaymentLimitValidationError) ErrorName() string {
	return "MicroPaymentLimitValidationError"
}

// Error satisfies the builtin error interface
func (e MicroPaymentLimitValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMicroPaymentLimit.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MicroPaymentLimitValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MicroPaymentLimitValidationError{}

// Validate checks the field values on BuyModuleLimit with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *BuyModuleLimit) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for MinPerTransaction

	// no validation rules for MaxPerTransaction

	return nil
}

// BuyModuleLimitValidationError is the validation error returned by
// BuyModuleLimit.Validate if the designated constraints aren't met.
type BuyModuleLimitValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BuyModuleLimitValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BuyModuleLimitValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BuyModuleLimitValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BuyModuleLimitValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BuyModuleLimitValidationError) ErrorName() string { return "BuyModuleLimitValidationError" }

// Error satisfies the builtin error interface
func (e BuyModuleLimitValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBuyModuleLimit.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BuyModuleLimitValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BuyModuleLimitValidationError{}

// Validate checks the field values on TippedUser with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *TippedUser) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _TippedUser_Platform_InLookup[m.GetPlatform()]; !ok {
		return TippedUserValidationError{
			field:  "Platform",
			reason: "value must be in list [1]",
		}
	}

	if l := utf8.RuneCountInString(m.GetUsername()); l < 1 || l > 15 {
		return TippedUserValidationError{
			field:  "Username",
			reason: "value length must be between 1 and 15 runes, inclusive",
		}
	}

	return nil
}

// TippedUserValidationError is the validation error returned by
// TippedUser.Validate if the designated constraints aren't met.
type TippedUserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TippedUserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TippedUserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TippedUserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TippedUserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TippedUserValidationError) ErrorName() string { return "TippedUserValidationError" }

// Error satisfies the builtin error interface
func (e TippedUserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTippedUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TippedUserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TippedUserValidationError{}

var _TippedUser_Platform_InLookup = map[TippedUser_Platform]struct{}{
	1: {},
}

// Validate checks the field values on Cursor with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Cursor) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetValue()) != 8 {
		return CursorValidationError{
			field:  "Value",
			reason: "value length must be 8 bytes",
		}
	}

	return nil
}

// CursorValidationError is the validation error returned by Cursor.Validate if
// the designated constraints aren't met.
type CursorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CursorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CursorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CursorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CursorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CursorValidationError) ErrorName() string { return "CursorValidationError" }

// Error satisfies the builtin error interface
func (e CursorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCursor.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CursorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CursorValidationError{}

// Validate checks the field values on SubmitIntentRequest_SubmitActions with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *SubmitIntentRequest_SubmitActions) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetId() == nil {
		return SubmitIntentRequest_SubmitActionsValidationError{
			field:  "Id",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubmitIntentRequest_SubmitActionsValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetOwner() == nil {
		return SubmitIntentRequest_SubmitActionsValidationError{
			field:  "Owner",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetOwner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubmitIntentRequest_SubmitActionsValidationError{
				field:  "Owner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetMetadata() == nil {
		return SubmitIntentRequest_SubmitActionsValidationError{
			field:  "Metadata",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubmitIntentRequest_SubmitActionsValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := len(m.GetActions()); l < 1 || l > 256 {
		return SubmitIntentRequest_SubmitActionsValidationError{
			field:  "Actions",
			reason: "value must contain between 1 and 256 items, inclusive",
		}
	}

	for idx, item := range m.GetActions() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SubmitIntentRequest_SubmitActionsValidationError{
					field:  fmt.Sprintf("Actions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.GetSignature() == nil {
		return SubmitIntentRequest_SubmitActionsValidationError{
			field:  "Signature",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetSignature()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubmitIntentRequest_SubmitActionsValidationError{
				field:  "Signature",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDeviceToken()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubmitIntentRequest_SubmitActionsValidationError{
				field:  "DeviceToken",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SubmitIntentRequest_SubmitActionsValidationError is the validation error
// returned by SubmitIntentRequest_SubmitActions.Validate if the designated
// constraints aren't met.
type SubmitIntentRequest_SubmitActionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitIntentRequest_SubmitActionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmitIntentRequest_SubmitActionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmitIntentRequest_SubmitActionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmitIntentRequest_SubmitActionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmitIntentRequest_SubmitActionsValidationError) ErrorName() string {
	return "SubmitIntentRequest_SubmitActionsValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitIntentRequest_SubmitActionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitIntentRequest_SubmitActions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitIntentRequest_SubmitActionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitIntentRequest_SubmitActionsValidationError{}

// Validate checks the field values on SubmitIntentRequest_SubmitSignatures
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *SubmitIntentRequest_SubmitSignatures) Validate() error {
	if m == nil {
		return nil
	}

	if l := len(m.GetSignatures()); l < 1 || l > 256 {
		return SubmitIntentRequest_SubmitSignaturesValidationError{
			field:  "Signatures",
			reason: "value must contain between 1 and 256 items, inclusive",
		}
	}

	for idx, item := range m.GetSignatures() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SubmitIntentRequest_SubmitSignaturesValidationError{
					field:  fmt.Sprintf("Signatures[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// SubmitIntentRequest_SubmitSignaturesValidationError is the validation error
// returned by SubmitIntentRequest_SubmitSignatures.Validate if the designated
// constraints aren't met.
type SubmitIntentRequest_SubmitSignaturesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitIntentRequest_SubmitSignaturesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmitIntentRequest_SubmitSignaturesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmitIntentRequest_SubmitSignaturesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmitIntentRequest_SubmitSignaturesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmitIntentRequest_SubmitSignaturesValidationError) ErrorName() string {
	return "SubmitIntentRequest_SubmitSignaturesValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitIntentRequest_SubmitSignaturesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitIntentRequest_SubmitSignatures.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitIntentRequest_SubmitSignaturesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitIntentRequest_SubmitSignaturesValidationError{}

// Validate checks the field values on SubmitIntentResponse_ServerParameters
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *SubmitIntentResponse_ServerParameters) Validate() error {
	if m == nil {
		return nil
	}

	if l := len(m.GetServerParameters()); l < 1 || l > 256 {
		return SubmitIntentResponse_ServerParametersValidationError{
			field:  "ServerParameters",
			reason: "value must contain between 1 and 256 items, inclusive",
		}
	}

	for idx, item := range m.GetServerParameters() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SubmitIntentResponse_ServerParametersValidationError{
					field:  fmt.Sprintf("ServerParameters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// SubmitIntentResponse_ServerParametersValidationError is the validation error
// returned by SubmitIntentResponse_ServerParameters.Validate if the
// designated constraints aren't met.
type SubmitIntentResponse_ServerParametersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitIntentResponse_ServerParametersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmitIntentResponse_ServerParametersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmitIntentResponse_ServerParametersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmitIntentResponse_ServerParametersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmitIntentResponse_ServerParametersValidationError) ErrorName() string {
	return "SubmitIntentResponse_ServerParametersValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitIntentResponse_ServerParametersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitIntentResponse_ServerParameters.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitIntentResponse_ServerParametersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitIntentResponse_ServerParametersValidationError{}

// Validate checks the field values on SubmitIntentResponse_Success with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SubmitIntentResponse_Success) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	return nil
}

// SubmitIntentResponse_SuccessValidationError is the validation error returned
// by SubmitIntentResponse_Success.Validate if the designated constraints
// aren't met.
type SubmitIntentResponse_SuccessValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitIntentResponse_SuccessValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmitIntentResponse_SuccessValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmitIntentResponse_SuccessValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmitIntentResponse_SuccessValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmitIntentResponse_SuccessValidationError) ErrorName() string {
	return "SubmitIntentResponse_SuccessValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitIntentResponse_SuccessValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitIntentResponse_Success.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitIntentResponse_SuccessValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitIntentResponse_SuccessValidationError{}

// Validate checks the field values on SubmitIntentResponse_Error with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SubmitIntentResponse_Error) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	for idx, item := range m.GetErrorDetails() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SubmitIntentResponse_ErrorValidationError{
					field:  fmt.Sprintf("ErrorDetails[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// SubmitIntentResponse_ErrorValidationError is the validation error returned
// by SubmitIntentResponse_Error.Validate if the designated constraints aren't met.
type SubmitIntentResponse_ErrorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitIntentResponse_ErrorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmitIntentResponse_ErrorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmitIntentResponse_ErrorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmitIntentResponse_ErrorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmitIntentResponse_ErrorValidationError) ErrorName() string {
	return "SubmitIntentResponse_ErrorValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitIntentResponse_ErrorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitIntentResponse_Error.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitIntentResponse_ErrorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitIntentResponse_ErrorValidationError{}

// Validate checks the field values on SwapRequest_Initiate with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SwapRequest_Initiate) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetOwner() == nil {
		return SwapRequest_InitiateValidationError{
			field:  "Owner",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetOwner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SwapRequest_InitiateValidationError{
				field:  "Owner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetSwapAuthority() == nil {
		return SwapRequest_InitiateValidationError{
			field:  "SwapAuthority",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetSwapAuthority()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SwapRequest_InitiateValidationError{
				field:  "SwapAuthority",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Limit

	// no validation rules for WaitForBlockchainStatus

	if m.GetSignature() == nil {
		return SwapRequest_InitiateValidationError{
			field:  "Signature",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetSignature()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SwapRequest_InitiateValidationError{
				field:  "Signature",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SwapRequest_InitiateValidationError is the validation error returned by
// SwapRequest_Initiate.Validate if the designated constraints aren't met.
type SwapRequest_InitiateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SwapRequest_InitiateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SwapRequest_InitiateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SwapRequest_InitiateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SwapRequest_InitiateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SwapRequest_InitiateValidationError) ErrorName() string {
	return "SwapRequest_InitiateValidationError"
}

// Error satisfies the builtin error interface
func (e SwapRequest_InitiateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSwapRequest_Initiate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SwapRequest_InitiateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SwapRequest_InitiateValidationError{}

// Validate checks the field values on SwapRequest_SubmitSignature with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SwapRequest_SubmitSignature) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetSignature() == nil {
		return SwapRequest_SubmitSignatureValidationError{
			field:  "Signature",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetSignature()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SwapRequest_SubmitSignatureValidationError{
				field:  "Signature",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SwapRequest_SubmitSignatureValidationError is the validation error returned
// by SwapRequest_SubmitSignature.Validate if the designated constraints
// aren't met.
type SwapRequest_SubmitSignatureValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SwapRequest_SubmitSignatureValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SwapRequest_SubmitSignatureValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SwapRequest_SubmitSignatureValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SwapRequest_SubmitSignatureValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SwapRequest_SubmitSignatureValidationError) ErrorName() string {
	return "SwapRequest_SubmitSignatureValidationError"
}

// Error satisfies the builtin error interface
func (e SwapRequest_SubmitSignatureValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSwapRequest_SubmitSignature.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SwapRequest_SubmitSignatureValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SwapRequest_SubmitSignatureValidationError{}

// Validate checks the field values on SwapResponse_ServerParameters with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SwapResponse_ServerParameters) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetPayer() == nil {
		return SwapResponse_ServerParametersValidationError{
			field:  "Payer",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetPayer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SwapResponse_ServerParametersValidationError{
				field:  "Payer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetRecentBlockhash() == nil {
		return SwapResponse_ServerParametersValidationError{
			field:  "RecentBlockhash",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetRecentBlockhash()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SwapResponse_ServerParametersValidationError{
				field:  "RecentBlockhash",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ComputeUnitLimit

	// no validation rules for ComputeUnitPrice

	if m.GetSwapProgram() == nil {
		return SwapResponse_ServerParametersValidationError{
			field:  "SwapProgram",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetSwapProgram()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SwapResponse_ServerParametersValidationError{
				field:  "SwapProgram",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := len(m.GetSwapIxnAccounts()); l < 1 || l > 64 {
		return SwapResponse_ServerParametersValidationError{
			field:  "SwapIxnAccounts",
			reason: "value must contain between 1 and 64 items, inclusive",
		}
	}

	for idx, item := range m.GetSwapIxnAccounts() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SwapResponse_ServerParametersValidationError{
					field:  fmt.Sprintf("SwapIxnAccounts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if l := len(m.GetSwapIxnData()); l < 1 || l > 256 {
		return SwapResponse_ServerParametersValidationError{
			field:  "SwapIxnData",
			reason: "value length must be between 1 and 256 bytes, inclusive",
		}
	}

	if m.GetMaxToSend() <= 0 {
		return SwapResponse_ServerParametersValidationError{
			field:  "MaxToSend",
			reason: "value must be greater than 0",
		}
	}

	if m.GetMinToReceive() <= 0 {
		return SwapResponse_ServerParametersValidationError{
			field:  "MinToReceive",
			reason: "value must be greater than 0",
		}
	}

	if m.GetNonce() == nil {
		return SwapResponse_ServerParametersValidationError{
			field:  "Nonce",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetNonce()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SwapResponse_ServerParametersValidationError{
				field:  "Nonce",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SwapResponse_ServerParametersValidationError is the validation error
// returned by SwapResponse_ServerParameters.Validate if the designated
// constraints aren't met.
type SwapResponse_ServerParametersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SwapResponse_ServerParametersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SwapResponse_ServerParametersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SwapResponse_ServerParametersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SwapResponse_ServerParametersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SwapResponse_ServerParametersValidationError) ErrorName() string {
	return "SwapResponse_ServerParametersValidationError"
}

// Error satisfies the builtin error interface
func (e SwapResponse_ServerParametersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSwapResponse_ServerParameters.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SwapResponse_ServerParametersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SwapResponse_ServerParametersValidationError{}

// Validate checks the field values on SwapResponse_Success with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SwapResponse_Success) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	return nil
}

// SwapResponse_SuccessValidationError is the validation error returned by
// SwapResponse_Success.Validate if the designated constraints aren't met.
type SwapResponse_SuccessValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SwapResponse_SuccessValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SwapResponse_SuccessValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SwapResponse_SuccessValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SwapResponse_SuccessValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SwapResponse_SuccessValidationError) ErrorName() string {
	return "SwapResponse_SuccessValidationError"
}

// Error satisfies the builtin error interface
func (e SwapResponse_SuccessValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSwapResponse_Success.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SwapResponse_SuccessValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SwapResponse_SuccessValidationError{}

// Validate checks the field values on SwapResponse_Error with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SwapResponse_Error) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	for idx, item := range m.GetErrorDetails() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SwapResponse_ErrorValidationError{
					field:  fmt.Sprintf("ErrorDetails[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// SwapResponse_ErrorValidationError is the validation error returned by
// SwapResponse_Error.Validate if the designated constraints aren't met.
type SwapResponse_ErrorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SwapResponse_ErrorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SwapResponse_ErrorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SwapResponse_ErrorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SwapResponse_ErrorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SwapResponse_ErrorValidationError) ErrorName() string {
	return "SwapResponse_ErrorValidationError"
}

// Error satisfies the builtin error interface
func (e SwapResponse_ErrorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSwapResponse_Error.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SwapResponse_ErrorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SwapResponse_ErrorValidationError{}

// Validate checks the field values on
// UpgradeableIntent_UpgradeablePrivateAction with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *UpgradeableIntent_UpgradeablePrivateAction) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetTransactionBlob() == nil {
		return UpgradeableIntent_UpgradeablePrivateActionValidationError{
			field:  "TransactionBlob",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetTransactionBlob()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpgradeableIntent_UpgradeablePrivateActionValidationError{
				field:  "TransactionBlob",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetClientSignature() == nil {
		return UpgradeableIntent_UpgradeablePrivateActionValidationError{
			field:  "ClientSignature",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetClientSignature()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpgradeableIntent_UpgradeablePrivateActionValidationError{
				field:  "ClientSignature",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ActionId

	if _, ok := _UpgradeableIntent_UpgradeablePrivateAction_SourceAccountType_NotInLookup[m.GetSourceAccountType()]; ok {
		return UpgradeableIntent_UpgradeablePrivateActionValidationError{
			field:  "SourceAccountType",
			reason: "value must not be in list [0]",
		}
	}

	// no validation rules for SourceDerivationIndex

	if m.GetOriginalDestination() == nil {
		return UpgradeableIntent_UpgradeablePrivateActionValidationError{
			field:  "OriginalDestination",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetOriginalDestination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpgradeableIntent_UpgradeablePrivateActionValidationError{
				field:  "OriginalDestination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetOriginalAmount() <= 0 {
		return UpgradeableIntent_UpgradeablePrivateActionValidationError{
			field:  "OriginalAmount",
			reason: "value must be greater than 0",
		}
	}

	if m.GetTreasury() == nil {
		return UpgradeableIntent_UpgradeablePrivateActionValidationError{
			field:  "Treasury",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetTreasury()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpgradeableIntent_UpgradeablePrivateActionValidationError{
				field:  "Treasury",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetRecentRoot() == nil {
		return UpgradeableIntent_UpgradeablePrivateActionValidationError{
			field:  "RecentRoot",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetRecentRoot()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpgradeableIntent_UpgradeablePrivateActionValidationError{
				field:  "RecentRoot",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpgradeableIntent_UpgradeablePrivateActionValidationError is the validation
// error returned by UpgradeableIntent_UpgradeablePrivateAction.Validate if
// the designated constraints aren't met.
type UpgradeableIntent_UpgradeablePrivateActionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpgradeableIntent_UpgradeablePrivateActionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpgradeableIntent_UpgradeablePrivateActionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpgradeableIntent_UpgradeablePrivateActionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpgradeableIntent_UpgradeablePrivateActionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpgradeableIntent_UpgradeablePrivateActionValidationError) ErrorName() string {
	return "UpgradeableIntent_UpgradeablePrivateActionValidationError"
}

// Error satisfies the builtin error interface
func (e UpgradeableIntent_UpgradeablePrivateActionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpgradeableIntent_UpgradeablePrivateAction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpgradeableIntent_UpgradeablePrivateActionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpgradeableIntent_UpgradeablePrivateActionValidationError{}

var _UpgradeableIntent_UpgradeablePrivateAction_SourceAccountType_NotInLookup = map[common.AccountType]struct{}{
	0: {},
}
