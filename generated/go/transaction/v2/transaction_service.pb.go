// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: transaction/v2/transaction_service.proto

package transaction

import (
	v1 "github.com/code-payments/code-protobuf-api/generated/go/common/v1"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AirdropType int32

const (
	AirdropType_UNKNOWN AirdropType = 0
	// Reward for onboarding another user
	AirdropType_ONBOARDING_BONUS AirdropType = 1
	// Airdrop for getting a user started with first crypto balance
	AirdropType_WELCOME_BONUS AirdropType = 2
)

// Enum value maps for AirdropType.
var (
	AirdropType_name = map[int32]string{
		0: "UNKNOWN",
		1: "ONBOARDING_BONUS",
		2: "WELCOME_BONUS",
	}
	AirdropType_value = map[string]int32{
		"UNKNOWN":          0,
		"ONBOARDING_BONUS": 1,
		"WELCOME_BONUS":    2,
	}
)

func (x AirdropType) Enum() *AirdropType {
	p := new(AirdropType)
	*p = x
	return p
}

func (x AirdropType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AirdropType) Descriptor() protoreflect.EnumDescriptor {
	return file_transaction_v2_transaction_service_proto_enumTypes[0].Descriptor()
}

func (AirdropType) Type() protoreflect.EnumType {
	return &file_transaction_v2_transaction_service_proto_enumTypes[0]
}

func (x AirdropType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AirdropType.Descriptor instead.
func (AirdropType) EnumDescriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{0}
}

type SubmitIntentResponse_Success_Code int32

const (
	// The intent was successfully created and is now scheduled.
	SubmitIntentResponse_Success_OK SubmitIntentResponse_Success_Code = 0
)

// Enum value maps for SubmitIntentResponse_Success_Code.
var (
	SubmitIntentResponse_Success_Code_name = map[int32]string{
		0: "OK",
	}
	SubmitIntentResponse_Success_Code_value = map[string]int32{
		"OK": 0,
	}
)

func (x SubmitIntentResponse_Success_Code) Enum() *SubmitIntentResponse_Success_Code {
	p := new(SubmitIntentResponse_Success_Code)
	*p = x
	return p
}

func (x SubmitIntentResponse_Success_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubmitIntentResponse_Success_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_transaction_v2_transaction_service_proto_enumTypes[1].Descriptor()
}

func (SubmitIntentResponse_Success_Code) Type() protoreflect.EnumType {
	return &file_transaction_v2_transaction_service_proto_enumTypes[1]
}

func (x SubmitIntentResponse_Success_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubmitIntentResponse_Success_Code.Descriptor instead.
func (SubmitIntentResponse_Success_Code) EnumDescriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{1, 1, 0}
}

type SubmitIntentResponse_Error_Code int32

const (
	// Denied by a guard (spam, money laundering, etc)
	SubmitIntentResponse_Error_DENIED SubmitIntentResponse_Error_Code = 0
	// The intent is invalid.
	SubmitIntentResponse_Error_INVALID_INTENT SubmitIntentResponse_Error_Code = 1
	// There is an issue with provided signatures.
	SubmitIntentResponse_Error_SIGNATURE_ERROR SubmitIntentResponse_Error_Code = 2
	// Server detected client has stale state.
	SubmitIntentResponse_Error_STALE_STATE SubmitIntentResponse_Error_Code = 3
)

// Enum value maps for SubmitIntentResponse_Error_Code.
var (
	SubmitIntentResponse_Error_Code_name = map[int32]string{
		0: "DENIED",
		1: "INVALID_INTENT",
		2: "SIGNATURE_ERROR",
		3: "STALE_STATE",
	}
	SubmitIntentResponse_Error_Code_value = map[string]int32{
		"DENIED":          0,
		"INVALID_INTENT":  1,
		"SIGNATURE_ERROR": 2,
		"STALE_STATE":     3,
	}
)

func (x SubmitIntentResponse_Error_Code) Enum() *SubmitIntentResponse_Error_Code {
	p := new(SubmitIntentResponse_Error_Code)
	*p = x
	return p
}

func (x SubmitIntentResponse_Error_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubmitIntentResponse_Error_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_transaction_v2_transaction_service_proto_enumTypes[2].Descriptor()
}

func (SubmitIntentResponse_Error_Code) Type() protoreflect.EnumType {
	return &file_transaction_v2_transaction_service_proto_enumTypes[2]
}

func (x SubmitIntentResponse_Error_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubmitIntentResponse_Error_Code.Descriptor instead.
func (SubmitIntentResponse_Error_Code) EnumDescriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{1, 2, 0}
}

type GetIntentMetadataResponse_Result int32

const (
	GetIntentMetadataResponse_OK        GetIntentMetadataResponse_Result = 0
	GetIntentMetadataResponse_NOT_FOUND GetIntentMetadataResponse_Result = 1
)

// Enum value maps for GetIntentMetadataResponse_Result.
var (
	GetIntentMetadataResponse_Result_name = map[int32]string{
		0: "OK",
		1: "NOT_FOUND",
	}
	GetIntentMetadataResponse_Result_value = map[string]int32{
		"OK":        0,
		"NOT_FOUND": 1,
	}
)

func (x GetIntentMetadataResponse_Result) Enum() *GetIntentMetadataResponse_Result {
	p := new(GetIntentMetadataResponse_Result)
	*p = x
	return p
}

func (x GetIntentMetadataResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetIntentMetadataResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_transaction_v2_transaction_service_proto_enumTypes[3].Descriptor()
}

func (GetIntentMetadataResponse_Result) Type() protoreflect.EnumType {
	return &file_transaction_v2_transaction_service_proto_enumTypes[3]
}

func (x GetIntentMetadataResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetIntentMetadataResponse_Result.Descriptor instead.
func (GetIntentMetadataResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{3, 0}
}

type GetLimitsResponse_Result int32

const (
	GetLimitsResponse_OK GetLimitsResponse_Result = 0
)

// Enum value maps for GetLimitsResponse_Result.
var (
	GetLimitsResponse_Result_name = map[int32]string{
		0: "OK",
	}
	GetLimitsResponse_Result_value = map[string]int32{
		"OK": 0,
	}
)

func (x GetLimitsResponse_Result) Enum() *GetLimitsResponse_Result {
	p := new(GetLimitsResponse_Result)
	*p = x
	return p
}

func (x GetLimitsResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetLimitsResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_transaction_v2_transaction_service_proto_enumTypes[4].Descriptor()
}

func (GetLimitsResponse_Result) Type() protoreflect.EnumType {
	return &file_transaction_v2_transaction_service_proto_enumTypes[4]
}

func (x GetLimitsResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetLimitsResponse_Result.Descriptor instead.
func (GetLimitsResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{5, 0}
}

type CanWithdrawToAccountResponse_AccountType int32

const (
	CanWithdrawToAccountResponse_Unknown      CanWithdrawToAccountResponse_AccountType = 0 // Server cannot determine
	CanWithdrawToAccountResponse_TokenAccount CanWithdrawToAccountResponse_AccountType = 1 // Client uses the address as is in SubmitIntent
	CanWithdrawToAccountResponse_OwnerAccount CanWithdrawToAccountResponse_AccountType = 2 // Client locally derives the ATA to use in SubmitIntent
)

// Enum value maps for CanWithdrawToAccountResponse_AccountType.
var (
	CanWithdrawToAccountResponse_AccountType_name = map[int32]string{
		0: "Unknown",
		1: "TokenAccount",
		2: "OwnerAccount",
	}
	CanWithdrawToAccountResponse_AccountType_value = map[string]int32{
		"Unknown":      0,
		"TokenAccount": 1,
		"OwnerAccount": 2,
	}
)

func (x CanWithdrawToAccountResponse_AccountType) Enum() *CanWithdrawToAccountResponse_AccountType {
	p := new(CanWithdrawToAccountResponse_AccountType)
	*p = x
	return p
}

func (x CanWithdrawToAccountResponse_AccountType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CanWithdrawToAccountResponse_AccountType) Descriptor() protoreflect.EnumDescriptor {
	return file_transaction_v2_transaction_service_proto_enumTypes[5].Descriptor()
}

func (CanWithdrawToAccountResponse_AccountType) Type() protoreflect.EnumType {
	return &file_transaction_v2_transaction_service_proto_enumTypes[5]
}

func (x CanWithdrawToAccountResponse_AccountType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CanWithdrawToAccountResponse_AccountType.Descriptor instead.
func (CanWithdrawToAccountResponse_AccountType) EnumDescriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{7, 0}
}

type AirdropResponse_Result int32

const (
	AirdropResponse_OK AirdropResponse_Result = 0
	// Airdrops are unavailable
	AirdropResponse_UNAVAILABLE AirdropResponse_Result = 1
	// The airdrop has already been claimed by the owner
	AirdropResponse_ALREADY_CLAIMED AirdropResponse_Result = 2
)

// Enum value maps for AirdropResponse_Result.
var (
	AirdropResponse_Result_name = map[int32]string{
		0: "OK",
		1: "UNAVAILABLE",
		2: "ALREADY_CLAIMED",
	}
	AirdropResponse_Result_value = map[string]int32{
		"OK":              0,
		"UNAVAILABLE":     1,
		"ALREADY_CLAIMED": 2,
	}
)

func (x AirdropResponse_Result) Enum() *AirdropResponse_Result {
	p := new(AirdropResponse_Result)
	*p = x
	return p
}

func (x AirdropResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AirdropResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_transaction_v2_transaction_service_proto_enumTypes[6].Descriptor()
}

func (AirdropResponse_Result) Type() protoreflect.EnumType {
	return &file_transaction_v2_transaction_service_proto_enumTypes[6]
}

func (x AirdropResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AirdropResponse_Result.Descriptor instead.
func (AirdropResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{9, 0}
}

type VoidGiftCardResponse_Result int32

const (
	VoidGiftCardResponse_OK VoidGiftCardResponse_Result = 0
	// The owner account didn't issue the gift card accoun
	VoidGiftCardResponse_DENIED VoidGiftCardResponse_Result = 1
	// A different owner account than the issuer claimed the gift card
	VoidGiftCardResponse_CLAIMED_BY_OTHER_USER VoidGiftCardResponse_Result = 2
	// The gift card doesn't exist
	VoidGiftCardResponse_NOT_FOUND VoidGiftCardResponse_Result = 3
)

// Enum value maps for VoidGiftCardResponse_Result.
var (
	VoidGiftCardResponse_Result_name = map[int32]string{
		0: "OK",
		1: "DENIED",
		2: "CLAIMED_BY_OTHER_USER",
		3: "NOT_FOUND",
	}
	VoidGiftCardResponse_Result_value = map[string]int32{
		"OK":                    0,
		"DENIED":                1,
		"CLAIMED_BY_OTHER_USER": 2,
		"NOT_FOUND":             3,
	}
)

func (x VoidGiftCardResponse_Result) Enum() *VoidGiftCardResponse_Result {
	p := new(VoidGiftCardResponse_Result)
	*p = x
	return p
}

func (x VoidGiftCardResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VoidGiftCardResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_transaction_v2_transaction_service_proto_enumTypes[7].Descriptor()
}

func (VoidGiftCardResponse_Result) Type() protoreflect.EnumType {
	return &file_transaction_v2_transaction_service_proto_enumTypes[7]
}

func (x VoidGiftCardResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VoidGiftCardResponse_Result.Descriptor instead.
func (VoidGiftCardResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{11, 0}
}

type OpenAccountsMetadata_AccountSet int32

const (
	OpenAccountsMetadata_USER OpenAccountsMetadata_AccountSet = 0 // Opens a set of user accounts
	OpenAccountsMetadata_POOL OpenAccountsMetadata_AccountSet = 1 // Opens a pool account
)

// Enum value maps for OpenAccountsMetadata_AccountSet.
var (
	OpenAccountsMetadata_AccountSet_name = map[int32]string{
		0: "USER",
		1: "POOL",
	}
	OpenAccountsMetadata_AccountSet_value = map[string]int32{
		"USER": 0,
		"POOL": 1,
	}
)

func (x OpenAccountsMetadata_AccountSet) Enum() *OpenAccountsMetadata_AccountSet {
	p := new(OpenAccountsMetadata_AccountSet)
	*p = x
	return p
}

func (x OpenAccountsMetadata_AccountSet) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenAccountsMetadata_AccountSet) Descriptor() protoreflect.EnumDescriptor {
	return file_transaction_v2_transaction_service_proto_enumTypes[8].Descriptor()
}

func (OpenAccountsMetadata_AccountSet) Type() protoreflect.EnumType {
	return &file_transaction_v2_transaction_service_proto_enumTypes[8]
}

func (x OpenAccountsMetadata_AccountSet) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenAccountsMetadata_AccountSet.Descriptor instead.
func (OpenAccountsMetadata_AccountSet) EnumDescriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{13, 0}
}

type FeePaymentAction_FeeType int32

const (
	FeePaymentAction_UNKNOWN                   FeePaymentAction_FeeType = 0
	FeePaymentAction_CREATE_ON_SEND_WITHDRAWAL FeePaymentAction_FeeType = 1 // Server-defined fee for creating an external ATA on withdrawals on send
)

// Enum value maps for FeePaymentAction_FeeType.
var (
	FeePaymentAction_FeeType_name = map[int32]string{
		0: "UNKNOWN",
		1: "CREATE_ON_SEND_WITHDRAWAL",
	}
	FeePaymentAction_FeeType_value = map[string]int32{
		"UNKNOWN":                   0,
		"CREATE_ON_SEND_WITHDRAWAL": 1,
	}
)

func (x FeePaymentAction_FeeType) Enum() *FeePaymentAction_FeeType {
	p := new(FeePaymentAction_FeeType)
	*p = x
	return p
}

func (x FeePaymentAction_FeeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FeePaymentAction_FeeType) Descriptor() protoreflect.EnumDescriptor {
	return file_transaction_v2_transaction_service_proto_enumTypes[9].Descriptor()
}

func (FeePaymentAction_FeeType) Type() protoreflect.EnumType {
	return &file_transaction_v2_transaction_service_proto_enumTypes[9]
}

func (x FeePaymentAction_FeeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FeePaymentAction_FeeType.Descriptor instead.
func (FeePaymentAction_FeeType) EnumDescriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{21, 0}
}

type DeniedErrorDetails_Code int32

const (
	// Reason code not yet defined
	DeniedErrorDetails_UNSPECIFIED DeniedErrorDetails_Code = 0
)

// Enum value maps for DeniedErrorDetails_Code.
var (
	DeniedErrorDetails_Code_name = map[int32]string{
		0: "UNSPECIFIED",
	}
	DeniedErrorDetails_Code_value = map[string]int32{
		"UNSPECIFIED": 0,
	}
)

func (x DeniedErrorDetails_Code) Enum() *DeniedErrorDetails_Code {
	p := new(DeniedErrorDetails_Code)
	*p = x
	return p
}

func (x DeniedErrorDetails_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeniedErrorDetails_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_transaction_v2_transaction_service_proto_enumTypes[10].Descriptor()
}

func (DeniedErrorDetails_Code) Type() protoreflect.EnumType {
	return &file_transaction_v2_transaction_service_proto_enumTypes[10]
}

func (x DeniedErrorDetails_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeniedErrorDetails_Code.Descriptor instead.
func (DeniedErrorDetails_Code) EnumDescriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{31, 0}
}

type SubmitIntentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//
	//	*SubmitIntentRequest_SubmitActions_
	//	*SubmitIntentRequest_SubmitSignatures_
	Request isSubmitIntentRequest_Request `protobuf_oneof:"request"`
}

func (x *SubmitIntentRequest) Reset() {
	*x = SubmitIntentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitIntentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitIntentRequest) ProtoMessage() {}

func (x *SubmitIntentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitIntentRequest.ProtoReflect.Descriptor instead.
func (*SubmitIntentRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{0}
}

func (m *SubmitIntentRequest) GetRequest() isSubmitIntentRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *SubmitIntentRequest) GetSubmitActions() *SubmitIntentRequest_SubmitActions {
	if x, ok := x.GetRequest().(*SubmitIntentRequest_SubmitActions_); ok {
		return x.SubmitActions
	}
	return nil
}

func (x *SubmitIntentRequest) GetSubmitSignatures() *SubmitIntentRequest_SubmitSignatures {
	if x, ok := x.GetRequest().(*SubmitIntentRequest_SubmitSignatures_); ok {
		return x.SubmitSignatures
	}
	return nil
}

type isSubmitIntentRequest_Request interface {
	isSubmitIntentRequest_Request()
}

type SubmitIntentRequest_SubmitActions_ struct {
	SubmitActions *SubmitIntentRequest_SubmitActions `protobuf:"bytes,1,opt,name=submit_actions,json=submitActions,proto3,oneof"`
}

type SubmitIntentRequest_SubmitSignatures_ struct {
	SubmitSignatures *SubmitIntentRequest_SubmitSignatures `protobuf:"bytes,2,opt,name=submit_signatures,json=submitSignatures,proto3,oneof"`
}

func (*SubmitIntentRequest_SubmitActions_) isSubmitIntentRequest_Request() {}

func (*SubmitIntentRequest_SubmitSignatures_) isSubmitIntentRequest_Request() {}

type SubmitIntentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*SubmitIntentResponse_ServerParameters_
	//	*SubmitIntentResponse_Success_
	//	*SubmitIntentResponse_Error_
	Response isSubmitIntentResponse_Response `protobuf_oneof:"response"`
}

func (x *SubmitIntentResponse) Reset() {
	*x = SubmitIntentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitIntentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitIntentResponse) ProtoMessage() {}

func (x *SubmitIntentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitIntentResponse.ProtoReflect.Descriptor instead.
func (*SubmitIntentResponse) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{1}
}

func (m *SubmitIntentResponse) GetResponse() isSubmitIntentResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *SubmitIntentResponse) GetServerParameters() *SubmitIntentResponse_ServerParameters {
	if x, ok := x.GetResponse().(*SubmitIntentResponse_ServerParameters_); ok {
		return x.ServerParameters
	}
	return nil
}

func (x *SubmitIntentResponse) GetSuccess() *SubmitIntentResponse_Success {
	if x, ok := x.GetResponse().(*SubmitIntentResponse_Success_); ok {
		return x.Success
	}
	return nil
}

func (x *SubmitIntentResponse) GetError() *SubmitIntentResponse_Error {
	if x, ok := x.GetResponse().(*SubmitIntentResponse_Error_); ok {
		return x.Error
	}
	return nil
}

type isSubmitIntentResponse_Response interface {
	isSubmitIntentResponse_Response()
}

type SubmitIntentResponse_ServerParameters_ struct {
	ServerParameters *SubmitIntentResponse_ServerParameters `protobuf:"bytes,1,opt,name=server_parameters,json=serverParameters,proto3,oneof"`
}

type SubmitIntentResponse_Success_ struct {
	Success *SubmitIntentResponse_Success `protobuf:"bytes,2,opt,name=success,proto3,oneof"`
}

type SubmitIntentResponse_Error_ struct {
	Error *SubmitIntentResponse_Error `protobuf:"bytes,3,opt,name=error,proto3,oneof"`
}

func (*SubmitIntentResponse_ServerParameters_) isSubmitIntentResponse_Response() {}

func (*SubmitIntentResponse_Success_) isSubmitIntentResponse_Response() {}

func (*SubmitIntentResponse_Error_) isSubmitIntentResponse_Response() {}

type GetIntentMetadataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The intent ID to query
	IntentId *v1.IntentId `protobuf:"bytes,1,opt,name=intent_id,json=intentId,proto3" json:"intent_id,omitempty"`
	// The verified owner account public key when not signing with the rendezvous
	// key. Only owner accounts involved in the intent can access the metadata.
	Owner *v1.SolanaAccountId `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	// The signature is of serialize(GetIntentStatusRequest) without this field set
	// using the private key of the rendezvous or owner account. This provides an
	// authentication mechanism to the RPC.
	Signature *v1.Signature `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *GetIntentMetadataRequest) Reset() {
	*x = GetIntentMetadataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIntentMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIntentMetadataRequest) ProtoMessage() {}

func (x *GetIntentMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIntentMetadataRequest.ProtoReflect.Descriptor instead.
func (*GetIntentMetadataRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetIntentMetadataRequest) GetIntentId() *v1.IntentId {
	if x != nil {
		return x.IntentId
	}
	return nil
}

func (x *GetIntentMetadataRequest) GetOwner() *v1.SolanaAccountId {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *GetIntentMetadataRequest) GetSignature() *v1.Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type GetIntentMetadataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result   GetIntentMetadataResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=code.transaction.v2.GetIntentMetadataResponse_Result" json:"result,omitempty"`
	Metadata *Metadata                        `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *GetIntentMetadataResponse) Reset() {
	*x = GetIntentMetadataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIntentMetadataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIntentMetadataResponse) ProtoMessage() {}

func (x *GetIntentMetadataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIntentMetadataResponse.ProtoReflect.Descriptor instead.
func (*GetIntentMetadataResponse) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetIntentMetadataResponse) GetResult() GetIntentMetadataResponse_Result {
	if x != nil {
		return x.Result
	}
	return GetIntentMetadataResponse_OK
}

func (x *GetIntentMetadataResponse) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type GetLimitsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The owner account whose limits will be calculated. Any other owner accounts
	// linked with the same identity of the owner will also be applied.
	Owner *v1.SolanaAccountId `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	// The signature is of serialize(GetLimitsRequest) without this field set
	// using the private key of the owner account. This provides an authentication
	// mechanism to the RPC.
	Signature *v1.Signature `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	// All transactions starting at this time will be incorporated into the consumed
	// limit calculation. Clients should set this to the start of the current day in
	// the client's current time zone (because server has no knowledge of this atm).
	ConsumedSince *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=consumed_since,json=consumedSince,proto3" json:"consumed_since,omitempty"`
}

func (x *GetLimitsRequest) Reset() {
	*x = GetLimitsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLimitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLimitsRequest) ProtoMessage() {}

func (x *GetLimitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLimitsRequest.ProtoReflect.Descriptor instead.
func (*GetLimitsRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{4}
}

func (x *GetLimitsRequest) GetOwner() *v1.SolanaAccountId {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *GetLimitsRequest) GetSignature() *v1.Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *GetLimitsRequest) GetConsumedSince() *timestamppb.Timestamp {
	if x != nil {
		return x.ConsumedSince
	}
	return nil
}

type GetLimitsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result GetLimitsResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=code.transaction.v2.GetLimitsResponse_Result" json:"result,omitempty"`
	// Send limits keyed by currency
	SendLimitsByCurrency map[string]*SendLimit `protobuf:"bytes,2,rep,name=send_limits_by_currency,json=sendLimitsByCurrency,proto3" json:"send_limits_by_currency,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The amount of USD transacted since the consumption timestamp
	UsdTransacted float64 `protobuf:"fixed64,6,opt,name=usd_transacted,json=usdTransacted,proto3" json:"usd_transacted,omitempty"`
}

func (x *GetLimitsResponse) Reset() {
	*x = GetLimitsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLimitsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLimitsResponse) ProtoMessage() {}

func (x *GetLimitsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLimitsResponse.ProtoReflect.Descriptor instead.
func (*GetLimitsResponse) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetLimitsResponse) GetResult() GetLimitsResponse_Result {
	if x != nil {
		return x.Result
	}
	return GetLimitsResponse_OK
}

func (x *GetLimitsResponse) GetSendLimitsByCurrency() map[string]*SendLimit {
	if x != nil {
		return x.SendLimitsByCurrency
	}
	return nil
}

func (x *GetLimitsResponse) GetUsdTransacted() float64 {
	if x != nil {
		return x.UsdTransacted
	}
	return 0
}

type CanWithdrawToAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The destination account attempted to be withdrawn to. Can be an owner or
	// token account.
	Account *v1.SolanaAccountId `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	// The mint that the withdraw will be operating against. For backwards
	// compatibility, if no mint is set, then it is assumed to be the core
	// mint.
	Mint *v1.SolanaAccountId `protobuf:"bytes,2,opt,name=mint,proto3" json:"mint,omitempty"`
}

func (x *CanWithdrawToAccountRequest) Reset() {
	*x = CanWithdrawToAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CanWithdrawToAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CanWithdrawToAccountRequest) ProtoMessage() {}

func (x *CanWithdrawToAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CanWithdrawToAccountRequest.ProtoReflect.Descriptor instead.
func (*CanWithdrawToAccountRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{6}
}

func (x *CanWithdrawToAccountRequest) GetAccount() *v1.SolanaAccountId {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *CanWithdrawToAccountRequest) GetMint() *v1.SolanaAccountId {
	if x != nil {
		return x.Mint
	}
	return nil
}

type CanWithdrawToAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Server-controlled flag to indicate if the account can be withdrawn to.
	// There are several reasons server may deny it, including:
	//   - Wrong type of Code account
	//   - Unsupported external account type (eg. token account but of the wrong mint)
	//
	// This is guaranteed to be false when account_type = Unknown.
	IsValidPaymentDestination bool `protobuf:"varint,1,opt,name=is_valid_payment_destination,json=isValidPaymentDestination,proto3" json:"is_valid_payment_destination,omitempty"`
	// Metadata so the client knows how to withdraw to the account. Server cannot
	// provide precalculated addresses in this response to maintain non-custodial
	// status.
	AccountType CanWithdrawToAccountResponse_AccountType `protobuf:"varint,2,opt,name=account_type,json=accountType,proto3,enum=code.transaction.v2.CanWithdrawToAccountResponse_AccountType" json:"account_type,omitempty"`
	// ATA requires initialization before the withdrawal can occur. Server will not
	// subsidize the account creation, so a fee is required.
	RequiresInitialization bool `protobuf:"varint,3,opt,name=requires_initialization,json=requiresInitialization,proto3" json:"requires_initialization,omitempty"`
	// The CREATE_ON_SEND_WITHDRAWAL fee, in USD, that must be paid in order to
	// submit a withdrawal to subsidize the creation of the account at time of
	// send. The user must explicitly agree to this fee amount before submitting
	// the intent.
	//
	// This will be set when requires_initialization = true
	//
	// Note: The fee is always paid in the target mint.
	FeeAmount *ExchangeDataWithoutRate `protobuf:"bytes,4,opt,name=fee_amount,json=feeAmount,proto3" json:"fee_amount,omitempty"`
}

func (x *CanWithdrawToAccountResponse) Reset() {
	*x = CanWithdrawToAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CanWithdrawToAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CanWithdrawToAccountResponse) ProtoMessage() {}

func (x *CanWithdrawToAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CanWithdrawToAccountResponse.ProtoReflect.Descriptor instead.
func (*CanWithdrawToAccountResponse) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{7}
}

func (x *CanWithdrawToAccountResponse) GetIsValidPaymentDestination() bool {
	if x != nil {
		return x.IsValidPaymentDestination
	}
	return false
}

func (x *CanWithdrawToAccountResponse) GetAccountType() CanWithdrawToAccountResponse_AccountType {
	if x != nil {
		return x.AccountType
	}
	return CanWithdrawToAccountResponse_Unknown
}

func (x *CanWithdrawToAccountResponse) GetRequiresInitialization() bool {
	if x != nil {
		return x.RequiresInitialization
	}
	return false
}

func (x *CanWithdrawToAccountResponse) GetFeeAmount() *ExchangeDataWithoutRate {
	if x != nil {
		return x.FeeAmount
	}
	return nil
}

type AirdropRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of airdrop to claim
	AirdropType AirdropType `protobuf:"varint,1,opt,name=airdrop_type,json=airdropType,proto3,enum=code.transaction.v2.AirdropType" json:"airdrop_type,omitempty"`
	// The owner account to airdrop core mint tokens to
	Owner *v1.SolanaAccountId `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	// The signature is of serialize(AirdropRequest) without this field set
	// using the private key of the owner account. This provides an authentication
	// mechanism to the RPC.
	Signature *v1.Signature `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *AirdropRequest) Reset() {
	*x = AirdropRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AirdropRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AirdropRequest) ProtoMessage() {}

func (x *AirdropRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AirdropRequest.ProtoReflect.Descriptor instead.
func (*AirdropRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{8}
}

func (x *AirdropRequest) GetAirdropType() AirdropType {
	if x != nil {
		return x.AirdropType
	}
	return AirdropType_UNKNOWN
}

func (x *AirdropRequest) GetOwner() *v1.SolanaAccountId {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *AirdropRequest) GetSignature() *v1.Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type AirdropResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result AirdropResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=code.transaction.v2.AirdropResponse_Result" json:"result,omitempty"`
	// Exchange data for the amount of core mint tokens airdropped when successful
	ExchangeData *ExchangeData `protobuf:"bytes,2,opt,name=exchange_data,json=exchangeData,proto3" json:"exchange_data,omitempty"`
}

func (x *AirdropResponse) Reset() {
	*x = AirdropResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AirdropResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AirdropResponse) ProtoMessage() {}

func (x *AirdropResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AirdropResponse.ProtoReflect.Descriptor instead.
func (*AirdropResponse) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{9}
}

func (x *AirdropResponse) GetResult() AirdropResponse_Result {
	if x != nil {
		return x.Result
	}
	return AirdropResponse_OK
}

func (x *AirdropResponse) GetExchangeData() *ExchangeData {
	if x != nil {
		return x.ExchangeData
	}
	return nil
}

type VoidGiftCardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The owner account that issued the gift card account
	Owner *v1.SolanaAccountId `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	// The vault of the gift card account to void
	GiftCardVault *v1.SolanaAccountId `protobuf:"bytes,2,opt,name=gift_card_vault,json=giftCardVault,proto3" json:"gift_card_vault,omitempty"`
	// The signature is of serialize(VoidGiftCardRequest) without this field set using
	// the private key of the owner account. This provides an authentication mechanism
	// to the RPC.
	Signature *v1.Signature `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *VoidGiftCardRequest) Reset() {
	*x = VoidGiftCardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoidGiftCardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoidGiftCardRequest) ProtoMessage() {}

func (x *VoidGiftCardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoidGiftCardRequest.ProtoReflect.Descriptor instead.
func (*VoidGiftCardRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{10}
}

func (x *VoidGiftCardRequest) GetOwner() *v1.SolanaAccountId {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *VoidGiftCardRequest) GetGiftCardVault() *v1.SolanaAccountId {
	if x != nil {
		return x.GiftCardVault
	}
	return nil
}

func (x *VoidGiftCardRequest) GetSignature() *v1.Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type VoidGiftCardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result VoidGiftCardResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=code.transaction.v2.VoidGiftCardResponse_Result" json:"result,omitempty"`
}

func (x *VoidGiftCardResponse) Reset() {
	*x = VoidGiftCardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoidGiftCardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoidGiftCardResponse) ProtoMessage() {}

func (x *VoidGiftCardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoidGiftCardResponse.ProtoReflect.Descriptor instead.
func (*VoidGiftCardResponse) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{11}
}

func (x *VoidGiftCardResponse) GetResult() VoidGiftCardResponse_Result {
	if x != nil {
		return x.Result
	}
	return VoidGiftCardResponse_OK
}

// Metadata describes the high-level details of an intent
type Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*Metadata_OpenAccounts
	//	*Metadata_SendPublicPayment
	//	*Metadata_ReceivePaymentsPublicly
	//	*Metadata_PublicDistribution
	Type isMetadata_Type `protobuf_oneof:"type"`
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{12}
}

func (m *Metadata) GetType() isMetadata_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *Metadata) GetOpenAccounts() *OpenAccountsMetadata {
	if x, ok := x.GetType().(*Metadata_OpenAccounts); ok {
		return x.OpenAccounts
	}
	return nil
}

func (x *Metadata) GetSendPublicPayment() *SendPublicPaymentMetadata {
	if x, ok := x.GetType().(*Metadata_SendPublicPayment); ok {
		return x.SendPublicPayment
	}
	return nil
}

func (x *Metadata) GetReceivePaymentsPublicly() *ReceivePaymentsPubliclyMetadata {
	if x, ok := x.GetType().(*Metadata_ReceivePaymentsPublicly); ok {
		return x.ReceivePaymentsPublicly
	}
	return nil
}

func (x *Metadata) GetPublicDistribution() *PublicDistributionMetadata {
	if x, ok := x.GetType().(*Metadata_PublicDistribution); ok {
		return x.PublicDistribution
	}
	return nil
}

type isMetadata_Type interface {
	isMetadata_Type()
}

type Metadata_OpenAccounts struct {
	OpenAccounts *OpenAccountsMetadata `protobuf:"bytes,1,opt,name=open_accounts,json=openAccounts,proto3,oneof"`
}

type Metadata_SendPublicPayment struct {
	SendPublicPayment *SendPublicPaymentMetadata `protobuf:"bytes,6,opt,name=send_public_payment,json=sendPublicPayment,proto3,oneof"`
}

type Metadata_ReceivePaymentsPublicly struct {
	ReceivePaymentsPublicly *ReceivePaymentsPubliclyMetadata `protobuf:"bytes,7,opt,name=receive_payments_publicly,json=receivePaymentsPublicly,proto3,oneof"`
}

type Metadata_PublicDistribution struct {
	PublicDistribution *PublicDistributionMetadata `protobuf:"bytes,9,opt,name=public_distribution,json=publicDistribution,proto3,oneof"`
}

func (*Metadata_OpenAccounts) isMetadata_Type() {}

func (*Metadata_SendPublicPayment) isMetadata_Type() {}

func (*Metadata_ReceivePaymentsPublicly) isMetadata_Type() {}

func (*Metadata_PublicDistribution) isMetadata_Type() {}

// Open a set of accounts
//
// Action Spec (User):
//
// for account in [PRIMARY]
//
//	actions.push_back(OpenAccountAction(account))
//
// Action Spec (Pool):
//
// for account in [POOL]
//
//	actions.push_back(OpenAccountAction(account))
type OpenAccountsMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountSet OpenAccountsMetadata_AccountSet `protobuf:"varint,1,opt,name=account_set,json=accountSet,proto3,enum=code.transaction.v2.OpenAccountsMetadata_AccountSet" json:"account_set,omitempty"`
	// The mint that this action will be operating against. For backwards
	// compatibility, if no mint is set, then it is assumed to be the core
	// mint.
	Mint *v1.SolanaAccountId `protobuf:"bytes,2,opt,name=mint,proto3" json:"mint,omitempty"`
}

func (x *OpenAccountsMetadata) Reset() {
	*x = OpenAccountsMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenAccountsMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenAccountsMetadata) ProtoMessage() {}

func (x *OpenAccountsMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenAccountsMetadata.ProtoReflect.Descriptor instead.
func (*OpenAccountsMetadata) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{13}
}

func (x *OpenAccountsMetadata) GetAccountSet() OpenAccountsMetadata_AccountSet {
	if x != nil {
		return x.AccountSet
	}
	return OpenAccountsMetadata_USER
}

func (x *OpenAccountsMetadata) GetMint() *v1.SolanaAccountId {
	if x != nil {
		return x.Mint
	}
	return nil
}

// Send a payment to a destination account publicly.
//
// Action Spec (Payment):
//
// actions = [NoPrivacyTransferAction(PRIMARY, destination, ExchangeData.Quarks)]
//
// Action Spec (Withdrawal):
//
// actions = [NoPrivacyTransferAction(PRIMARY, destination, ExchangeData.Quarks)]
//
//	if destinationRequiresInitialization {
//	  actions[0].NoPrivacyTransferAction.ExchangeData.Quarks -= feeAmount
//	  actions.push_back(FeePaymentAction(PRIMARY, feeAccount, feeAmount))
//	}
//
// Action Spec (Remote Send):
//
// actions = [
//
//	OpenAccountAction(REMOTE_SEND_GIFT_CARD),
//	NoPrivacyTransferAction(PRIMARY, REMOTE_SEND_GIFT_CARD, ExchangeData.Quarks),
//	NoPrivacyWithdrawAction(REMOTE_SEND_GIFT_CARD, PRIMARY, ExchangeData.Quarks, is_auto_return=true),
//
// ]
type SendPublicPaymentMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The source account where funds will be sent from. Currently, this is always
	// the user's primary account.
	Source *v1.SolanaAccountId `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
	// The destination token account to send funds to.
	Destination *v1.SolanaAccountId `protobuf:"bytes,1,opt,name=destination,proto3" json:"destination,omitempty"`
	// Destination owner account, which is required for withdrawals that intend
	// to create an ATA. Every other variation of this intent can omit this field.
	DestinationOwner *v1.SolanaAccountId `protobuf:"bytes,6,opt,name=destination_owner,json=destinationOwner,proto3" json:"destination_owner,omitempty"`
	// The exchange data of total funds being sent to the destination
	ExchangeData *ExchangeData `protobuf:"bytes,2,opt,name=exchange_data,json=exchangeData,proto3" json:"exchange_data,omitempty"`
	// Is the payment a withdrawal?
	IsWithdrawal bool `protobuf:"varint,3,opt,name=is_withdrawal,json=isWithdrawal,proto3" json:"is_withdrawal,omitempty"`
	// Is the payment going to a new gift card? Note is_withdrawal must be false.
	IsRemoteSend bool `protobuf:"varint,5,opt,name=is_remote_send,json=isRemoteSend,proto3" json:"is_remote_send,omitempty"`
	// The mint that this intent will be operating against. For backwards
	// compatibility, if no mint is set, then it is assumed to be the core
	// mint.
	Mint *v1.SolanaAccountId `protobuf:"bytes,7,opt,name=mint,proto3" json:"mint,omitempty"`
}

func (x *SendPublicPaymentMetadata) Reset() {
	*x = SendPublicPaymentMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendPublicPaymentMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendPublicPaymentMetadata) ProtoMessage() {}

func (x *SendPublicPaymentMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendPublicPaymentMetadata.ProtoReflect.Descriptor instead.
func (*SendPublicPaymentMetadata) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{14}
}

func (x *SendPublicPaymentMetadata) GetSource() *v1.SolanaAccountId {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *SendPublicPaymentMetadata) GetDestination() *v1.SolanaAccountId {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *SendPublicPaymentMetadata) GetDestinationOwner() *v1.SolanaAccountId {
	if x != nil {
		return x.DestinationOwner
	}
	return nil
}

func (x *SendPublicPaymentMetadata) GetExchangeData() *ExchangeData {
	if x != nil {
		return x.ExchangeData
	}
	return nil
}

func (x *SendPublicPaymentMetadata) GetIsWithdrawal() bool {
	if x != nil {
		return x.IsWithdrawal
	}
	return false
}

func (x *SendPublicPaymentMetadata) GetIsRemoteSend() bool {
	if x != nil {
		return x.IsRemoteSend
	}
	return false
}

func (x *SendPublicPaymentMetadata) GetMint() *v1.SolanaAccountId {
	if x != nil {
		return x.Mint
	}
	return nil
}

// Receive funds into a user-owned account publicly. All use cases of this intent
// close the account, so all funds must be moved.
//
// Action Spec (Remote Send):
//
// actions = [NoPrivacyWithdrawAction(REMOTE_SEND_GIFT_CARD, PRIMARY, quarks)]
type ReceivePaymentsPubliclyMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The remote send gift card to receive funds from
	Source *v1.SolanaAccountId `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	// The exact amount of quarks being received
	Quarks uint64 `protobuf:"varint,2,opt,name=quarks,proto3" json:"quarks,omitempty"`
	// Is the receipt of funds from a remote send gift card? Currently, this is
	// the only use case for this intent and validation enforces the flag to true.
	IsRemoteSend bool `protobuf:"varint,3,opt,name=is_remote_send,json=isRemoteSend,proto3" json:"is_remote_send,omitempty"`
	// If is_remote_send is true, the original exchange data that was provided as
	// part of creating the gift card account. This is purely a server-provided value.
	// SubmitIntent will disallow this being set.
	ExchangeData *ExchangeData `protobuf:"bytes,5,opt,name=exchange_data,json=exchangeData,proto3" json:"exchange_data,omitempty"`
	// The mint that this intent will be operating against. For backwards
	// compatibility, if no mint is set, then it is assumed to be the core
	// mint.
	Mint *v1.SolanaAccountId `protobuf:"bytes,6,opt,name=mint,proto3" json:"mint,omitempty"`
}

func (x *ReceivePaymentsPubliclyMetadata) Reset() {
	*x = ReceivePaymentsPubliclyMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceivePaymentsPubliclyMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceivePaymentsPubliclyMetadata) ProtoMessage() {}

func (x *ReceivePaymentsPubliclyMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceivePaymentsPubliclyMetadata.ProtoReflect.Descriptor instead.
func (*ReceivePaymentsPubliclyMetadata) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{15}
}

func (x *ReceivePaymentsPubliclyMetadata) GetSource() *v1.SolanaAccountId {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *ReceivePaymentsPubliclyMetadata) GetQuarks() uint64 {
	if x != nil {
		return x.Quarks
	}
	return 0
}

func (x *ReceivePaymentsPubliclyMetadata) GetIsRemoteSend() bool {
	if x != nil {
		return x.IsRemoteSend
	}
	return false
}

func (x *ReceivePaymentsPubliclyMetadata) GetExchangeData() *ExchangeData {
	if x != nil {
		return x.ExchangeData
	}
	return nil
}

func (x *ReceivePaymentsPubliclyMetadata) GetMint() *v1.SolanaAccountId {
	if x != nil {
		return x.Mint
	}
	return nil
}

// Distribute funds from a pool account publicly to one or more user-owned accounts.
//
// Action Spec:
//
// for distribution in distributions[:len(distributions)-1]
//
//	actions.push_back(NoPrivacyTransferAction(POOL, distribution.destination, distributions.quarks))
//
// actions.push_back(NoPrivacyWithdrawAction(POOL, distributions[len(distributions)-1].destination, distributions[len(distributions)-1].quarks))
//
// Notes:
//   - All funds must distributed. The balance of the pool must be zero at the end of the intent
//   - The pool is closed at the end of the intent via a NoPrivacyWithdrawAction
type PublicDistributionMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The pool account to distribute from
	Source *v1.SolanaAccountId `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	// The set of distributions
	Distributions []*PublicDistributionMetadata_Distribution `protobuf:"bytes,2,rep,name=distributions,proto3" json:"distributions,omitempty"`
	// The mint that this intent will be operating against. For backwards
	// compatibility, if no mint is set, then it is assumed to be the core
	// mint.
	Mint *v1.SolanaAccountId `protobuf:"bytes,3,opt,name=mint,proto3" json:"mint,omitempty"`
}

func (x *PublicDistributionMetadata) Reset() {
	*x = PublicDistributionMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicDistributionMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicDistributionMetadata) ProtoMessage() {}

func (x *PublicDistributionMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicDistributionMetadata.ProtoReflect.Descriptor instead.
func (*PublicDistributionMetadata) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{16}
}

func (x *PublicDistributionMetadata) GetSource() *v1.SolanaAccountId {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *PublicDistributionMetadata) GetDistributions() []*PublicDistributionMetadata_Distribution {
	if x != nil {
		return x.Distributions
	}
	return nil
}

func (x *PublicDistributionMetadata) GetMint() *v1.SolanaAccountId {
	if x != nil {
		return x.Mint
	}
	return nil
}

// Action is a well-defined, ordered and small set of transactions or virtual instructions
// for a unit of work that the client wants to perform on the blockchain. Clients provide
// parameters known to them in the action.
type Action struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of this action, which is unique within an intent. It must match
	// the index of the action's location in the SubmitAction's actions field.
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The type of action to perform.
	//
	// Types that are assignable to Type:
	//
	//	*Action_OpenAccount
	//	*Action_NoPrivacyTransfer
	//	*Action_NoPrivacyWithdraw
	//	*Action_FeePayment
	Type isAction_Type `protobuf_oneof:"type"`
}

func (x *Action) Reset() {
	*x = Action{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action) ProtoMessage() {}

func (x *Action) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action.ProtoReflect.Descriptor instead.
func (*Action) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{17}
}

func (x *Action) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (m *Action) GetType() isAction_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *Action) GetOpenAccount() *OpenAccountAction {
	if x, ok := x.GetType().(*Action_OpenAccount); ok {
		return x.OpenAccount
	}
	return nil
}

func (x *Action) GetNoPrivacyTransfer() *NoPrivacyTransferAction {
	if x, ok := x.GetType().(*Action_NoPrivacyTransfer); ok {
		return x.NoPrivacyTransfer
	}
	return nil
}

func (x *Action) GetNoPrivacyWithdraw() *NoPrivacyWithdrawAction {
	if x, ok := x.GetType().(*Action_NoPrivacyWithdraw); ok {
		return x.NoPrivacyWithdraw
	}
	return nil
}

func (x *Action) GetFeePayment() *FeePaymentAction {
	if x, ok := x.GetType().(*Action_FeePayment); ok {
		return x.FeePayment
	}
	return nil
}

type isAction_Type interface {
	isAction_Type()
}

type Action_OpenAccount struct {
	OpenAccount *OpenAccountAction `protobuf:"bytes,2,opt,name=open_account,json=openAccount,proto3,oneof"`
}

type Action_NoPrivacyTransfer struct {
	NoPrivacyTransfer *NoPrivacyTransferAction `protobuf:"bytes,5,opt,name=no_privacy_transfer,json=noPrivacyTransfer,proto3,oneof"`
}

type Action_NoPrivacyWithdraw struct {
	NoPrivacyWithdraw *NoPrivacyWithdrawAction `protobuf:"bytes,6,opt,name=no_privacy_withdraw,json=noPrivacyWithdraw,proto3,oneof"`
}

type Action_FeePayment struct {
	FeePayment *FeePaymentAction `protobuf:"bytes,10,opt,name=fee_payment,json=feePayment,proto3,oneof"`
}

func (*Action_OpenAccount) isAction_Type() {}

func (*Action_NoPrivacyTransfer) isAction_Type() {}

func (*Action_NoPrivacyWithdraw) isAction_Type() {}

func (*Action_FeePayment) isAction_Type() {}

// No client signature required
type OpenAccountAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of account, which will dictate its intended use
	AccountType v1.AccountType `protobuf:"varint,1,opt,name=account_type,json=accountType,proto3,enum=code.common.v1.AccountType" json:"account_type,omitempty"`
	// The owner of the account. For accounts liked to a user's 12 words, this is
	// the verified parent owner account public key. All other account types should
	// set this to the authority value.
	Owner *v1.SolanaAccountId `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	// The index used to for accounts that are derived from owner
	Index uint64 `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	// The public key of the private key that has authority over the opened token account
	Authority *v1.SolanaAccountId `protobuf:"bytes,4,opt,name=authority,proto3" json:"authority,omitempty"`
	// The token account being opened
	Token *v1.SolanaAccountId `protobuf:"bytes,5,opt,name=token,proto3" json:"token,omitempty"`
	// The signature is of serialize(OpenAccountAction) without this field set
	// using the private key of the authority account. This provides a proof
	// of authorization to link authority to owner.
	AuthoritySignature *v1.Signature `protobuf:"bytes,6,opt,name=authority_signature,json=authoritySignature,proto3" json:"authority_signature,omitempty"`
	// The mint that this action will be operating against. For backwards
	// compatibility, if no mint is set, then it is assumed to be the core
	// mint.
	Mint *v1.SolanaAccountId `protobuf:"bytes,7,opt,name=mint,proto3" json:"mint,omitempty"`
}

func (x *OpenAccountAction) Reset() {
	*x = OpenAccountAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenAccountAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenAccountAction) ProtoMessage() {}

func (x *OpenAccountAction) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenAccountAction.ProtoReflect.Descriptor instead.
func (*OpenAccountAction) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{18}
}

func (x *OpenAccountAction) GetAccountType() v1.AccountType {
	if x != nil {
		return x.AccountType
	}
	return v1.AccountType(0)
}

func (x *OpenAccountAction) GetOwner() *v1.SolanaAccountId {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *OpenAccountAction) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *OpenAccountAction) GetAuthority() *v1.SolanaAccountId {
	if x != nil {
		return x.Authority
	}
	return nil
}

func (x *OpenAccountAction) GetToken() *v1.SolanaAccountId {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *OpenAccountAction) GetAuthoritySignature() *v1.Signature {
	if x != nil {
		return x.AuthoritySignature
	}
	return nil
}

func (x *OpenAccountAction) GetMint() *v1.SolanaAccountId {
	if x != nil {
		return x.Mint
	}
	return nil
}

// Compact message signature required
type NoPrivacyTransferAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The public key of the private key that has authority over source
	Authority *v1.SolanaAccountId `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// The source account where funds are transferred from
	Source *v1.SolanaAccountId `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	// The destination account where funds are transferred to
	Destination *v1.SolanaAccountId `protobuf:"bytes,3,opt,name=destination,proto3" json:"destination,omitempty"`
	// The quark amount to transfer
	Amount uint64 `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	// The mint that this action will be operating against. For backwards
	// compatibility, if no mint is set, then it is assumed to be the core
	// mint.
	Mint *v1.SolanaAccountId `protobuf:"bytes,5,opt,name=mint,proto3" json:"mint,omitempty"`
}

func (x *NoPrivacyTransferAction) Reset() {
	*x = NoPrivacyTransferAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoPrivacyTransferAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoPrivacyTransferAction) ProtoMessage() {}

func (x *NoPrivacyTransferAction) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoPrivacyTransferAction.ProtoReflect.Descriptor instead.
func (*NoPrivacyTransferAction) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{19}
}

func (x *NoPrivacyTransferAction) GetAuthority() *v1.SolanaAccountId {
	if x != nil {
		return x.Authority
	}
	return nil
}

func (x *NoPrivacyTransferAction) GetSource() *v1.SolanaAccountId {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *NoPrivacyTransferAction) GetDestination() *v1.SolanaAccountId {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *NoPrivacyTransferAction) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *NoPrivacyTransferAction) GetMint() *v1.SolanaAccountId {
	if x != nil {
		return x.Mint
	}
	return nil
}

// Compact message signature required
type NoPrivacyWithdrawAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The public key of the private key that has authority over source
	Authority *v1.SolanaAccountId `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// The source account where funds are transferred from
	Source *v1.SolanaAccountId `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	// The destination account where funds are transferred to
	Destination *v1.SolanaAccountId `protobuf:"bytes,3,opt,name=destination,proto3" json:"destination,omitempty"`
	// The quark amount to withdraw
	Amount uint64 `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	// Whether the account is closed afterwards. This is always true, since there
	// are no current se cases to leave it open.
	ShouldClose bool `protobuf:"varint,5,opt,name=should_close,json=shouldClose,proto3" json:"should_close,omitempty"`
	// Whether this action is for an auto-return, which client allows server to defer
	// scheduling at its own discretion to return funds back to the owner (to their primary
	// account) that funded source.
	IsAutoReturn bool `protobuf:"varint,6,opt,name=is_auto_return,json=isAutoReturn,proto3" json:"is_auto_return,omitempty"`
	// The mint that this action will be operating against. For backwards
	// compatibility, if no mint is set, then it is assumed to be the core
	// mint.
	Mint *v1.SolanaAccountId `protobuf:"bytes,7,opt,name=mint,proto3" json:"mint,omitempty"`
}

func (x *NoPrivacyWithdrawAction) Reset() {
	*x = NoPrivacyWithdrawAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoPrivacyWithdrawAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoPrivacyWithdrawAction) ProtoMessage() {}

func (x *NoPrivacyWithdrawAction) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoPrivacyWithdrawAction.ProtoReflect.Descriptor instead.
func (*NoPrivacyWithdrawAction) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{20}
}

func (x *NoPrivacyWithdrawAction) GetAuthority() *v1.SolanaAccountId {
	if x != nil {
		return x.Authority
	}
	return nil
}

func (x *NoPrivacyWithdrawAction) GetSource() *v1.SolanaAccountId {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *NoPrivacyWithdrawAction) GetDestination() *v1.SolanaAccountId {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *NoPrivacyWithdrawAction) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *NoPrivacyWithdrawAction) GetShouldClose() bool {
	if x != nil {
		return x.ShouldClose
	}
	return false
}

func (x *NoPrivacyWithdrawAction) GetIsAutoReturn() bool {
	if x != nil {
		return x.IsAutoReturn
	}
	return false
}

func (x *NoPrivacyWithdrawAction) GetMint() *v1.SolanaAccountId {
	if x != nil {
		return x.Mint
	}
	return nil
}

// Compact message signature required
type FeePaymentAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of fee being operated on
	Type FeePaymentAction_FeeType `protobuf:"varint,1,opt,name=type,proto3,enum=code.transaction.v2.FeePaymentAction_FeeType" json:"type,omitempty"`
	// The public key of the private key that has authority over source
	Authority *v1.SolanaAccountId `protobuf:"bytes,2,opt,name=authority,proto3" json:"authority,omitempty"`
	// The source account where funds are transferred from
	Source *v1.SolanaAccountId `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	// The quark amount to transfer
	Amount uint64 `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	// The mint that this action will be operating against. For backwards
	// compatibility, if no mint is set, then it is assumed to be the core
	// mint.
	Mint *v1.SolanaAccountId `protobuf:"bytes,5,opt,name=mint,proto3" json:"mint,omitempty"`
}

func (x *FeePaymentAction) Reset() {
	*x = FeePaymentAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeePaymentAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeePaymentAction) ProtoMessage() {}

func (x *FeePaymentAction) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeePaymentAction.ProtoReflect.Descriptor instead.
func (*FeePaymentAction) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{21}
}

func (x *FeePaymentAction) GetType() FeePaymentAction_FeeType {
	if x != nil {
		return x.Type
	}
	return FeePaymentAction_UNKNOWN
}

func (x *FeePaymentAction) GetAuthority() *v1.SolanaAccountId {
	if x != nil {
		return x.Authority
	}
	return nil
}

func (x *FeePaymentAction) GetSource() *v1.SolanaAccountId {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *FeePaymentAction) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *FeePaymentAction) GetMint() *v1.SolanaAccountId {
	if x != nil {
		return x.Mint
	}
	return nil
}

// ServerParameter are a set of parameters known and returned by server that
// enables clients to complete transaction construction. Any necessary proofs,
// which are required to be locally verifiable, are also provided to ensure
// safe use in the event of a malicious server.
type ServerParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The action the server parameters belong to
	ActionId uint32 `protobuf:"varint,1,opt,name=action_id,json=actionId,proto3" json:"action_id,omitempty"`
	// The set of nonces used for the action. Server will only provide values
	// for transactions requiring client signatures.
	Nonces []*NoncedTransactionMetadata `protobuf:"bytes,2,rep,name=nonces,proto3" json:"nonces,omitempty"`
	// The type of server parameter which maps to the type of action requested
	//
	// Types that are assignable to Type:
	//
	//	*ServerParameter_OpenAccount
	//	*ServerParameter_NoPrivacyTransfer
	//	*ServerParameter_NoPrivacyWithdraw
	//	*ServerParameter_FeePayment
	Type isServerParameter_Type `protobuf_oneof:"type"`
}

func (x *ServerParameter) Reset() {
	*x = ServerParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerParameter) ProtoMessage() {}

func (x *ServerParameter) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerParameter.ProtoReflect.Descriptor instead.
func (*ServerParameter) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{22}
}

func (x *ServerParameter) GetActionId() uint32 {
	if x != nil {
		return x.ActionId
	}
	return 0
}

func (x *ServerParameter) GetNonces() []*NoncedTransactionMetadata {
	if x != nil {
		return x.Nonces
	}
	return nil
}

func (m *ServerParameter) GetType() isServerParameter_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *ServerParameter) GetOpenAccount() *OpenAccountServerParameter {
	if x, ok := x.GetType().(*ServerParameter_OpenAccount); ok {
		return x.OpenAccount
	}
	return nil
}

func (x *ServerParameter) GetNoPrivacyTransfer() *NoPrivacyTransferServerParameter {
	if x, ok := x.GetType().(*ServerParameter_NoPrivacyTransfer); ok {
		return x.NoPrivacyTransfer
	}
	return nil
}

func (x *ServerParameter) GetNoPrivacyWithdraw() *NoPrivacyWithdrawServerParameter {
	if x, ok := x.GetType().(*ServerParameter_NoPrivacyWithdraw); ok {
		return x.NoPrivacyWithdraw
	}
	return nil
}

func (x *ServerParameter) GetFeePayment() *FeePaymentServerParameter {
	if x, ok := x.GetType().(*ServerParameter_FeePayment); ok {
		return x.FeePayment
	}
	return nil
}

type isServerParameter_Type interface {
	isServerParameter_Type()
}

type ServerParameter_OpenAccount struct {
	OpenAccount *OpenAccountServerParameter `protobuf:"bytes,3,opt,name=open_account,json=openAccount,proto3,oneof"`
}

type ServerParameter_NoPrivacyTransfer struct {
	NoPrivacyTransfer *NoPrivacyTransferServerParameter `protobuf:"bytes,6,opt,name=no_privacy_transfer,json=noPrivacyTransfer,proto3,oneof"`
}

type ServerParameter_NoPrivacyWithdraw struct {
	NoPrivacyWithdraw *NoPrivacyWithdrawServerParameter `protobuf:"bytes,7,opt,name=no_privacy_withdraw,json=noPrivacyWithdraw,proto3,oneof"`
}

type ServerParameter_FeePayment struct {
	FeePayment *FeePaymentServerParameter `protobuf:"bytes,11,opt,name=fee_payment,json=feePayment,proto3,oneof"`
}

func (*ServerParameter_OpenAccount) isServerParameter_Type() {}

func (*ServerParameter_NoPrivacyTransfer) isServerParameter_Type() {}

func (*ServerParameter_NoPrivacyWithdraw) isServerParameter_Type() {}

func (*ServerParameter_FeePayment) isServerParameter_Type() {}

// For transactions, the nonce is a standard nonce on Solana
// For virtual instructions, the nonce is a virtual nonce on the Code VM
type NoncedTransactionMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The nonce account to use in the system::AdvanceNonce instruction
	Nonce *v1.SolanaAccountId `protobuf:"bytes,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// The blockhash to set in the transaction or virtual instruction
	Blockhash *v1.Blockhash `protobuf:"bytes,2,opt,name=blockhash,proto3" json:"blockhash,omitempty"`
}

func (x *NoncedTransactionMetadata) Reset() {
	*x = NoncedTransactionMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoncedTransactionMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoncedTransactionMetadata) ProtoMessage() {}

func (x *NoncedTransactionMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoncedTransactionMetadata.ProtoReflect.Descriptor instead.
func (*NoncedTransactionMetadata) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{23}
}

func (x *NoncedTransactionMetadata) GetNonce() *v1.SolanaAccountId {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *NoncedTransactionMetadata) GetBlockhash() *v1.Blockhash {
	if x != nil {
		return x.Blockhash
	}
	return nil
}

type OpenAccountServerParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OpenAccountServerParameter) Reset() {
	*x = OpenAccountServerParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenAccountServerParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenAccountServerParameter) ProtoMessage() {}

func (x *OpenAccountServerParameter) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenAccountServerParameter.ProtoReflect.Descriptor instead.
func (*OpenAccountServerParameter) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{24}
}

type NoPrivacyTransferServerParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NoPrivacyTransferServerParameter) Reset() {
	*x = NoPrivacyTransferServerParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoPrivacyTransferServerParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoPrivacyTransferServerParameter) ProtoMessage() {}

func (x *NoPrivacyTransferServerParameter) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoPrivacyTransferServerParameter.ProtoReflect.Descriptor instead.
func (*NoPrivacyTransferServerParameter) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{25}
}

type NoPrivacyWithdrawServerParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NoPrivacyWithdrawServerParameter) Reset() {
	*x = NoPrivacyWithdrawServerParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoPrivacyWithdrawServerParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoPrivacyWithdrawServerParameter) ProtoMessage() {}

func (x *NoPrivacyWithdrawServerParameter) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoPrivacyWithdrawServerParameter.ProtoReflect.Descriptor instead.
func (*NoPrivacyWithdrawServerParameter) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{26}
}

type FeePaymentServerParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The destination account where OCP fee payments should be sent. This will
	// only be set when the corresponding FeePaymentAction.Type:
	// - CREATE_ON_SEND_WITHDRAWAL
	Destination *v1.SolanaAccountId `protobuf:"bytes,1,opt,name=destination,proto3" json:"destination,omitempty"`
}

func (x *FeePaymentServerParameter) Reset() {
	*x = FeePaymentServerParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeePaymentServerParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeePaymentServerParameter) ProtoMessage() {}

func (x *FeePaymentServerParameter) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeePaymentServerParameter.ProtoReflect.Descriptor instead.
func (*FeePaymentServerParameter) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{27}
}

func (x *FeePaymentServerParameter) GetDestination() *v1.SolanaAccountId {
	if x != nil {
		return x.Destination
	}
	return nil
}

type ErrorDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*ErrorDetails_ReasonString
	//	*ErrorDetails_InvalidSignature
	//	*ErrorDetails_Denied
	Type isErrorDetails_Type `protobuf_oneof:"type"`
}

func (x *ErrorDetails) Reset() {
	*x = ErrorDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorDetails) ProtoMessage() {}

func (x *ErrorDetails) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorDetails.ProtoReflect.Descriptor instead.
func (*ErrorDetails) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{28}
}

func (m *ErrorDetails) GetType() isErrorDetails_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *ErrorDetails) GetReasonString() *ReasonStringErrorDetails {
	if x, ok := x.GetType().(*ErrorDetails_ReasonString); ok {
		return x.ReasonString
	}
	return nil
}

func (x *ErrorDetails) GetInvalidSignature() *InvalidSignatureErrorDetails {
	if x, ok := x.GetType().(*ErrorDetails_InvalidSignature); ok {
		return x.InvalidSignature
	}
	return nil
}

func (x *ErrorDetails) GetDenied() *DeniedErrorDetails {
	if x, ok := x.GetType().(*ErrorDetails_Denied); ok {
		return x.Denied
	}
	return nil
}

type isErrorDetails_Type interface {
	isErrorDetails_Type()
}

type ErrorDetails_ReasonString struct {
	ReasonString *ReasonStringErrorDetails `protobuf:"bytes,1,opt,name=reason_string,json=reasonString,proto3,oneof"`
}

type ErrorDetails_InvalidSignature struct {
	InvalidSignature *InvalidSignatureErrorDetails `protobuf:"bytes,2,opt,name=invalid_signature,json=invalidSignature,proto3,oneof"`
}

type ErrorDetails_Denied struct {
	Denied *DeniedErrorDetails `protobuf:"bytes,3,opt,name=denied,proto3,oneof"`
}

func (*ErrorDetails_ReasonString) isErrorDetails_Type() {}

func (*ErrorDetails_InvalidSignature) isErrorDetails_Type() {}

func (*ErrorDetails_Denied) isErrorDetails_Type() {}

type ReasonStringErrorDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Human readable string indicating the failure.
	Reason string `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *ReasonStringErrorDetails) Reset() {
	*x = ReasonStringErrorDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReasonStringErrorDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReasonStringErrorDetails) ProtoMessage() {}

func (x *ReasonStringErrorDetails) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReasonStringErrorDetails.ProtoReflect.Descriptor instead.
func (*ReasonStringErrorDetails) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{29}
}

func (x *ReasonStringErrorDetails) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type InvalidSignatureErrorDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The action whose signature mismatched
	ActionId uint32 `protobuf:"varint,1,opt,name=action_id,json=actionId,proto3" json:"action_id,omitempty"`
	// Types that are assignable to ExpectedBlob:
	//
	//	*InvalidSignatureErrorDetails_ExpectedTransaction
	//	*InvalidSignatureErrorDetails_ExpectedVixnHash
	ExpectedBlob isInvalidSignatureErrorDetails_ExpectedBlob `protobuf_oneof:"expected_blob"`
	// The signature that was provided by the client.
	ProvidedSignature *v1.Signature `protobuf:"bytes,3,opt,name=provided_signature,json=providedSignature,proto3" json:"provided_signature,omitempty"`
}

func (x *InvalidSignatureErrorDetails) Reset() {
	*x = InvalidSignatureErrorDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvalidSignatureErrorDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvalidSignatureErrorDetails) ProtoMessage() {}

func (x *InvalidSignatureErrorDetails) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvalidSignatureErrorDetails.ProtoReflect.Descriptor instead.
func (*InvalidSignatureErrorDetails) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{30}
}

func (x *InvalidSignatureErrorDetails) GetActionId() uint32 {
	if x != nil {
		return x.ActionId
	}
	return 0
}

func (m *InvalidSignatureErrorDetails) GetExpectedBlob() isInvalidSignatureErrorDetails_ExpectedBlob {
	if m != nil {
		return m.ExpectedBlob
	}
	return nil
}

func (x *InvalidSignatureErrorDetails) GetExpectedTransaction() *v1.Transaction {
	if x, ok := x.GetExpectedBlob().(*InvalidSignatureErrorDetails_ExpectedTransaction); ok {
		return x.ExpectedTransaction
	}
	return nil
}

func (x *InvalidSignatureErrorDetails) GetExpectedVixnHash() *v1.Hash {
	if x, ok := x.GetExpectedBlob().(*InvalidSignatureErrorDetails_ExpectedVixnHash); ok {
		return x.ExpectedVixnHash
	}
	return nil
}

func (x *InvalidSignatureErrorDetails) GetProvidedSignature() *v1.Signature {
	if x != nil {
		return x.ProvidedSignature
	}
	return nil
}

type isInvalidSignatureErrorDetails_ExpectedBlob interface {
	isInvalidSignatureErrorDetails_ExpectedBlob()
}

type InvalidSignatureErrorDetails_ExpectedTransaction struct {
	// The transaction the server expected to have signed.
	ExpectedTransaction *v1.Transaction `protobuf:"bytes,2,opt,name=expected_transaction,json=expectedTransaction,proto3,oneof"`
}

type InvalidSignatureErrorDetails_ExpectedVixnHash struct {
	// The virtual ixn hash the server expected to have signed.
	ExpectedVixnHash *v1.Hash `protobuf:"bytes,4,opt,name=expected_vixn_hash,json=expectedVixnHash,proto3,oneof"`
}

func (*InvalidSignatureErrorDetails_ExpectedTransaction) isInvalidSignatureErrorDetails_ExpectedBlob() {
}

func (*InvalidSignatureErrorDetails_ExpectedVixnHash) isInvalidSignatureErrorDetails_ExpectedBlob() {}

type DeniedErrorDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code DeniedErrorDetails_Code `protobuf:"varint,1,opt,name=code,proto3,enum=code.transaction.v2.DeniedErrorDetails_Code" json:"code,omitempty"`
	// Human readable string indicating the failure.
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *DeniedErrorDetails) Reset() {
	*x = DeniedErrorDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeniedErrorDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeniedErrorDetails) ProtoMessage() {}

func (x *DeniedErrorDetails) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeniedErrorDetails.ProtoReflect.Descriptor instead.
func (*DeniedErrorDetails) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{31}
}

func (x *DeniedErrorDetails) GetCode() DeniedErrorDetails_Code {
	if x != nil {
		return x.Code
	}
	return DeniedErrorDetails_UNSPECIFIED
}

func (x *DeniedErrorDetails) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// ExchangeData defines an amount of crypto with currency exchange data
type ExchangeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ISO 4217 alpha-3 currency code.
	Currency string `protobuf:"bytes,1,opt,name=currency,proto3" json:"currency,omitempty"`
	// The agreed upon exchange rate. This might not be the same as the
	// actual exchange rate at the time of intent or fund transfer.
	ExchangeRate float64 `protobuf:"fixed64,2,opt,name=exchange_rate,json=exchangeRate,proto3" json:"exchange_rate,omitempty"`
	// The agreed upon transfer amount in the currency the payment was made
	// in.
	NativeAmount float64 `protobuf:"fixed64,3,opt,name=native_amount,json=nativeAmount,proto3" json:"native_amount,omitempty"`
	// The exact amount of quarks to send. This will be used as the source of
	// truth for validating transaction transfer amounts.
	Quarks uint64 `protobuf:"varint,4,opt,name=quarks,proto3" json:"quarks,omitempty"`
	// The crypto mint that is being operated against for the exchange.
	// For backwards compatibility, if no mint is set, then it is assumed
	// to be the core mint.
	Mint *v1.SolanaAccountId `protobuf:"bytes,5,opt,name=mint,proto3" json:"mint,omitempty"`
}

func (x *ExchangeData) Reset() {
	*x = ExchangeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeData) ProtoMessage() {}

func (x *ExchangeData) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeData.ProtoReflect.Descriptor instead.
func (*ExchangeData) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{32}
}

func (x *ExchangeData) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *ExchangeData) GetExchangeRate() float64 {
	if x != nil {
		return x.ExchangeRate
	}
	return 0
}

func (x *ExchangeData) GetNativeAmount() float64 {
	if x != nil {
		return x.NativeAmount
	}
	return 0
}

func (x *ExchangeData) GetQuarks() uint64 {
	if x != nil {
		return x.Quarks
	}
	return 0
}

func (x *ExchangeData) GetMint() *v1.SolanaAccountId {
	if x != nil {
		return x.Mint
	}
	return nil
}

type ExchangeDataWithoutRate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ISO 4217 alpha-3 currency code.
	Currency string `protobuf:"bytes,1,opt,name=currency,proto3" json:"currency,omitempty"`
	// The agreed upon transfer amount in the currency the payment was made
	// in.
	NativeAmount float64 `protobuf:"fixed64,2,opt,name=native_amount,json=nativeAmount,proto3" json:"native_amount,omitempty"`
}

func (x *ExchangeDataWithoutRate) Reset() {
	*x = ExchangeDataWithoutRate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeDataWithoutRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeDataWithoutRate) ProtoMessage() {}

func (x *ExchangeDataWithoutRate) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeDataWithoutRate.ProtoReflect.Descriptor instead.
func (*ExchangeDataWithoutRate) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{33}
}

func (x *ExchangeDataWithoutRate) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *ExchangeDataWithoutRate) GetNativeAmount() float64 {
	if x != nil {
		return x.NativeAmount
	}
	return 0
}

type SendLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Remaining limit to apply on the next transaction
	NextTransaction float32 `protobuf:"fixed32,1,opt,name=next_transaction,json=nextTransaction,proto3" json:"next_transaction,omitempty"`
	// Maximum allowed on a per-transaction basis
	MaxPerTransaction float32 `protobuf:"fixed32,2,opt,name=max_per_transaction,json=maxPerTransaction,proto3" json:"max_per_transaction,omitempty"`
	// Maximum allowed on a per-day basis
	MaxPerDay float32 `protobuf:"fixed32,3,opt,name=max_per_day,json=maxPerDay,proto3" json:"max_per_day,omitempty"`
}

func (x *SendLimit) Reset() {
	*x = SendLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendLimit) ProtoMessage() {}

func (x *SendLimit) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendLimit.ProtoReflect.Descriptor instead.
func (*SendLimit) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{34}
}

func (x *SendLimit) GetNextTransaction() float32 {
	if x != nil {
		return x.NextTransaction
	}
	return 0
}

func (x *SendLimit) GetMaxPerTransaction() float32 {
	if x != nil {
		return x.MaxPerTransaction
	}
	return 0
}

func (x *SendLimit) GetMaxPerDay() float32 {
	if x != nil {
		return x.MaxPerDay
	}
	return 0
}

type SubmitIntentRequest_SubmitActions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The globally unique client generated intent ID. Use the original intent
	// ID when operating on actions that mutate the intent.
	Id *v1.IntentId `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The verified owner account public key
	Owner *v1.SolanaAccountId `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	// Additional metadata that describes the high-level intention
	Metadata *Metadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// The set of all ordered actions required to fulfill the intent
	Actions []*Action `protobuf:"bytes,4,rep,name=actions,proto3" json:"actions,omitempty"`
	// The signature is of serialize(SubmitActions) without this field set using the
	// private key of the owner account. This provides an authentication mechanism
	// to the RPC.
	Signature *v1.Signature `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *SubmitIntentRequest_SubmitActions) Reset() {
	*x = SubmitIntentRequest_SubmitActions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitIntentRequest_SubmitActions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitIntentRequest_SubmitActions) ProtoMessage() {}

func (x *SubmitIntentRequest_SubmitActions) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitIntentRequest_SubmitActions.ProtoReflect.Descriptor instead.
func (*SubmitIntentRequest_SubmitActions) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{0, 0}
}

func (x *SubmitIntentRequest_SubmitActions) GetId() *v1.IntentId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SubmitIntentRequest_SubmitActions) GetOwner() *v1.SolanaAccountId {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *SubmitIntentRequest_SubmitActions) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *SubmitIntentRequest_SubmitActions) GetActions() []*Action {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *SubmitIntentRequest_SubmitActions) GetSignature() *v1.Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type SubmitIntentRequest_SubmitSignatures struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The set of all signatures for each transaction or virtual instruction requiring
	// signature from the authority accounts.
	//
	// The signature for a transaction is for the marshalled transaction.
	// The signature for a virtual instruction is the hash of the marshalled instruction.
	Signatures []*v1.Signature `protobuf:"bytes,1,rep,name=signatures,proto3" json:"signatures,omitempty"`
}

func (x *SubmitIntentRequest_SubmitSignatures) Reset() {
	*x = SubmitIntentRequest_SubmitSignatures{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitIntentRequest_SubmitSignatures) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitIntentRequest_SubmitSignatures) ProtoMessage() {}

func (x *SubmitIntentRequest_SubmitSignatures) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitIntentRequest_SubmitSignatures.ProtoReflect.Descriptor instead.
func (*SubmitIntentRequest_SubmitSignatures) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{0, 1}
}

func (x *SubmitIntentRequest_SubmitSignatures) GetSignatures() []*v1.Signature {
	if x != nil {
		return x.Signatures
	}
	return nil
}

type SubmitIntentResponse_ServerParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The set of all server paremeters required to fill missing transaction
	// or virtual instruction details. Server guarantees to provide a message
	// for each client action in an order consistent with the received action
	// list.
	ServerParameters []*ServerParameter `protobuf:"bytes,1,rep,name=server_parameters,json=serverParameters,proto3" json:"server_parameters,omitempty"`
}

func (x *SubmitIntentResponse_ServerParameters) Reset() {
	*x = SubmitIntentResponse_ServerParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitIntentResponse_ServerParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitIntentResponse_ServerParameters) ProtoMessage() {}

func (x *SubmitIntentResponse_ServerParameters) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitIntentResponse_ServerParameters.ProtoReflect.Descriptor instead.
func (*SubmitIntentResponse_ServerParameters) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{1, 0}
}

func (x *SubmitIntentResponse_ServerParameters) GetServerParameters() []*ServerParameter {
	if x != nil {
		return x.ServerParameters
	}
	return nil
}

type SubmitIntentResponse_Success struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code SubmitIntentResponse_Success_Code `protobuf:"varint,1,opt,name=code,proto3,enum=code.transaction.v2.SubmitIntentResponse_Success_Code" json:"code,omitempty"`
}

func (x *SubmitIntentResponse_Success) Reset() {
	*x = SubmitIntentResponse_Success{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitIntentResponse_Success) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitIntentResponse_Success) ProtoMessage() {}

func (x *SubmitIntentResponse_Success) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitIntentResponse_Success.ProtoReflect.Descriptor instead.
func (*SubmitIntentResponse_Success) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{1, 1}
}

func (x *SubmitIntentResponse_Success) GetCode() SubmitIntentResponse_Success_Code {
	if x != nil {
		return x.Code
	}
	return SubmitIntentResponse_Success_OK
}

type SubmitIntentResponse_Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code         SubmitIntentResponse_Error_Code `protobuf:"varint,1,opt,name=code,proto3,enum=code.transaction.v2.SubmitIntentResponse_Error_Code" json:"code,omitempty"`
	ErrorDetails []*ErrorDetails                 `protobuf:"bytes,2,rep,name=error_details,json=errorDetails,proto3" json:"error_details,omitempty"`
}

func (x *SubmitIntentResponse_Error) Reset() {
	*x = SubmitIntentResponse_Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitIntentResponse_Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitIntentResponse_Error) ProtoMessage() {}

func (x *SubmitIntentResponse_Error) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitIntentResponse_Error.ProtoReflect.Descriptor instead.
func (*SubmitIntentResponse_Error) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{1, 2}
}

func (x *SubmitIntentResponse_Error) GetCode() SubmitIntentResponse_Error_Code {
	if x != nil {
		return x.Code
	}
	return SubmitIntentResponse_Error_DENIED
}

func (x *SubmitIntentResponse_Error) GetErrorDetails() []*ErrorDetails {
	if x != nil {
		return x.ErrorDetails
	}
	return nil
}

type PublicDistributionMetadata_Distribution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Destination where a portion of the pool's funds will be distributed.
	// This must always be a primary account.
	Destination *v1.SolanaAccountId `protobuf:"bytes,1,opt,name=destination,proto3" json:"destination,omitempty"`
	// The amount of funds to distribute to the destination
	Quarks uint64 `protobuf:"varint,2,opt,name=quarks,proto3" json:"quarks,omitempty"`
}

func (x *PublicDistributionMetadata_Distribution) Reset() {
	*x = PublicDistributionMetadata_Distribution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicDistributionMetadata_Distribution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicDistributionMetadata_Distribution) ProtoMessage() {}

func (x *PublicDistributionMetadata_Distribution) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicDistributionMetadata_Distribution.ProtoReflect.Descriptor instead.
func (*PublicDistributionMetadata_Distribution) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{16, 0}
}

func (x *PublicDistributionMetadata_Distribution) GetDestination() *v1.SolanaAccountId {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *PublicDistributionMetadata_Distribution) GetQuarks() uint64 {
	if x != nil {
		return x.Quarks
	}
	return 0
}

var File_transaction_v2_transaction_service_proto protoreflect.FileDescriptor

var file_transaction_v2_transaction_service_proto_rawDesc = []byte{
	0x0a, 0x28, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x32,
	0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x1a,
	0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xb3, 0x05, 0x0a, 0x13, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5f, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x68, 0x0a, 0x11, 0x73, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x48,
	0x00, 0x52, 0x10, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x1a, 0xe0, 0x02, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0,
	0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x05, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61,
	0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0,
	0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x45,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42,
	0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x0d, 0xba, 0xe9, 0xc0, 0x03, 0x08, 0x92, 0x01, 0x05, 0x08, 0x01, 0x10,
	0x80, 0x08, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x43, 0x0a, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05,
	0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x1a, 0x5c, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x0a, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x0d, 0xba, 0xe9, 0xc0, 0x03, 0x08,
	0x92, 0x01, 0x05, 0x08, 0x01, 0x10, 0x80, 0x08, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x42, 0x10, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x05, 0xb8, 0xe9, 0xc0, 0x03, 0x01, 0x22, 0xf3, 0x05, 0x0a, 0x14, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x69, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32,
	0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x10, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x4d, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x32, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x00,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x47, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x1a, 0x74, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x60, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x42, 0x0d, 0xba, 0xe9, 0xc0, 0x03, 0x08, 0x92, 0x01,
	0x05, 0x08, 0x01, 0x10, 0x80, 0x08, 0x52, 0x10, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x65, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x4a, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x49, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0x0e, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x1a,
	0xe7, 0x01, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x48, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x46, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0c, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x4c, 0x0a, 0x04, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x4e,
	0x54, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x41, 0x4c,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x03, 0x42, 0x11, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x05, 0xb8, 0xe9, 0xc0, 0x03, 0x01, 0x22, 0xd9, 0x01, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x09, 0x69, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02,
	0x10, 0x01, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x05,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c,
	0x61, 0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xc6, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x39, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x1f, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b,
	0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10,
	0x01, 0x22, 0xe9, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02,
	0x10, 0x01, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01,
	0x02, 0x10, 0x01, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x4d,
	0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0xb2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x0d,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x22, 0x99, 0x03,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x77, 0x0a, 0x17, 0x73, 0x65,
	0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x32, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x42, 0x79,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x73,
	0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x42, 0x79, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x37, 0x0a, 0x0e, 0x75, 0x73, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x42, 0x10, 0xba, 0xe9, 0xc0,
	0x03, 0x0b, 0x12, 0x09, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x0d, 0x75,
	0x73, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x65, 0x64, 0x1a, 0x67, 0x0a, 0x19,
	0x53, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x42, 0x79, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32,
	0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x10, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04, 0x08,
	0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x22, 0x99, 0x01, 0x0a, 0x1b, 0x43, 0x61,
	0x6e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x54, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x07, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61,
	0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0,
	0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x33, 0x0a, 0x04, 0x6d, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x52,
	0x04, 0x6d, 0x69, 0x6e, 0x74, 0x22, 0x87, 0x03, 0x0a, 0x1c, 0x43, 0x61, 0x6e, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x54, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x69, 0x73,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x60, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x32, 0x2e, 0x43, 0x61, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x54,
	0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x17, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x73, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x0a, 0x66, 0x65, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74,
	0x52, 0x61, 0x74, 0x65, 0x52, 0x09, 0x66, 0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x3e, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b,
	0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0x01, 0x12, 0x10, 0x0a,
	0x0c, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0x02, 0x22,
	0xeb, 0x01, 0x0a, 0x0e, 0x41, 0x69, 0x72, 0x64, 0x72, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x51, 0x0a, 0x0c, 0x61, 0x69, 0x72, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x41,
	0x69, 0x72, 0x64, 0x72, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0c, 0xba, 0xe9, 0xc0, 0x03,
	0x07, 0x82, 0x01, 0x04, 0x20, 0x00, 0x20, 0x01, 0x52, 0x0b, 0x61, 0x69, 0x72, 0x64, 0x72, 0x6f,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10,
	0x01, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02,
	0x10, 0x01, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xd6, 0x01,
	0x0a, 0x0f, 0x41, 0x69, 0x72, 0x64, 0x72, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x43, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x69, 0x72, 0x64, 0x72, 0x6f, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x46, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x32, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x36,
	0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00,
	0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x01, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x43, 0x4c, 0x41,
	0x49, 0x4d, 0x45, 0x44, 0x10, 0x02, 0x22, 0xf2, 0x01, 0x0a, 0x13, 0x56, 0x6f, 0x69, 0x64, 0x47,
	0x69, 0x66, 0x74, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41,
	0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x0a,
	0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x12, 0x53, 0x0a, 0x0f, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x76,
	0x61, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61,
	0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0,
	0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0d, 0x67, 0x69, 0x66, 0x74, 0x43, 0x61, 0x72,
	0x64, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x43, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xa8, 0x01, 0x0a, 0x14,
	0x56, 0x6f, 0x69, 0x64, 0x47, 0x69, 0x66, 0x74, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x47,
	0x69, 0x66, 0x74, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x46,
	0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15,
	0x43, 0x4c, 0x41, 0x49, 0x4d, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46,
	0x4f, 0x55, 0x4e, 0x44, 0x10, 0x03, 0x22, 0xc3, 0x03, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x50, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32,
	0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x60, 0x0a, 0x13, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x48, 0x00, 0x52, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x72, 0x0a, 0x19, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x6c, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32,
	0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x6c, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x48, 0x00, 0x52, 0x17, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x6c, 0x79, 0x12, 0x62, 0x0a, 0x13, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x12, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x0d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x05, 0xb8, 0xe9, 0xc0, 0x03, 0x01, 0x4a, 0x04,
	0x08, 0x02, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05,
	0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x4a, 0x04, 0x08, 0x08, 0x10, 0x09, 0x22, 0xd0, 0x01, 0x0a,
	0x14, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x61, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32,
	0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x74,
	0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x12, 0x33, 0x0a, 0x04, 0x6d, 0x69, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x04, 0x6d, 0x69, 0x6e, 0x74, 0x22, 0x20, 0x0a,
	0x0a, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x12, 0x08, 0x0a, 0x04, 0x55,
	0x53, 0x45, 0x52, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x4f, 0x4f, 0x4c, 0x10, 0x01, 0x22,
	0xd1, 0x03, 0x0a, 0x19, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x43, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x0a,
	0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x4d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x4c, 0x0a, 0x11, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f,
	0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x10, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12,
	0x52, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05,
	0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x69, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x33,
	0x0a, 0x04, 0x6d, 0x69, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f,
	0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x04, 0x6d,
	0x69, 0x6e, 0x74, 0x22, 0xbd, 0x02, 0x0a, 0x1f, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x6c, 0x79, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x06,
	0x71, 0x75, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x09, 0xba, 0xe9,
	0xc0, 0x03, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x06, 0x71, 0x75, 0x61, 0x72, 0x6b, 0x73, 0x12,
	0x2f, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x6e,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x09, 0xba, 0xe9, 0xc0, 0x03, 0x04, 0x6a, 0x02,
	0x08, 0x01, 0x52, 0x0c, 0x69, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x6e, 0x64,
	0x12, 0x46, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x33, 0x0a, 0x04, 0x6d, 0x69, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x04, 0x6d, 0x69, 0x6e, 0x74, 0x4a, 0x04, 0x08,
	0x04, 0x10, 0x05, 0x22, 0x89, 0x03, 0x0a, 0x1a, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x44, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x43, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x6e, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x44, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0xba, 0xe9,
	0xc0, 0x03, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x33, 0x0a, 0x04, 0x6d, 0x69, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x04, 0x6d, 0x69, 0x6e, 0x74, 0x1a, 0x80, 0x01, 0x0a,
	0x0c, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x06,
	0x71, 0x75, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x09, 0xba, 0xe9,
	0xc0, 0x03, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x06, 0x71, 0x75, 0x61, 0x72, 0x6b, 0x73, 0x22,
	0x9c, 0x03, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4b, 0x0a, 0x0c, 0x6f, 0x70,
	0x65, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x6e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5e, 0x0a, 0x13, 0x6e, 0x6f, 0x5f, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x63, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x4e, 0x6f, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x63, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x11, 0x6e, 0x6f, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x5e, 0x0a, 0x13, 0x6e, 0x6f, 0x5f, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x63, 0x79, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x4e, 0x6f, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x63, 0x79, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x11, 0x6e, 0x6f, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x48, 0x0a, 0x0b, 0x66, 0x65, 0x65, 0x5f, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x32, 0x2e, 0x46, 0x65, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x65, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x42, 0x0d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x05, 0xb8, 0xe9, 0xc0, 0x03, 0x01,
	0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x07,
	0x10, 0x08, 0x4a, 0x04, 0x08, 0x08, 0x10, 0x09, 0x4a, 0x04, 0x08, 0x09, 0x10, 0x0a, 0x22, 0xd3,
	0x03, 0x0a, 0x11, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x82, 0x01,
	0x02, 0x20, 0x00, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x41, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x49, 0x0a, 0x09, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f,
	0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x0a, 0xba,
	0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x41, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x56, 0x0a, 0x13, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42,
	0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x12, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x33, 0x0a, 0x04, 0x6d, 0x69, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x04,
	0x6d, 0x69, 0x6e, 0x74, 0x22, 0xd0, 0x02, 0x0a, 0x17, 0x4e, 0x6f, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x63, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x49, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x43, 0x0a, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c,
	0x61, 0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9,
	0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x4d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02,
	0x10, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x21, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x09, 0xba, 0xe9, 0xc0, 0x03, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x33, 0x0a, 0x04, 0x6d, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x52, 0x04, 0x6d, 0x69, 0x6e, 0x74, 0x22, 0xa4, 0x03, 0x0a, 0x17, 0x4e, 0x6f, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x63, 0x79, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01,
	0x02, 0x10, 0x01, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x43,
	0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42,
	0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x4d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05,
	0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x09, 0xba, 0xe9, 0xc0, 0x03, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x09, 0xba, 0xe9, 0xc0,
	0x03, 0x04, 0x6a, 0x02, 0x08, 0x01, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x41,
	0x75, 0x74, 0x6f, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x33, 0x0a, 0x04, 0x6d, 0x69, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x04, 0x6d, 0x69, 0x6e, 0x74, 0x22, 0x80,
	0x03, 0x0a, 0x10, 0x46, 0x65, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x65, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x65, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x82, 0x01, 0x02, 0x20, 0x00, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x49, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02,
	0x10, 0x01, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x43, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x0a,
	0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x21, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x09, 0xba, 0xe9, 0xc0, 0x03, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x04, 0x6d, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x52, 0x04, 0x6d, 0x69, 0x6e, 0x74, 0x22, 0x35, 0x0a, 0x07, 0x46, 0x65,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x4e, 0x5f,
	0x53, 0x45, 0x4e, 0x44, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x41, 0x4c, 0x10,
	0x01, 0x22, 0xaa, 0x04, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x52, 0x0a, 0x06, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x64, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x92, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x54, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x32, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52,
	0x0b, 0x6f, 0x70, 0x65, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x67, 0x0a, 0x13,
	0x6e, 0x6f, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e,
	0x4e, 0x6f, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x48, 0x00, 0x52, 0x11, 0x6e, 0x6f, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x67, 0x0a, 0x13, 0x6e, 0x6f, 0x5f, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x63, 0x79, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x4e, 0x6f, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x63, 0x79, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x11, 0x6e, 0x6f, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x51,
	0x0a, 0x0b, 0x66, 0x65, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x65, 0x65, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x65, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x42, 0x0d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x05, 0xb8, 0xe9, 0xc0, 0x03, 0x01,
	0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x4a, 0x04, 0x08, 0x08,
	0x10, 0x09, 0x4a, 0x04, 0x08, 0x09, 0x10, 0x0a, 0x4a, 0x04, 0x08, 0x0a, 0x10, 0x0b, 0x22, 0xa3,
	0x01, 0x0a, 0x19, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x41, 0x0a, 0x05,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c,
	0x61, 0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9,
	0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12,
	0x43, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x68, 0x61, 0x73, 0x68, 0x42, 0x0a, 0xba,
	0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x68, 0x61, 0x73, 0x68, 0x22, 0x1c, 0x0a, 0x1a, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x22, 0x22, 0x0a, 0x20, 0x4e, 0x6f, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x22, 0x22, 0x0a, 0x20, 0x4e, 0x6f, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x63, 0x79, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x22, 0x6a, 0x0a, 0x19, 0x46, 0x65,
	0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f,
	0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x0a, 0xba,
	0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x98, 0x02, 0x0a, 0x0c, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x54, 0x0a, 0x0d, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x48, 0x00, 0x52,
	0x0c, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x60, 0x0a,
	0x11, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x10, 0x69,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x41, 0x0a, 0x06, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x06, 0x64, 0x65, 0x6e, 0x69,
	0x65, 0x64, 0x42, 0x0d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x05, 0xb8, 0xe9, 0xc0, 0x03,
	0x01, 0x22, 0x40, 0x0a, 0x18, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x24, 0x0a,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xba,
	0xe9, 0xc0, 0x03, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0x80, 0x10, 0x52, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x22, 0xc1, 0x02, 0x0a, 0x1c, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x50, 0x0a, 0x14, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x13,
	0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x12, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f,
	0x76, 0x69, 0x78, 0x6e, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x48, 0x61, 0x73, 0x68, 0x48, 0x00, 0x52, 0x10, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x56, 0x69, 0x78, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x54, 0x0a, 0x12, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x11, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42,
	0x16, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x62,
	0x12, 0x05, 0xb8, 0xe9, 0xc0, 0x03, 0x01, 0x22, 0x95, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x6e, 0x69,
	0x65, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x40,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x32, 0x2e, 0x44, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x24, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0c, 0xba, 0xe9, 0xc0, 0x03, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0x80, 0x10, 0x52, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x17, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0f,
	0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x22,
	0x87, 0x02, 0x0a, 0x0c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x31, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x15, 0xba, 0xe9, 0xc0, 0x03, 0x10, 0x72, 0x0e, 0x32, 0x0c, 0x5e, 0x5b, 0x61,
	0x2d, 0x7a, 0x5d, 0x7b, 0x33, 0x2c, 0x34, 0x7d, 0x24, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x35, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x42, 0x10, 0xba, 0xe9, 0xc0, 0x03,
	0x0b, 0x12, 0x09, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x0c, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x0d, 0x6e, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x42, 0x10, 0xba, 0xe9, 0xc0, 0x03, 0x0b, 0x12, 0x09, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x52, 0x0c, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x21, 0x0a, 0x06, 0x71, 0x75, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x09, 0xba, 0xe9, 0xc0, 0x03, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x06, 0x71, 0x75,
	0x61, 0x72, 0x6b, 0x73, 0x12, 0x33, 0x0a, 0x04, 0x6d, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x52, 0x04, 0x6d, 0x69, 0x6e, 0x74, 0x22, 0x83, 0x01, 0x0a, 0x17, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75,
	0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xba, 0xe9, 0xc0, 0x03, 0x10, 0x72, 0x0e,
	0x32, 0x0c, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x7b, 0x33, 0x2c, 0x34, 0x7d, 0x24, 0x52, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x35, 0x0a, 0x0d, 0x6e, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x42,
	0x10, 0xba, 0xe9, 0xc0, 0x03, 0x0b, 0x12, 0x09, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x52, 0x0c, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x86, 0x01, 0x0a, 0x09, 0x53, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x29, 0x0a,
	0x10, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f,
	0x70, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x50, 0x65, 0x72, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f,
	0x70, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6d,
	0x61, 0x78, 0x50, 0x65, 0x72, 0x44, 0x61, 0x79, 0x2a, 0x43, 0x0a, 0x0b, 0x41, 0x69, 0x72, 0x64,
	0x72, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x4e, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x42, 0x4f, 0x4e, 0x55, 0x53, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x57, 0x45,
	0x4c, 0x43, 0x4f, 0x4d, 0x45, 0x5f, 0x42, 0x4f, 0x4e, 0x55, 0x53, 0x10, 0x02, 0x32, 0xfe, 0x04,
	0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x67, 0x0a,
	0x0c, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x32, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x72, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2d, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x32, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32,
	0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x09, 0x47, 0x65,
	0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x25, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65,
	0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7b, 0x0a, 0x14, 0x43, 0x61, 0x6e, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x54, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x61, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x54, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x31, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x61, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x54, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x07, 0x41, 0x69, 0x72, 0x64, 0x72, 0x6f, 0x70, 0x12, 0x23,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x69, 0x72, 0x64, 0x72, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x69, 0x72, 0x64, 0x72, 0x6f,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x0c, 0x56, 0x6f, 0x69,
	0x64, 0x47, 0x69, 0x66, 0x74, 0x43, 0x61, 0x72, 0x64, 0x12, 0x28, 0x2e, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e,
	0x56, 0x6f, 0x69, 0x64, 0x47, 0x69, 0x66, 0x74, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x47, 0x69,
	0x66, 0x74, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x87,
	0x01, 0x0a, 0x1e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x69, 0x6e, 0x63, 0x2e, 0x67,
	0x65, 0x6e, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x32, 0x5a, 0x52, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f,
	0x64, 0x65, 0x2d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x64, 0x65,
	0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x32, 0x3b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0xa2, 0x02, 0x10, 0x41, 0x50, 0x42, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_transaction_v2_transaction_service_proto_rawDescOnce sync.Once
	file_transaction_v2_transaction_service_proto_rawDescData = file_transaction_v2_transaction_service_proto_rawDesc
)

func file_transaction_v2_transaction_service_proto_rawDescGZIP() []byte {
	file_transaction_v2_transaction_service_proto_rawDescOnce.Do(func() {
		file_transaction_v2_transaction_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_transaction_v2_transaction_service_proto_rawDescData)
	})
	return file_transaction_v2_transaction_service_proto_rawDescData
}

var file_transaction_v2_transaction_service_proto_enumTypes = make([]protoimpl.EnumInfo, 11)
var file_transaction_v2_transaction_service_proto_msgTypes = make([]protoimpl.MessageInfo, 42)
var file_transaction_v2_transaction_service_proto_goTypes = []interface{}{
	(AirdropType)(0),                                // 0: code.transaction.v2.AirdropType
	(SubmitIntentResponse_Success_Code)(0),          // 1: code.transaction.v2.SubmitIntentResponse.Success.Code
	(SubmitIntentResponse_Error_Code)(0),            // 2: code.transaction.v2.SubmitIntentResponse.Error.Code
	(GetIntentMetadataResponse_Result)(0),           // 3: code.transaction.v2.GetIntentMetadataResponse.Result
	(GetLimitsResponse_Result)(0),                   // 4: code.transaction.v2.GetLimitsResponse.Result
	(CanWithdrawToAccountResponse_AccountType)(0),   // 5: code.transaction.v2.CanWithdrawToAccountResponse.AccountType
	(AirdropResponse_Result)(0),                     // 6: code.transaction.v2.AirdropResponse.Result
	(VoidGiftCardResponse_Result)(0),                // 7: code.transaction.v2.VoidGiftCardResponse.Result
	(OpenAccountsMetadata_AccountSet)(0),            // 8: code.transaction.v2.OpenAccountsMetadata.AccountSet
	(FeePaymentAction_FeeType)(0),                   // 9: code.transaction.v2.FeePaymentAction.FeeType
	(DeniedErrorDetails_Code)(0),                    // 10: code.transaction.v2.DeniedErrorDetails.Code
	(*SubmitIntentRequest)(nil),                     // 11: code.transaction.v2.SubmitIntentRequest
	(*SubmitIntentResponse)(nil),                    // 12: code.transaction.v2.SubmitIntentResponse
	(*GetIntentMetadataRequest)(nil),                // 13: code.transaction.v2.GetIntentMetadataRequest
	(*GetIntentMetadataResponse)(nil),               // 14: code.transaction.v2.GetIntentMetadataResponse
	(*GetLimitsRequest)(nil),                        // 15: code.transaction.v2.GetLimitsRequest
	(*GetLimitsResponse)(nil),                       // 16: code.transaction.v2.GetLimitsResponse
	(*CanWithdrawToAccountRequest)(nil),             // 17: code.transaction.v2.CanWithdrawToAccountRequest
	(*CanWithdrawToAccountResponse)(nil),            // 18: code.transaction.v2.CanWithdrawToAccountResponse
	(*AirdropRequest)(nil),                          // 19: code.transaction.v2.AirdropRequest
	(*AirdropResponse)(nil),                         // 20: code.transaction.v2.AirdropResponse
	(*VoidGiftCardRequest)(nil),                     // 21: code.transaction.v2.VoidGiftCardRequest
	(*VoidGiftCardResponse)(nil),                    // 22: code.transaction.v2.VoidGiftCardResponse
	(*Metadata)(nil),                                // 23: code.transaction.v2.Metadata
	(*OpenAccountsMetadata)(nil),                    // 24: code.transaction.v2.OpenAccountsMetadata
	(*SendPublicPaymentMetadata)(nil),               // 25: code.transaction.v2.SendPublicPaymentMetadata
	(*ReceivePaymentsPubliclyMetadata)(nil),         // 26: code.transaction.v2.ReceivePaymentsPubliclyMetadata
	(*PublicDistributionMetadata)(nil),              // 27: code.transaction.v2.PublicDistributionMetadata
	(*Action)(nil),                                  // 28: code.transaction.v2.Action
	(*OpenAccountAction)(nil),                       // 29: code.transaction.v2.OpenAccountAction
	(*NoPrivacyTransferAction)(nil),                 // 30: code.transaction.v2.NoPrivacyTransferAction
	(*NoPrivacyWithdrawAction)(nil),                 // 31: code.transaction.v2.NoPrivacyWithdrawAction
	(*FeePaymentAction)(nil),                        // 32: code.transaction.v2.FeePaymentAction
	(*ServerParameter)(nil),                         // 33: code.transaction.v2.ServerParameter
	(*NoncedTransactionMetadata)(nil),               // 34: code.transaction.v2.NoncedTransactionMetadata
	(*OpenAccountServerParameter)(nil),              // 35: code.transaction.v2.OpenAccountServerParameter
	(*NoPrivacyTransferServerParameter)(nil),        // 36: code.transaction.v2.NoPrivacyTransferServerParameter
	(*NoPrivacyWithdrawServerParameter)(nil),        // 37: code.transaction.v2.NoPrivacyWithdrawServerParameter
	(*FeePaymentServerParameter)(nil),               // 38: code.transaction.v2.FeePaymentServerParameter
	(*ErrorDetails)(nil),                            // 39: code.transaction.v2.ErrorDetails
	(*ReasonStringErrorDetails)(nil),                // 40: code.transaction.v2.ReasonStringErrorDetails
	(*InvalidSignatureErrorDetails)(nil),            // 41: code.transaction.v2.InvalidSignatureErrorDetails
	(*DeniedErrorDetails)(nil),                      // 42: code.transaction.v2.DeniedErrorDetails
	(*ExchangeData)(nil),                            // 43: code.transaction.v2.ExchangeData
	(*ExchangeDataWithoutRate)(nil),                 // 44: code.transaction.v2.ExchangeDataWithoutRate
	(*SendLimit)(nil),                               // 45: code.transaction.v2.SendLimit
	(*SubmitIntentRequest_SubmitActions)(nil),       // 46: code.transaction.v2.SubmitIntentRequest.SubmitActions
	(*SubmitIntentRequest_SubmitSignatures)(nil),    // 47: code.transaction.v2.SubmitIntentRequest.SubmitSignatures
	(*SubmitIntentResponse_ServerParameters)(nil),   // 48: code.transaction.v2.SubmitIntentResponse.ServerParameters
	(*SubmitIntentResponse_Success)(nil),            // 49: code.transaction.v2.SubmitIntentResponse.Success
	(*SubmitIntentResponse_Error)(nil),              // 50: code.transaction.v2.SubmitIntentResponse.Error
	nil,                                             // 51: code.transaction.v2.GetLimitsResponse.SendLimitsByCurrencyEntry
	(*PublicDistributionMetadata_Distribution)(nil), // 52: code.transaction.v2.PublicDistributionMetadata.Distribution
	(*v1.IntentId)(nil),                             // 53: code.common.v1.IntentId
	(*v1.SolanaAccountId)(nil),                      // 54: code.common.v1.SolanaAccountId
	(*v1.Signature)(nil),                            // 55: code.common.v1.Signature
	(*timestamppb.Timestamp)(nil),                   // 56: google.protobuf.Timestamp
	(v1.AccountType)(0),                             // 57: code.common.v1.AccountType
	(*v1.Blockhash)(nil),                            // 58: code.common.v1.Blockhash
	(*v1.Transaction)(nil),                          // 59: code.common.v1.Transaction
	(*v1.Hash)(nil),                                 // 60: code.common.v1.Hash
}
var file_transaction_v2_transaction_service_proto_depIdxs = []int32{
	46,  // 0: code.transaction.v2.SubmitIntentRequest.submit_actions:type_name -> code.transaction.v2.SubmitIntentRequest.SubmitActions
	47,  // 1: code.transaction.v2.SubmitIntentRequest.submit_signatures:type_name -> code.transaction.v2.SubmitIntentRequest.SubmitSignatures
	48,  // 2: code.transaction.v2.SubmitIntentResponse.server_parameters:type_name -> code.transaction.v2.SubmitIntentResponse.ServerParameters
	49,  // 3: code.transaction.v2.SubmitIntentResponse.success:type_name -> code.transaction.v2.SubmitIntentResponse.Success
	50,  // 4: code.transaction.v2.SubmitIntentResponse.error:type_name -> code.transaction.v2.SubmitIntentResponse.Error
	53,  // 5: code.transaction.v2.GetIntentMetadataRequest.intent_id:type_name -> code.common.v1.IntentId
	54,  // 6: code.transaction.v2.GetIntentMetadataRequest.owner:type_name -> code.common.v1.SolanaAccountId
	55,  // 7: code.transaction.v2.GetIntentMetadataRequest.signature:type_name -> code.common.v1.Signature
	3,   // 8: code.transaction.v2.GetIntentMetadataResponse.result:type_name -> code.transaction.v2.GetIntentMetadataResponse.Result
	23,  // 9: code.transaction.v2.GetIntentMetadataResponse.metadata:type_name -> code.transaction.v2.Metadata
	54,  // 10: code.transaction.v2.GetLimitsRequest.owner:type_name -> code.common.v1.SolanaAccountId
	55,  // 11: code.transaction.v2.GetLimitsRequest.signature:type_name -> code.common.v1.Signature
	56,  // 12: code.transaction.v2.GetLimitsRequest.consumed_since:type_name -> google.protobuf.Timestamp
	4,   // 13: code.transaction.v2.GetLimitsResponse.result:type_name -> code.transaction.v2.GetLimitsResponse.Result
	51,  // 14: code.transaction.v2.GetLimitsResponse.send_limits_by_currency:type_name -> code.transaction.v2.GetLimitsResponse.SendLimitsByCurrencyEntry
	54,  // 15: code.transaction.v2.CanWithdrawToAccountRequest.account:type_name -> code.common.v1.SolanaAccountId
	54,  // 16: code.transaction.v2.CanWithdrawToAccountRequest.mint:type_name -> code.common.v1.SolanaAccountId
	5,   // 17: code.transaction.v2.CanWithdrawToAccountResponse.account_type:type_name -> code.transaction.v2.CanWithdrawToAccountResponse.AccountType
	44,  // 18: code.transaction.v2.CanWithdrawToAccountResponse.fee_amount:type_name -> code.transaction.v2.ExchangeDataWithoutRate
	0,   // 19: code.transaction.v2.AirdropRequest.airdrop_type:type_name -> code.transaction.v2.AirdropType
	54,  // 20: code.transaction.v2.AirdropRequest.owner:type_name -> code.common.v1.SolanaAccountId
	55,  // 21: code.transaction.v2.AirdropRequest.signature:type_name -> code.common.v1.Signature
	6,   // 22: code.transaction.v2.AirdropResponse.result:type_name -> code.transaction.v2.AirdropResponse.Result
	43,  // 23: code.transaction.v2.AirdropResponse.exchange_data:type_name -> code.transaction.v2.ExchangeData
	54,  // 24: code.transaction.v2.VoidGiftCardRequest.owner:type_name -> code.common.v1.SolanaAccountId
	54,  // 25: code.transaction.v2.VoidGiftCardRequest.gift_card_vault:type_name -> code.common.v1.SolanaAccountId
	55,  // 26: code.transaction.v2.VoidGiftCardRequest.signature:type_name -> code.common.v1.Signature
	7,   // 27: code.transaction.v2.VoidGiftCardResponse.result:type_name -> code.transaction.v2.VoidGiftCardResponse.Result
	24,  // 28: code.transaction.v2.Metadata.open_accounts:type_name -> code.transaction.v2.OpenAccountsMetadata
	25,  // 29: code.transaction.v2.Metadata.send_public_payment:type_name -> code.transaction.v2.SendPublicPaymentMetadata
	26,  // 30: code.transaction.v2.Metadata.receive_payments_publicly:type_name -> code.transaction.v2.ReceivePaymentsPubliclyMetadata
	27,  // 31: code.transaction.v2.Metadata.public_distribution:type_name -> code.transaction.v2.PublicDistributionMetadata
	8,   // 32: code.transaction.v2.OpenAccountsMetadata.account_set:type_name -> code.transaction.v2.OpenAccountsMetadata.AccountSet
	54,  // 33: code.transaction.v2.OpenAccountsMetadata.mint:type_name -> code.common.v1.SolanaAccountId
	54,  // 34: code.transaction.v2.SendPublicPaymentMetadata.source:type_name -> code.common.v1.SolanaAccountId
	54,  // 35: code.transaction.v2.SendPublicPaymentMetadata.destination:type_name -> code.common.v1.SolanaAccountId
	54,  // 36: code.transaction.v2.SendPublicPaymentMetadata.destination_owner:type_name -> code.common.v1.SolanaAccountId
	43,  // 37: code.transaction.v2.SendPublicPaymentMetadata.exchange_data:type_name -> code.transaction.v2.ExchangeData
	54,  // 38: code.transaction.v2.SendPublicPaymentMetadata.mint:type_name -> code.common.v1.SolanaAccountId
	54,  // 39: code.transaction.v2.ReceivePaymentsPubliclyMetadata.source:type_name -> code.common.v1.SolanaAccountId
	43,  // 40: code.transaction.v2.ReceivePaymentsPubliclyMetadata.exchange_data:type_name -> code.transaction.v2.ExchangeData
	54,  // 41: code.transaction.v2.ReceivePaymentsPubliclyMetadata.mint:type_name -> code.common.v1.SolanaAccountId
	54,  // 42: code.transaction.v2.PublicDistributionMetadata.source:type_name -> code.common.v1.SolanaAccountId
	52,  // 43: code.transaction.v2.PublicDistributionMetadata.distributions:type_name -> code.transaction.v2.PublicDistributionMetadata.Distribution
	54,  // 44: code.transaction.v2.PublicDistributionMetadata.mint:type_name -> code.common.v1.SolanaAccountId
	29,  // 45: code.transaction.v2.Action.open_account:type_name -> code.transaction.v2.OpenAccountAction
	30,  // 46: code.transaction.v2.Action.no_privacy_transfer:type_name -> code.transaction.v2.NoPrivacyTransferAction
	31,  // 47: code.transaction.v2.Action.no_privacy_withdraw:type_name -> code.transaction.v2.NoPrivacyWithdrawAction
	32,  // 48: code.transaction.v2.Action.fee_payment:type_name -> code.transaction.v2.FeePaymentAction
	57,  // 49: code.transaction.v2.OpenAccountAction.account_type:type_name -> code.common.v1.AccountType
	54,  // 50: code.transaction.v2.OpenAccountAction.owner:type_name -> code.common.v1.SolanaAccountId
	54,  // 51: code.transaction.v2.OpenAccountAction.authority:type_name -> code.common.v1.SolanaAccountId
	54,  // 52: code.transaction.v2.OpenAccountAction.token:type_name -> code.common.v1.SolanaAccountId
	55,  // 53: code.transaction.v2.OpenAccountAction.authority_signature:type_name -> code.common.v1.Signature
	54,  // 54: code.transaction.v2.OpenAccountAction.mint:type_name -> code.common.v1.SolanaAccountId
	54,  // 55: code.transaction.v2.NoPrivacyTransferAction.authority:type_name -> code.common.v1.SolanaAccountId
	54,  // 56: code.transaction.v2.NoPrivacyTransferAction.source:type_name -> code.common.v1.SolanaAccountId
	54,  // 57: code.transaction.v2.NoPrivacyTransferAction.destination:type_name -> code.common.v1.SolanaAccountId
	54,  // 58: code.transaction.v2.NoPrivacyTransferAction.mint:type_name -> code.common.v1.SolanaAccountId
	54,  // 59: code.transaction.v2.NoPrivacyWithdrawAction.authority:type_name -> code.common.v1.SolanaAccountId
	54,  // 60: code.transaction.v2.NoPrivacyWithdrawAction.source:type_name -> code.common.v1.SolanaAccountId
	54,  // 61: code.transaction.v2.NoPrivacyWithdrawAction.destination:type_name -> code.common.v1.SolanaAccountId
	54,  // 62: code.transaction.v2.NoPrivacyWithdrawAction.mint:type_name -> code.common.v1.SolanaAccountId
	9,   // 63: code.transaction.v2.FeePaymentAction.type:type_name -> code.transaction.v2.FeePaymentAction.FeeType
	54,  // 64: code.transaction.v2.FeePaymentAction.authority:type_name -> code.common.v1.SolanaAccountId
	54,  // 65: code.transaction.v2.FeePaymentAction.source:type_name -> code.common.v1.SolanaAccountId
	54,  // 66: code.transaction.v2.FeePaymentAction.mint:type_name -> code.common.v1.SolanaAccountId
	34,  // 67: code.transaction.v2.ServerParameter.nonces:type_name -> code.transaction.v2.NoncedTransactionMetadata
	35,  // 68: code.transaction.v2.ServerParameter.open_account:type_name -> code.transaction.v2.OpenAccountServerParameter
	36,  // 69: code.transaction.v2.ServerParameter.no_privacy_transfer:type_name -> code.transaction.v2.NoPrivacyTransferServerParameter
	37,  // 70: code.transaction.v2.ServerParameter.no_privacy_withdraw:type_name -> code.transaction.v2.NoPrivacyWithdrawServerParameter
	38,  // 71: code.transaction.v2.ServerParameter.fee_payment:type_name -> code.transaction.v2.FeePaymentServerParameter
	54,  // 72: code.transaction.v2.NoncedTransactionMetadata.nonce:type_name -> code.common.v1.SolanaAccountId
	58,  // 73: code.transaction.v2.NoncedTransactionMetadata.blockhash:type_name -> code.common.v1.Blockhash
	54,  // 74: code.transaction.v2.FeePaymentServerParameter.destination:type_name -> code.common.v1.SolanaAccountId
	40,  // 75: code.transaction.v2.ErrorDetails.reason_string:type_name -> code.transaction.v2.ReasonStringErrorDetails
	41,  // 76: code.transaction.v2.ErrorDetails.invalid_signature:type_name -> code.transaction.v2.InvalidSignatureErrorDetails
	42,  // 77: code.transaction.v2.ErrorDetails.denied:type_name -> code.transaction.v2.DeniedErrorDetails
	59,  // 78: code.transaction.v2.InvalidSignatureErrorDetails.expected_transaction:type_name -> code.common.v1.Transaction
	60,  // 79: code.transaction.v2.InvalidSignatureErrorDetails.expected_vixn_hash:type_name -> code.common.v1.Hash
	55,  // 80: code.transaction.v2.InvalidSignatureErrorDetails.provided_signature:type_name -> code.common.v1.Signature
	10,  // 81: code.transaction.v2.DeniedErrorDetails.code:type_name -> code.transaction.v2.DeniedErrorDetails.Code
	54,  // 82: code.transaction.v2.ExchangeData.mint:type_name -> code.common.v1.SolanaAccountId
	53,  // 83: code.transaction.v2.SubmitIntentRequest.SubmitActions.id:type_name -> code.common.v1.IntentId
	54,  // 84: code.transaction.v2.SubmitIntentRequest.SubmitActions.owner:type_name -> code.common.v1.SolanaAccountId
	23,  // 85: code.transaction.v2.SubmitIntentRequest.SubmitActions.metadata:type_name -> code.transaction.v2.Metadata
	28,  // 86: code.transaction.v2.SubmitIntentRequest.SubmitActions.actions:type_name -> code.transaction.v2.Action
	55,  // 87: code.transaction.v2.SubmitIntentRequest.SubmitActions.signature:type_name -> code.common.v1.Signature
	55,  // 88: code.transaction.v2.SubmitIntentRequest.SubmitSignatures.signatures:type_name -> code.common.v1.Signature
	33,  // 89: code.transaction.v2.SubmitIntentResponse.ServerParameters.server_parameters:type_name -> code.transaction.v2.ServerParameter
	1,   // 90: code.transaction.v2.SubmitIntentResponse.Success.code:type_name -> code.transaction.v2.SubmitIntentResponse.Success.Code
	2,   // 91: code.transaction.v2.SubmitIntentResponse.Error.code:type_name -> code.transaction.v2.SubmitIntentResponse.Error.Code
	39,  // 92: code.transaction.v2.SubmitIntentResponse.Error.error_details:type_name -> code.transaction.v2.ErrorDetails
	45,  // 93: code.transaction.v2.GetLimitsResponse.SendLimitsByCurrencyEntry.value:type_name -> code.transaction.v2.SendLimit
	54,  // 94: code.transaction.v2.PublicDistributionMetadata.Distribution.destination:type_name -> code.common.v1.SolanaAccountId
	11,  // 95: code.transaction.v2.Transaction.SubmitIntent:input_type -> code.transaction.v2.SubmitIntentRequest
	13,  // 96: code.transaction.v2.Transaction.GetIntentMetadata:input_type -> code.transaction.v2.GetIntentMetadataRequest
	15,  // 97: code.transaction.v2.Transaction.GetLimits:input_type -> code.transaction.v2.GetLimitsRequest
	17,  // 98: code.transaction.v2.Transaction.CanWithdrawToAccount:input_type -> code.transaction.v2.CanWithdrawToAccountRequest
	19,  // 99: code.transaction.v2.Transaction.Airdrop:input_type -> code.transaction.v2.AirdropRequest
	21,  // 100: code.transaction.v2.Transaction.VoidGiftCard:input_type -> code.transaction.v2.VoidGiftCardRequest
	12,  // 101: code.transaction.v2.Transaction.SubmitIntent:output_type -> code.transaction.v2.SubmitIntentResponse
	14,  // 102: code.transaction.v2.Transaction.GetIntentMetadata:output_type -> code.transaction.v2.GetIntentMetadataResponse
	16,  // 103: code.transaction.v2.Transaction.GetLimits:output_type -> code.transaction.v2.GetLimitsResponse
	18,  // 104: code.transaction.v2.Transaction.CanWithdrawToAccount:output_type -> code.transaction.v2.CanWithdrawToAccountResponse
	20,  // 105: code.transaction.v2.Transaction.Airdrop:output_type -> code.transaction.v2.AirdropResponse
	22,  // 106: code.transaction.v2.Transaction.VoidGiftCard:output_type -> code.transaction.v2.VoidGiftCardResponse
	101, // [101:107] is the sub-list for method output_type
	95,  // [95:101] is the sub-list for method input_type
	95,  // [95:95] is the sub-list for extension type_name
	95,  // [95:95] is the sub-list for extension extendee
	0,   // [0:95] is the sub-list for field type_name
}

func init() { file_transaction_v2_transaction_service_proto_init() }
func file_transaction_v2_transaction_service_proto_init() {
	if File_transaction_v2_transaction_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_transaction_v2_transaction_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitIntentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitIntentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIntentMetadataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIntentMetadataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLimitsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLimitsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CanWithdrawToAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CanWithdrawToAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AirdropRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AirdropResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoidGiftCardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoidGiftCardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenAccountsMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendPublicPaymentMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceivePaymentsPubliclyMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicDistributionMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenAccountAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoPrivacyTransferAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoPrivacyWithdrawAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeePaymentAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoncedTransactionMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenAccountServerParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoPrivacyTransferServerParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoPrivacyWithdrawServerParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeePaymentServerParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReasonStringErrorDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvalidSignatureErrorDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeniedErrorDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeDataWithoutRate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitIntentRequest_SubmitActions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitIntentRequest_SubmitSignatures); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitIntentResponse_ServerParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitIntentResponse_Success); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitIntentResponse_Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicDistributionMetadata_Distribution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_transaction_v2_transaction_service_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*SubmitIntentRequest_SubmitActions_)(nil),
		(*SubmitIntentRequest_SubmitSignatures_)(nil),
	}
	file_transaction_v2_transaction_service_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*SubmitIntentResponse_ServerParameters_)(nil),
		(*SubmitIntentResponse_Success_)(nil),
		(*SubmitIntentResponse_Error_)(nil),
	}
	file_transaction_v2_transaction_service_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*Metadata_OpenAccounts)(nil),
		(*Metadata_SendPublicPayment)(nil),
		(*Metadata_ReceivePaymentsPublicly)(nil),
		(*Metadata_PublicDistribution)(nil),
	}
	file_transaction_v2_transaction_service_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*Action_OpenAccount)(nil),
		(*Action_NoPrivacyTransfer)(nil),
		(*Action_NoPrivacyWithdraw)(nil),
		(*Action_FeePayment)(nil),
	}
	file_transaction_v2_transaction_service_proto_msgTypes[22].OneofWrappers = []interface{}{
		(*ServerParameter_OpenAccount)(nil),
		(*ServerParameter_NoPrivacyTransfer)(nil),
		(*ServerParameter_NoPrivacyWithdraw)(nil),
		(*ServerParameter_FeePayment)(nil),
	}
	file_transaction_v2_transaction_service_proto_msgTypes[28].OneofWrappers = []interface{}{
		(*ErrorDetails_ReasonString)(nil),
		(*ErrorDetails_InvalidSignature)(nil),
		(*ErrorDetails_Denied)(nil),
	}
	file_transaction_v2_transaction_service_proto_msgTypes[30].OneofWrappers = []interface{}{
		(*InvalidSignatureErrorDetails_ExpectedTransaction)(nil),
		(*InvalidSignatureErrorDetails_ExpectedVixnHash)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_transaction_v2_transaction_service_proto_rawDesc,
			NumEnums:      11,
			NumMessages:   42,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_transaction_v2_transaction_service_proto_goTypes,
		DependencyIndexes: file_transaction_v2_transaction_service_proto_depIdxs,
		EnumInfos:         file_transaction_v2_transaction_service_proto_enumTypes,
		MessageInfos:      file_transaction_v2_transaction_service_proto_msgTypes,
	}.Build()
	File_transaction_v2_transaction_service_proto = out.File
	file_transaction_v2_transaction_service_proto_rawDesc = nil
	file_transaction_v2_transaction_service_proto_goTypes = nil
	file_transaction_v2_transaction_service_proto_depIdxs = nil
}
