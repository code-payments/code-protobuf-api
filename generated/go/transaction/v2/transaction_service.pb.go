// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: transaction/v2/transaction_service.proto

package transaction

import (
	v1 "github.com/code-payments/code-protobuf-api/generated/go/common/v1"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AirdropType int32

const (
	AirdropType_UNKNOWN AirdropType = 0
	// Reward for giving someone else their first Kin
	AirdropType_GIVE_FIRST_KIN AirdropType = 1
	// Airdrop for getting a user started with first Kin balance
	AirdropType_GET_FIRST_KIN AirdropType = 2
)

// Enum value maps for AirdropType.
var (
	AirdropType_name = map[int32]string{
		0: "UNKNOWN",
		1: "GIVE_FIRST_KIN",
		2: "GET_FIRST_KIN",
	}
	AirdropType_value = map[string]int32{
		"UNKNOWN":        0,
		"GIVE_FIRST_KIN": 1,
		"GET_FIRST_KIN":  2,
	}
)

func (x AirdropType) Enum() *AirdropType {
	p := new(AirdropType)
	*p = x
	return p
}

func (x AirdropType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AirdropType) Descriptor() protoreflect.EnumDescriptor {
	return file_transaction_v2_transaction_service_proto_enumTypes[0].Descriptor()
}

func (AirdropType) Type() protoreflect.EnumType {
	return &file_transaction_v2_transaction_service_proto_enumTypes[0]
}

func (x AirdropType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AirdropType.Descriptor instead.
func (AirdropType) EnumDescriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{0}
}

type SubmitIntentResponse_Success_Code int32

const (
	// The intent was successfully created and is now scheduled.
	SubmitIntentResponse_Success_OK SubmitIntentResponse_Success_Code = 0
)

// Enum value maps for SubmitIntentResponse_Success_Code.
var (
	SubmitIntentResponse_Success_Code_name = map[int32]string{
		0: "OK",
	}
	SubmitIntentResponse_Success_Code_value = map[string]int32{
		"OK": 0,
	}
)

func (x SubmitIntentResponse_Success_Code) Enum() *SubmitIntentResponse_Success_Code {
	p := new(SubmitIntentResponse_Success_Code)
	*p = x
	return p
}

func (x SubmitIntentResponse_Success_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubmitIntentResponse_Success_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_transaction_v2_transaction_service_proto_enumTypes[1].Descriptor()
}

func (SubmitIntentResponse_Success_Code) Type() protoreflect.EnumType {
	return &file_transaction_v2_transaction_service_proto_enumTypes[1]
}

func (x SubmitIntentResponse_Success_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubmitIntentResponse_Success_Code.Descriptor instead.
func (SubmitIntentResponse_Success_Code) EnumDescriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{1, 1, 0}
}

type SubmitIntentResponse_Error_Code int32

const (
	// Denied by a guard (spam, money laundering, etc)
	SubmitIntentResponse_Error_DENIED SubmitIntentResponse_Error_Code = 0
	// The intent is invalid.
	SubmitIntentResponse_Error_INVALID_INTENT SubmitIntentResponse_Error_Code = 1
	// There is an issue with provided signatures.
	SubmitIntentResponse_Error_SIGNATURE_ERROR SubmitIntentResponse_Error_Code = 2
	// Server detected client has stale state.
	SubmitIntentResponse_Error_STALE_STATE SubmitIntentResponse_Error_Code = 3
)

// Enum value maps for SubmitIntentResponse_Error_Code.
var (
	SubmitIntentResponse_Error_Code_name = map[int32]string{
		0: "DENIED",
		1: "INVALID_INTENT",
		2: "SIGNATURE_ERROR",
		3: "STALE_STATE",
	}
	SubmitIntentResponse_Error_Code_value = map[string]int32{
		"DENIED":          0,
		"INVALID_INTENT":  1,
		"SIGNATURE_ERROR": 2,
		"STALE_STATE":     3,
	}
)

func (x SubmitIntentResponse_Error_Code) Enum() *SubmitIntentResponse_Error_Code {
	p := new(SubmitIntentResponse_Error_Code)
	*p = x
	return p
}

func (x SubmitIntentResponse_Error_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubmitIntentResponse_Error_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_transaction_v2_transaction_service_proto_enumTypes[2].Descriptor()
}

func (SubmitIntentResponse_Error_Code) Type() protoreflect.EnumType {
	return &file_transaction_v2_transaction_service_proto_enumTypes[2]
}

func (x SubmitIntentResponse_Error_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubmitIntentResponse_Error_Code.Descriptor instead.
func (SubmitIntentResponse_Error_Code) EnumDescriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{1, 2, 0}
}

type GetIntentMetadataResponse_Result int32

const (
	GetIntentMetadataResponse_OK        GetIntentMetadataResponse_Result = 0
	GetIntentMetadataResponse_NOT_FOUND GetIntentMetadataResponse_Result = 1
)

// Enum value maps for GetIntentMetadataResponse_Result.
var (
	GetIntentMetadataResponse_Result_name = map[int32]string{
		0: "OK",
		1: "NOT_FOUND",
	}
	GetIntentMetadataResponse_Result_value = map[string]int32{
		"OK":        0,
		"NOT_FOUND": 1,
	}
)

func (x GetIntentMetadataResponse_Result) Enum() *GetIntentMetadataResponse_Result {
	p := new(GetIntentMetadataResponse_Result)
	*p = x
	return p
}

func (x GetIntentMetadataResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetIntentMetadataResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_transaction_v2_transaction_service_proto_enumTypes[3].Descriptor()
}

func (GetIntentMetadataResponse_Result) Type() protoreflect.EnumType {
	return &file_transaction_v2_transaction_service_proto_enumTypes[3]
}

func (x GetIntentMetadataResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetIntentMetadataResponse_Result.Descriptor instead.
func (GetIntentMetadataResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{3, 0}
}

type GetPrivacyUpgradeStatusResponse_Result int32

const (
	GetPrivacyUpgradeStatusResponse_OK GetPrivacyUpgradeStatusResponse_Result = 0
	// The provided intent ID doesn't exist
	GetPrivacyUpgradeStatusResponse_INTENT_NOT_FOUND GetPrivacyUpgradeStatusResponse_Result = 1
	// The provided action ID doesn't exist
	GetPrivacyUpgradeStatusResponse_ACTION_NOT_FOUND GetPrivacyUpgradeStatusResponse_Result = 2
	// The provided action doesn't map to a private transaction
	GetPrivacyUpgradeStatusResponse_INVALID_ACTION GetPrivacyUpgradeStatusResponse_Result = 3
)

// Enum value maps for GetPrivacyUpgradeStatusResponse_Result.
var (
	GetPrivacyUpgradeStatusResponse_Result_name = map[int32]string{
		0: "OK",
		1: "INTENT_NOT_FOUND",
		2: "ACTION_NOT_FOUND",
		3: "INVALID_ACTION",
	}
	GetPrivacyUpgradeStatusResponse_Result_value = map[string]int32{
		"OK":               0,
		"INTENT_NOT_FOUND": 1,
		"ACTION_NOT_FOUND": 2,
		"INVALID_ACTION":   3,
	}
)

func (x GetPrivacyUpgradeStatusResponse_Result) Enum() *GetPrivacyUpgradeStatusResponse_Result {
	p := new(GetPrivacyUpgradeStatusResponse_Result)
	*p = x
	return p
}

func (x GetPrivacyUpgradeStatusResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetPrivacyUpgradeStatusResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_transaction_v2_transaction_service_proto_enumTypes[4].Descriptor()
}

func (GetPrivacyUpgradeStatusResponse_Result) Type() protoreflect.EnumType {
	return &file_transaction_v2_transaction_service_proto_enumTypes[4]
}

func (x GetPrivacyUpgradeStatusResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetPrivacyUpgradeStatusResponse_Result.Descriptor instead.
func (GetPrivacyUpgradeStatusResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{5, 0}
}

type GetPrivacyUpgradeStatusResponse_Status int32

const (
	GetPrivacyUpgradeStatusResponse_UNKNOWN GetPrivacyUpgradeStatusResponse_Status = 0
	// The transaction for the temporary private transaction was submitted and
	// finalized. The opportunity to upgrade was missed.
	GetPrivacyUpgradeStatusResponse_TEMPORARY_TRANSACTION_FINALIZED GetPrivacyUpgradeStatusResponse_Status = 1
	// The next block of transactions hasn't been created. Wait and try again
	// later.
	GetPrivacyUpgradeStatusResponse_WAITING_FOR_NEXT_BLOCK GetPrivacyUpgradeStatusResponse_Status = 2
	// The transaction can be upgraded to permanent privacy
	GetPrivacyUpgradeStatusResponse_READY_FOR_UPGRADE GetPrivacyUpgradeStatusResponse_Status = 3
	// The transaction has already been upgraded
	GetPrivacyUpgradeStatusResponse_ALREADY_UPGRADED GetPrivacyUpgradeStatusResponse_Status = 4
)

// Enum value maps for GetPrivacyUpgradeStatusResponse_Status.
var (
	GetPrivacyUpgradeStatusResponse_Status_name = map[int32]string{
		0: "UNKNOWN",
		1: "TEMPORARY_TRANSACTION_FINALIZED",
		2: "WAITING_FOR_NEXT_BLOCK",
		3: "READY_FOR_UPGRADE",
		4: "ALREADY_UPGRADED",
	}
	GetPrivacyUpgradeStatusResponse_Status_value = map[string]int32{
		"UNKNOWN":                         0,
		"TEMPORARY_TRANSACTION_FINALIZED": 1,
		"WAITING_FOR_NEXT_BLOCK":          2,
		"READY_FOR_UPGRADE":               3,
		"ALREADY_UPGRADED":                4,
	}
)

func (x GetPrivacyUpgradeStatusResponse_Status) Enum() *GetPrivacyUpgradeStatusResponse_Status {
	p := new(GetPrivacyUpgradeStatusResponse_Status)
	*p = x
	return p
}

func (x GetPrivacyUpgradeStatusResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetPrivacyUpgradeStatusResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_transaction_v2_transaction_service_proto_enumTypes[5].Descriptor()
}

func (GetPrivacyUpgradeStatusResponse_Status) Type() protoreflect.EnumType {
	return &file_transaction_v2_transaction_service_proto_enumTypes[5]
}

func (x GetPrivacyUpgradeStatusResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetPrivacyUpgradeStatusResponse_Status.Descriptor instead.
func (GetPrivacyUpgradeStatusResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{5, 1}
}

type GetPrioritizedIntentsForPrivacyUpgradeResponse_Result int32

const (
	GetPrioritizedIntentsForPrivacyUpgradeResponse_OK        GetPrioritizedIntentsForPrivacyUpgradeResponse_Result = 0
	GetPrioritizedIntentsForPrivacyUpgradeResponse_NOT_FOUND GetPrioritizedIntentsForPrivacyUpgradeResponse_Result = 1
)

// Enum value maps for GetPrioritizedIntentsForPrivacyUpgradeResponse_Result.
var (
	GetPrioritizedIntentsForPrivacyUpgradeResponse_Result_name = map[int32]string{
		0: "OK",
		1: "NOT_FOUND",
	}
	GetPrioritizedIntentsForPrivacyUpgradeResponse_Result_value = map[string]int32{
		"OK":        0,
		"NOT_FOUND": 1,
	}
)

func (x GetPrioritizedIntentsForPrivacyUpgradeResponse_Result) Enum() *GetPrioritizedIntentsForPrivacyUpgradeResponse_Result {
	p := new(GetPrioritizedIntentsForPrivacyUpgradeResponse_Result)
	*p = x
	return p
}

func (x GetPrioritizedIntentsForPrivacyUpgradeResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetPrioritizedIntentsForPrivacyUpgradeResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_transaction_v2_transaction_service_proto_enumTypes[6].Descriptor()
}

func (GetPrioritizedIntentsForPrivacyUpgradeResponse_Result) Type() protoreflect.EnumType {
	return &file_transaction_v2_transaction_service_proto_enumTypes[6]
}

func (x GetPrioritizedIntentsForPrivacyUpgradeResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetPrioritizedIntentsForPrivacyUpgradeResponse_Result.Descriptor instead.
func (GetPrioritizedIntentsForPrivacyUpgradeResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{7, 0}
}

type GetLimitsResponse_Result int32

const (
	GetLimitsResponse_OK GetLimitsResponse_Result = 0
)

// Enum value maps for GetLimitsResponse_Result.
var (
	GetLimitsResponse_Result_name = map[int32]string{
		0: "OK",
	}
	GetLimitsResponse_Result_value = map[string]int32{
		"OK": 0,
	}
)

func (x GetLimitsResponse_Result) Enum() *GetLimitsResponse_Result {
	p := new(GetLimitsResponse_Result)
	*p = x
	return p
}

func (x GetLimitsResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetLimitsResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_transaction_v2_transaction_service_proto_enumTypes[7].Descriptor()
}

func (GetLimitsResponse_Result) Type() protoreflect.EnumType {
	return &file_transaction_v2_transaction_service_proto_enumTypes[7]
}

func (x GetLimitsResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetLimitsResponse_Result.Descriptor instead.
func (GetLimitsResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{9, 0}
}

type GetPaymentHistoryRequest_Direction int32

const (
	// ASC direction returns all history items in ascending order.
	GetPaymentHistoryRequest_ASC GetPaymentHistoryRequest_Direction = 0
	// DESC direction returns all history items in descending order.
	GetPaymentHistoryRequest_DESC GetPaymentHistoryRequest_Direction = 1
)

// Enum value maps for GetPaymentHistoryRequest_Direction.
var (
	GetPaymentHistoryRequest_Direction_name = map[int32]string{
		0: "ASC",
		1: "DESC",
	}
	GetPaymentHistoryRequest_Direction_value = map[string]int32{
		"ASC":  0,
		"DESC": 1,
	}
)

func (x GetPaymentHistoryRequest_Direction) Enum() *GetPaymentHistoryRequest_Direction {
	p := new(GetPaymentHistoryRequest_Direction)
	*p = x
	return p
}

func (x GetPaymentHistoryRequest_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetPaymentHistoryRequest_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_transaction_v2_transaction_service_proto_enumTypes[8].Descriptor()
}

func (GetPaymentHistoryRequest_Direction) Type() protoreflect.EnumType {
	return &file_transaction_v2_transaction_service_proto_enumTypes[8]
}

func (x GetPaymentHistoryRequest_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetPaymentHistoryRequest_Direction.Descriptor instead.
func (GetPaymentHistoryRequest_Direction) EnumDescriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{10, 0}
}

type GetPaymentHistoryResponse_Result int32

const (
	GetPaymentHistoryResponse_OK        GetPaymentHistoryResponse_Result = 0
	GetPaymentHistoryResponse_NOT_FOUND GetPaymentHistoryResponse_Result = 1
)

// Enum value maps for GetPaymentHistoryResponse_Result.
var (
	GetPaymentHistoryResponse_Result_name = map[int32]string{
		0: "OK",
		1: "NOT_FOUND",
	}
	GetPaymentHistoryResponse_Result_value = map[string]int32{
		"OK":        0,
		"NOT_FOUND": 1,
	}
)

func (x GetPaymentHistoryResponse_Result) Enum() *GetPaymentHistoryResponse_Result {
	p := new(GetPaymentHistoryResponse_Result)
	*p = x
	return p
}

func (x GetPaymentHistoryResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetPaymentHistoryResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_transaction_v2_transaction_service_proto_enumTypes[9].Descriptor()
}

func (GetPaymentHistoryResponse_Result) Type() protoreflect.EnumType {
	return &file_transaction_v2_transaction_service_proto_enumTypes[9]
}

func (x GetPaymentHistoryResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetPaymentHistoryResponse_Result.Descriptor instead.
func (GetPaymentHistoryResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{11, 0}
}

type CanWithdrawToAccountResponse_AccountType int32

const (
	CanWithdrawToAccountResponse_Unknown      CanWithdrawToAccountResponse_AccountType = 0 // Server cannot determine
	CanWithdrawToAccountResponse_TokenAccount CanWithdrawToAccountResponse_AccountType = 1 // Client uses the address as is in SubmitIntent
	CanWithdrawToAccountResponse_OwnerAccount CanWithdrawToAccountResponse_AccountType = 2 // Client locally derives the ATA to use in SubmitIntent
)

// Enum value maps for CanWithdrawToAccountResponse_AccountType.
var (
	CanWithdrawToAccountResponse_AccountType_name = map[int32]string{
		0: "Unknown",
		1: "TokenAccount",
		2: "OwnerAccount",
	}
	CanWithdrawToAccountResponse_AccountType_value = map[string]int32{
		"Unknown":      0,
		"TokenAccount": 1,
		"OwnerAccount": 2,
	}
)

func (x CanWithdrawToAccountResponse_AccountType) Enum() *CanWithdrawToAccountResponse_AccountType {
	p := new(CanWithdrawToAccountResponse_AccountType)
	*p = x
	return p
}

func (x CanWithdrawToAccountResponse_AccountType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CanWithdrawToAccountResponse_AccountType) Descriptor() protoreflect.EnumDescriptor {
	return file_transaction_v2_transaction_service_proto_enumTypes[10].Descriptor()
}

func (CanWithdrawToAccountResponse_AccountType) Type() protoreflect.EnumType {
	return &file_transaction_v2_transaction_service_proto_enumTypes[10]
}

func (x CanWithdrawToAccountResponse_AccountType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CanWithdrawToAccountResponse_AccountType.Descriptor instead.
func (CanWithdrawToAccountResponse_AccountType) EnumDescriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{13, 0}
}

type AirdropResponse_Result int32

const (
	AirdropResponse_OK AirdropResponse_Result = 0
	// Airdrops are unavailable
	AirdropResponse_UNAVAILABLE AirdropResponse_Result = 1
	// The airdrop has already been claimed by the owner
	AirdropResponse_ALREADY_CLAIMED AirdropResponse_Result = 2
)

// Enum value maps for AirdropResponse_Result.
var (
	AirdropResponse_Result_name = map[int32]string{
		0: "OK",
		1: "UNAVAILABLE",
		2: "ALREADY_CLAIMED",
	}
	AirdropResponse_Result_value = map[string]int32{
		"OK":              0,
		"UNAVAILABLE":     1,
		"ALREADY_CLAIMED": 2,
	}
)

func (x AirdropResponse_Result) Enum() *AirdropResponse_Result {
	p := new(AirdropResponse_Result)
	*p = x
	return p
}

func (x AirdropResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AirdropResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_transaction_v2_transaction_service_proto_enumTypes[11].Descriptor()
}

func (AirdropResponse_Result) Type() protoreflect.EnumType {
	return &file_transaction_v2_transaction_service_proto_enumTypes[11]
}

func (x AirdropResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AirdropResponse_Result.Descriptor instead.
func (AirdropResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{15, 0}
}

type SwapResponse_Success_Code int32

const (
	// The swap was submitted to the blockchain.
	SwapResponse_Success_SWAP_SUBMITTED SwapResponse_Success_Code = 0
	// The swap was finalized on the blockchain.
	SwapResponse_Success_SWAP_FINALIZED SwapResponse_Success_Code = 1
)

// Enum value maps for SwapResponse_Success_Code.
var (
	SwapResponse_Success_Code_name = map[int32]string{
		0: "SWAP_SUBMITTED",
		1: "SWAP_FINALIZED",
	}
	SwapResponse_Success_Code_value = map[string]int32{
		"SWAP_SUBMITTED": 0,
		"SWAP_FINALIZED": 1,
	}
)

func (x SwapResponse_Success_Code) Enum() *SwapResponse_Success_Code {
	p := new(SwapResponse_Success_Code)
	*p = x
	return p
}

func (x SwapResponse_Success_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SwapResponse_Success_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_transaction_v2_transaction_service_proto_enumTypes[12].Descriptor()
}

func (SwapResponse_Success_Code) Type() protoreflect.EnumType {
	return &file_transaction_v2_transaction_service_proto_enumTypes[12]
}

func (x SwapResponse_Success_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SwapResponse_Success_Code.Descriptor instead.
func (SwapResponse_Success_Code) EnumDescriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{17, 1, 0}
}

type SwapResponse_Error_Code int32

const (
	// Denied by a guard (spam, money laundering, etc)
	SwapResponse_Error_DENIED SwapResponse_Error_Code = 0
	// There is an issue with the provided signature.
	SwapResponse_Error_SIGNATURE_ERROR SwapResponse_Error_Code = 2
	// The swap failed server-side validation
	SwapResponse_Error_INVALID_SWAP SwapResponse_Error_Code = 3
	// The submitted swap transaction failed. Attempt the swap again.
	SwapResponse_Error_SWAP_FAILED SwapResponse_Error_Code = 4
)

// Enum value maps for SwapResponse_Error_Code.
var (
	SwapResponse_Error_Code_name = map[int32]string{
		0: "DENIED",
		2: "SIGNATURE_ERROR",
		3: "INVALID_SWAP",
		4: "SWAP_FAILED",
	}
	SwapResponse_Error_Code_value = map[string]int32{
		"DENIED":          0,
		"SIGNATURE_ERROR": 2,
		"INVALID_SWAP":    3,
		"SWAP_FAILED":     4,
	}
)

func (x SwapResponse_Error_Code) Enum() *SwapResponse_Error_Code {
	p := new(SwapResponse_Error_Code)
	*p = x
	return p
}

func (x SwapResponse_Error_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SwapResponse_Error_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_transaction_v2_transaction_service_proto_enumTypes[13].Descriptor()
}

func (SwapResponse_Error_Code) Type() protoreflect.EnumType {
	return &file_transaction_v2_transaction_service_proto_enumTypes[13]
}

func (x SwapResponse_Error_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SwapResponse_Error_Code.Descriptor instead.
func (SwapResponse_Error_Code) EnumDescriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{17, 2, 0}
}

type DeclareFiatOnrampAttemptResponse_Result int32

const (
	DeclareFiatOnrampAttemptResponse_OK DeclareFiatOnrampAttemptResponse_Result = 0
)

// Enum value maps for DeclareFiatOnrampAttemptResponse_Result.
var (
	DeclareFiatOnrampAttemptResponse_Result_name = map[int32]string{
		0: "OK",
	}
	DeclareFiatOnrampAttemptResponse_Result_value = map[string]int32{
		"OK": 0,
	}
)

func (x DeclareFiatOnrampAttemptResponse_Result) Enum() *DeclareFiatOnrampAttemptResponse_Result {
	p := new(DeclareFiatOnrampAttemptResponse_Result)
	*p = x
	return p
}

func (x DeclareFiatOnrampAttemptResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeclareFiatOnrampAttemptResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_transaction_v2_transaction_service_proto_enumTypes[14].Descriptor()
}

func (DeclareFiatOnrampAttemptResponse_Result) Type() protoreflect.EnumType {
	return &file_transaction_v2_transaction_service_proto_enumTypes[14]
}

func (x DeclareFiatOnrampAttemptResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeclareFiatOnrampAttemptResponse_Result.Descriptor instead.
func (DeclareFiatOnrampAttemptResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{19, 0}
}

type FeePaymentAction_FeeType int32

const (
	FeePaymentAction_CODE        FeePaymentAction_FeeType = 0 // Hardcoded $0.01 USD fee to a dynamic fee account specified by server
	FeePaymentAction_THIRD_PARTY FeePaymentAction_FeeType = 1 // Third party fee specified at time of payment request
)

// Enum value maps for FeePaymentAction_FeeType.
var (
	FeePaymentAction_FeeType_name = map[int32]string{
		0: "CODE",
		1: "THIRD_PARTY",
	}
	FeePaymentAction_FeeType_value = map[string]int32{
		"CODE":        0,
		"THIRD_PARTY": 1,
	}
)

func (x FeePaymentAction_FeeType) Enum() *FeePaymentAction_FeeType {
	p := new(FeePaymentAction_FeeType)
	*p = x
	return p
}

func (x FeePaymentAction_FeeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FeePaymentAction_FeeType) Descriptor() protoreflect.EnumDescriptor {
	return file_transaction_v2_transaction_service_proto_enumTypes[15].Descriptor()
}

func (FeePaymentAction_FeeType) Type() protoreflect.EnumType {
	return &file_transaction_v2_transaction_service_proto_enumTypes[15]
}

func (x FeePaymentAction_FeeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FeePaymentAction_FeeType.Descriptor instead.
func (FeePaymentAction_FeeType) EnumDescriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{38, 0}
}

type PaymentHistoryItem_PaymentType int32

const (
	PaymentHistoryItem_UNKNOWN PaymentHistoryItem_PaymentType = 0
	PaymentHistoryItem_SEND    PaymentHistoryItem_PaymentType = 1
	PaymentHistoryItem_RECEIVE PaymentHistoryItem_PaymentType = 2
)

// Enum value maps for PaymentHistoryItem_PaymentType.
var (
	PaymentHistoryItem_PaymentType_name = map[int32]string{
		0: "UNKNOWN",
		1: "SEND",
		2: "RECEIVE",
	}
	PaymentHistoryItem_PaymentType_value = map[string]int32{
		"UNKNOWN": 0,
		"SEND":    1,
		"RECEIVE": 2,
	}
)

func (x PaymentHistoryItem_PaymentType) Enum() *PaymentHistoryItem_PaymentType {
	p := new(PaymentHistoryItem_PaymentType)
	*p = x
	return p
}

func (x PaymentHistoryItem_PaymentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PaymentHistoryItem_PaymentType) Descriptor() protoreflect.EnumDescriptor {
	return file_transaction_v2_transaction_service_proto_enumTypes[16].Descriptor()
}

func (PaymentHistoryItem_PaymentType) Type() protoreflect.EnumType {
	return &file_transaction_v2_transaction_service_proto_enumTypes[16]
}

func (x PaymentHistoryItem_PaymentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PaymentHistoryItem_PaymentType.Descriptor instead.
func (PaymentHistoryItem_PaymentType) EnumDescriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{54, 0}
}

type SubmitIntentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//
	//	*SubmitIntentRequest_SubmitActions_
	//	*SubmitIntentRequest_SubmitSignatures_
	Request isSubmitIntentRequest_Request `protobuf_oneof:"request"`
}

func (x *SubmitIntentRequest) Reset() {
	*x = SubmitIntentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitIntentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitIntentRequest) ProtoMessage() {}

func (x *SubmitIntentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitIntentRequest.ProtoReflect.Descriptor instead.
func (*SubmitIntentRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{0}
}

func (m *SubmitIntentRequest) GetRequest() isSubmitIntentRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *SubmitIntentRequest) GetSubmitActions() *SubmitIntentRequest_SubmitActions {
	if x, ok := x.GetRequest().(*SubmitIntentRequest_SubmitActions_); ok {
		return x.SubmitActions
	}
	return nil
}

func (x *SubmitIntentRequest) GetSubmitSignatures() *SubmitIntentRequest_SubmitSignatures {
	if x, ok := x.GetRequest().(*SubmitIntentRequest_SubmitSignatures_); ok {
		return x.SubmitSignatures
	}
	return nil
}

type isSubmitIntentRequest_Request interface {
	isSubmitIntentRequest_Request()
}

type SubmitIntentRequest_SubmitActions_ struct {
	SubmitActions *SubmitIntentRequest_SubmitActions `protobuf:"bytes,1,opt,name=submit_actions,json=submitActions,proto3,oneof"`
}

type SubmitIntentRequest_SubmitSignatures_ struct {
	SubmitSignatures *SubmitIntentRequest_SubmitSignatures `protobuf:"bytes,2,opt,name=submit_signatures,json=submitSignatures,proto3,oneof"`
}

func (*SubmitIntentRequest_SubmitActions_) isSubmitIntentRequest_Request() {}

func (*SubmitIntentRequest_SubmitSignatures_) isSubmitIntentRequest_Request() {}

type SubmitIntentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*SubmitIntentResponse_ServerParameters_
	//	*SubmitIntentResponse_Success_
	//	*SubmitIntentResponse_Error_
	Response isSubmitIntentResponse_Response `protobuf_oneof:"response"`
}

func (x *SubmitIntentResponse) Reset() {
	*x = SubmitIntentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitIntentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitIntentResponse) ProtoMessage() {}

func (x *SubmitIntentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitIntentResponse.ProtoReflect.Descriptor instead.
func (*SubmitIntentResponse) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{1}
}

func (m *SubmitIntentResponse) GetResponse() isSubmitIntentResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *SubmitIntentResponse) GetServerParameters() *SubmitIntentResponse_ServerParameters {
	if x, ok := x.GetResponse().(*SubmitIntentResponse_ServerParameters_); ok {
		return x.ServerParameters
	}
	return nil
}

func (x *SubmitIntentResponse) GetSuccess() *SubmitIntentResponse_Success {
	if x, ok := x.GetResponse().(*SubmitIntentResponse_Success_); ok {
		return x.Success
	}
	return nil
}

func (x *SubmitIntentResponse) GetError() *SubmitIntentResponse_Error {
	if x, ok := x.GetResponse().(*SubmitIntentResponse_Error_); ok {
		return x.Error
	}
	return nil
}

type isSubmitIntentResponse_Response interface {
	isSubmitIntentResponse_Response()
}

type SubmitIntentResponse_ServerParameters_ struct {
	ServerParameters *SubmitIntentResponse_ServerParameters `protobuf:"bytes,1,opt,name=server_parameters,json=serverParameters,proto3,oneof"`
}

type SubmitIntentResponse_Success_ struct {
	Success *SubmitIntentResponse_Success `protobuf:"bytes,2,opt,name=success,proto3,oneof"`
}

type SubmitIntentResponse_Error_ struct {
	Error *SubmitIntentResponse_Error `protobuf:"bytes,3,opt,name=error,proto3,oneof"`
}

func (*SubmitIntentResponse_ServerParameters_) isSubmitIntentResponse_Response() {}

func (*SubmitIntentResponse_Success_) isSubmitIntentResponse_Response() {}

func (*SubmitIntentResponse_Error_) isSubmitIntentResponse_Response() {}

type GetIntentMetadataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The intent ID to query
	IntentId *v1.IntentId `protobuf:"bytes,1,opt,name=intent_id,json=intentId,proto3" json:"intent_id,omitempty"`
	// The verified owner account public key when not signing with the rendezvous
	// key. Only owner accounts involved in the intent can access the metadata.
	Owner *v1.SolanaAccountId `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	// The signature is of serialize(GetIntentStatusRequest) without this field set
	// using the private key of the rendezvous or owner account. This provides an
	// authentication mechanism to the RPC.
	Signature *v1.Signature `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *GetIntentMetadataRequest) Reset() {
	*x = GetIntentMetadataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIntentMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIntentMetadataRequest) ProtoMessage() {}

func (x *GetIntentMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIntentMetadataRequest.ProtoReflect.Descriptor instead.
func (*GetIntentMetadataRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetIntentMetadataRequest) GetIntentId() *v1.IntentId {
	if x != nil {
		return x.IntentId
	}
	return nil
}

func (x *GetIntentMetadataRequest) GetOwner() *v1.SolanaAccountId {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *GetIntentMetadataRequest) GetSignature() *v1.Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type GetIntentMetadataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result   GetIntentMetadataResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=code.transaction.v2.GetIntentMetadataResponse_Result" json:"result,omitempty"`
	Metadata *Metadata                        `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *GetIntentMetadataResponse) Reset() {
	*x = GetIntentMetadataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIntentMetadataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIntentMetadataResponse) ProtoMessage() {}

func (x *GetIntentMetadataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIntentMetadataResponse.ProtoReflect.Descriptor instead.
func (*GetIntentMetadataResponse) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetIntentMetadataResponse) GetResult() GetIntentMetadataResponse_Result {
	if x != nil {
		return x.Result
	}
	return GetIntentMetadataResponse_OK
}

func (x *GetIntentMetadataResponse) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type GetPrivacyUpgradeStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The intent ID
	IntentId *v1.IntentId `protobuf:"bytes,1,opt,name=intent_id,json=intentId,proto3" json:"intent_id,omitempty"`
	// The action ID for private transaction
	ActionId uint32 `protobuf:"varint,2,opt,name=action_id,json=actionId,proto3" json:"action_id,omitempty"`
}

func (x *GetPrivacyUpgradeStatusRequest) Reset() {
	*x = GetPrivacyUpgradeStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPrivacyUpgradeStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPrivacyUpgradeStatusRequest) ProtoMessage() {}

func (x *GetPrivacyUpgradeStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPrivacyUpgradeStatusRequest.ProtoReflect.Descriptor instead.
func (*GetPrivacyUpgradeStatusRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{4}
}

func (x *GetPrivacyUpgradeStatusRequest) GetIntentId() *v1.IntentId {
	if x != nil {
		return x.IntentId
	}
	return nil
}

func (x *GetPrivacyUpgradeStatusRequest) GetActionId() uint32 {
	if x != nil {
		return x.ActionId
	}
	return 0
}

type GetPrivacyUpgradeStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result GetPrivacyUpgradeStatusResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=code.transaction.v2.GetPrivacyUpgradeStatusResponse_Result" json:"result,omitempty"`
	Status GetPrivacyUpgradeStatusResponse_Status `protobuf:"varint,2,opt,name=status,proto3,enum=code.transaction.v2.GetPrivacyUpgradeStatusResponse_Status" json:"status,omitempty"`
}

func (x *GetPrivacyUpgradeStatusResponse) Reset() {
	*x = GetPrivacyUpgradeStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPrivacyUpgradeStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPrivacyUpgradeStatusResponse) ProtoMessage() {}

func (x *GetPrivacyUpgradeStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPrivacyUpgradeStatusResponse.ProtoReflect.Descriptor instead.
func (*GetPrivacyUpgradeStatusResponse) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetPrivacyUpgradeStatusResponse) GetResult() GetPrivacyUpgradeStatusResponse_Result {
	if x != nil {
		return x.Result
	}
	return GetPrivacyUpgradeStatusResponse_OK
}

func (x *GetPrivacyUpgradeStatusResponse) GetStatus() GetPrivacyUpgradeStatusResponse_Status {
	if x != nil {
		return x.Status
	}
	return GetPrivacyUpgradeStatusResponse_UNKNOWN
}

type GetPrioritizedIntentsForPrivacyUpgradeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The owner account to query against for upgradeable intents.
	Owner *v1.SolanaAccountId `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	// The maximum number of intents to return in the response. Default is 10.
	Limit uint32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// The signature is of serialize(GetPrioritizedIntentsForPrivacyUpgradeRequest)
	// without this field set using the private key of the owner account. This
	// provides an authentication mechanism to the RPC.
	Signature *v1.Signature `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *GetPrioritizedIntentsForPrivacyUpgradeRequest) Reset() {
	*x = GetPrioritizedIntentsForPrivacyUpgradeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPrioritizedIntentsForPrivacyUpgradeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPrioritizedIntentsForPrivacyUpgradeRequest) ProtoMessage() {}

func (x *GetPrioritizedIntentsForPrivacyUpgradeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPrioritizedIntentsForPrivacyUpgradeRequest.ProtoReflect.Descriptor instead.
func (*GetPrioritizedIntentsForPrivacyUpgradeRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{6}
}

func (x *GetPrioritizedIntentsForPrivacyUpgradeRequest) GetOwner() *v1.SolanaAccountId {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *GetPrioritizedIntentsForPrivacyUpgradeRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetPrioritizedIntentsForPrivacyUpgradeRequest) GetSignature() *v1.Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type GetPrioritizedIntentsForPrivacyUpgradeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result GetPrioritizedIntentsForPrivacyUpgradeResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=code.transaction.v2.GetPrioritizedIntentsForPrivacyUpgradeResponse_Result" json:"result,omitempty"`
	// Ordered from highest to lowest priority
	Items []*UpgradeableIntent `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *GetPrioritizedIntentsForPrivacyUpgradeResponse) Reset() {
	*x = GetPrioritizedIntentsForPrivacyUpgradeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPrioritizedIntentsForPrivacyUpgradeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPrioritizedIntentsForPrivacyUpgradeResponse) ProtoMessage() {}

func (x *GetPrioritizedIntentsForPrivacyUpgradeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPrioritizedIntentsForPrivacyUpgradeResponse.ProtoReflect.Descriptor instead.
func (*GetPrioritizedIntentsForPrivacyUpgradeResponse) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{7}
}

func (x *GetPrioritizedIntentsForPrivacyUpgradeResponse) GetResult() GetPrioritizedIntentsForPrivacyUpgradeResponse_Result {
	if x != nil {
		return x.Result
	}
	return GetPrioritizedIntentsForPrivacyUpgradeResponse_OK
}

func (x *GetPrioritizedIntentsForPrivacyUpgradeResponse) GetItems() []*UpgradeableIntent {
	if x != nil {
		return x.Items
	}
	return nil
}

type GetLimitsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The owner account whose limits will be calculated. Any other owner accounts
	// linked with the same identity of the owner will also be applied.
	Owner *v1.SolanaAccountId `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	// The signature is of serialize(GetLimitsRequest) without this field set
	// using the private key of the owner account. This provides an authentication
	// mechanism to the RPC.
	Signature *v1.Signature `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	// All transactions starting at this time will be incorporated into the consumed
	// limit calculation. Clients should set this to the start of the current day in
	// the client's current time zone (because server has no knowledge of this atm).
	ConsumedSince *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=consumed_since,json=consumedSince,proto3" json:"consumed_since,omitempty"`
}

func (x *GetLimitsRequest) Reset() {
	*x = GetLimitsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLimitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLimitsRequest) ProtoMessage() {}

func (x *GetLimitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLimitsRequest.ProtoReflect.Descriptor instead.
func (*GetLimitsRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{8}
}

func (x *GetLimitsRequest) GetOwner() *v1.SolanaAccountId {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *GetLimitsRequest) GetSignature() *v1.Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *GetLimitsRequest) GetConsumedSince() *timestamppb.Timestamp {
	if x != nil {
		return x.ConsumedSince
	}
	return nil
}

type GetLimitsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result GetLimitsResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=code.transaction.v2.GetLimitsResponse_Result" json:"result,omitempty"`
	// Send limits keyed by currency
	SendLimitsByCurrency map[string]*SendLimit `protobuf:"bytes,2,rep,name=send_limits_by_currency,json=sendLimitsByCurrency,proto3" json:"send_limits_by_currency,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Deposit limits
	DepositLimit *DepositLimit `protobuf:"bytes,3,opt,name=deposit_limit,json=depositLimit,proto3" json:"deposit_limit,omitempty"`
	// Micro payment limits keyed by currency
	MicroPaymentLimitsByCurrency map[string]*MicroPaymentLimit `protobuf:"bytes,4,rep,name=micro_payment_limits_by_currency,json=microPaymentLimitsByCurrency,proto3" json:"micro_payment_limits_by_currency,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Buy module limits keyed by currency
	BuyModuleLimitsByCurrency map[string]*BuyModuleLimit `protobuf:"bytes,5,rep,name=buy_module_limits_by_currency,json=buyModuleLimitsByCurrency,proto3" json:"buy_module_limits_by_currency,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetLimitsResponse) Reset() {
	*x = GetLimitsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLimitsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLimitsResponse) ProtoMessage() {}

func (x *GetLimitsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLimitsResponse.ProtoReflect.Descriptor instead.
func (*GetLimitsResponse) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{9}
}

func (x *GetLimitsResponse) GetResult() GetLimitsResponse_Result {
	if x != nil {
		return x.Result
	}
	return GetLimitsResponse_OK
}

func (x *GetLimitsResponse) GetSendLimitsByCurrency() map[string]*SendLimit {
	if x != nil {
		return x.SendLimitsByCurrency
	}
	return nil
}

func (x *GetLimitsResponse) GetDepositLimit() *DepositLimit {
	if x != nil {
		return x.DepositLimit
	}
	return nil
}

func (x *GetLimitsResponse) GetMicroPaymentLimitsByCurrency() map[string]*MicroPaymentLimit {
	if x != nil {
		return x.MicroPaymentLimitsByCurrency
	}
	return nil
}

func (x *GetLimitsResponse) GetBuyModuleLimitsByCurrency() map[string]*BuyModuleLimit {
	if x != nil {
		return x.BuyModuleLimitsByCurrency
	}
	return nil
}

type GetPaymentHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The owner account to get payment history for
	Owner *v1.SolanaAccountId `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	// An optional history cursor indicating where in the history to resume from.
	Cursor *Cursor `protobuf:"bytes,2,opt,name=cursor,proto3" json:"cursor,omitempty"`
	// The number of results to return per request. Default is 100.
	PageSize uint32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// The order in which to return history items from the cursor.
	Direction GetPaymentHistoryRequest_Direction `protobuf:"varint,4,opt,name=direction,proto3,enum=code.transaction.v2.GetPaymentHistoryRequest_Direction" json:"direction,omitempty"`
	// The signature is of serialize(GetPaymentHistoryRequest) without this field set
	// using the private key of the owner account. This provides an authentication
	// mechanism to the RPC.
	Signature *v1.Signature `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *GetPaymentHistoryRequest) Reset() {
	*x = GetPaymentHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPaymentHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPaymentHistoryRequest) ProtoMessage() {}

func (x *GetPaymentHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPaymentHistoryRequest.ProtoReflect.Descriptor instead.
func (*GetPaymentHistoryRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{10}
}

func (x *GetPaymentHistoryRequest) GetOwner() *v1.SolanaAccountId {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *GetPaymentHistoryRequest) GetCursor() *Cursor {
	if x != nil {
		return x.Cursor
	}
	return nil
}

func (x *GetPaymentHistoryRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetPaymentHistoryRequest) GetDirection() GetPaymentHistoryRequest_Direction {
	if x != nil {
		return x.Direction
	}
	return GetPaymentHistoryRequest_ASC
}

func (x *GetPaymentHistoryRequest) GetSignature() *v1.Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type GetPaymentHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result GetPaymentHistoryResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=code.transaction.v2.GetPaymentHistoryResponse_Result" json:"result,omitempty"`
	Items  []*PaymentHistoryItem            `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *GetPaymentHistoryResponse) Reset() {
	*x = GetPaymentHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPaymentHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPaymentHistoryResponse) ProtoMessage() {}

func (x *GetPaymentHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPaymentHistoryResponse.ProtoReflect.Descriptor instead.
func (*GetPaymentHistoryResponse) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{11}
}

func (x *GetPaymentHistoryResponse) GetResult() GetPaymentHistoryResponse_Result {
	if x != nil {
		return x.Result
	}
	return GetPaymentHistoryResponse_OK
}

func (x *GetPaymentHistoryResponse) GetItems() []*PaymentHistoryItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type CanWithdrawToAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account *v1.SolanaAccountId `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
}

func (x *CanWithdrawToAccountRequest) Reset() {
	*x = CanWithdrawToAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CanWithdrawToAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CanWithdrawToAccountRequest) ProtoMessage() {}

func (x *CanWithdrawToAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CanWithdrawToAccountRequest.ProtoReflect.Descriptor instead.
func (*CanWithdrawToAccountRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{12}
}

func (x *CanWithdrawToAccountRequest) GetAccount() *v1.SolanaAccountId {
	if x != nil {
		return x.Account
	}
	return nil
}

type CanWithdrawToAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Metadata so the client knows how to withdraw to the account. Server cannot
	// provide precalculated addresses in this response to maintain non-custodial
	// status.
	AccountType CanWithdrawToAccountResponse_AccountType `protobuf:"varint,2,opt,name=account_type,json=accountType,proto3,enum=code.transaction.v2.CanWithdrawToAccountResponse_AccountType" json:"account_type,omitempty"`
	// Server-controlled flag to indicate if the account can be withdrawn to.
	// There are several reasons server may deny it, including:
	//   - Wrong type of Code account
	//   - Not wanting to subsidize the creation of an ATA
	//   - Unsupported external account type (eg. token account but of the wrong mint)
	//
	// This is guaranteed to be false when account_type = Unknown.
	IsValidPaymentDestination bool `protobuf:"varint,1,opt,name=is_valid_payment_destination,json=isValidPaymentDestination,proto3" json:"is_valid_payment_destination,omitempty"`
	// Token account requires initialization before the withdrawal can occur.
	// Server has chosen not to subsidize the fees. The response is guaranteed
	// to have set is_valid_payment_destination = false in this case.
	RequiresInitialization bool `protobuf:"varint,3,opt,name=requires_initialization,json=requiresInitialization,proto3" json:"requires_initialization,omitempty"`
}

func (x *CanWithdrawToAccountResponse) Reset() {
	*x = CanWithdrawToAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CanWithdrawToAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CanWithdrawToAccountResponse) ProtoMessage() {}

func (x *CanWithdrawToAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CanWithdrawToAccountResponse.ProtoReflect.Descriptor instead.
func (*CanWithdrawToAccountResponse) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{13}
}

func (x *CanWithdrawToAccountResponse) GetAccountType() CanWithdrawToAccountResponse_AccountType {
	if x != nil {
		return x.AccountType
	}
	return CanWithdrawToAccountResponse_Unknown
}

func (x *CanWithdrawToAccountResponse) GetIsValidPaymentDestination() bool {
	if x != nil {
		return x.IsValidPaymentDestination
	}
	return false
}

func (x *CanWithdrawToAccountResponse) GetRequiresInitialization() bool {
	if x != nil {
		return x.RequiresInitialization
	}
	return false
}

type AirdropRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of airdrop to claim
	AirdropType AirdropType `protobuf:"varint,1,opt,name=airdrop_type,json=airdropType,proto3,enum=code.transaction.v2.AirdropType" json:"airdrop_type,omitempty"`
	// The owner account to airdrop Kin to
	Owner *v1.SolanaAccountId `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	// The signature is of serialize(AirdropRequest) without this field set
	// using the private key of the owner account. This provides an authentication
	// mechanism to the RPC.
	Signature *v1.Signature `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *AirdropRequest) Reset() {
	*x = AirdropRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AirdropRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AirdropRequest) ProtoMessage() {}

func (x *AirdropRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AirdropRequest.ProtoReflect.Descriptor instead.
func (*AirdropRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{14}
}

func (x *AirdropRequest) GetAirdropType() AirdropType {
	if x != nil {
		return x.AirdropType
	}
	return AirdropType_UNKNOWN
}

func (x *AirdropRequest) GetOwner() *v1.SolanaAccountId {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *AirdropRequest) GetSignature() *v1.Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type AirdropResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result AirdropResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=code.transaction.v2.AirdropResponse_Result" json:"result,omitempty"`
	// Exchange data for the amount of Kin airdropped when successful
	ExchangeData *ExchangeData `protobuf:"bytes,2,opt,name=exchange_data,json=exchangeData,proto3" json:"exchange_data,omitempty"`
}

func (x *AirdropResponse) Reset() {
	*x = AirdropResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AirdropResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AirdropResponse) ProtoMessage() {}

func (x *AirdropResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AirdropResponse.ProtoReflect.Descriptor instead.
func (*AirdropResponse) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{15}
}

func (x *AirdropResponse) GetResult() AirdropResponse_Result {
	if x != nil {
		return x.Result
	}
	return AirdropResponse_OK
}

func (x *AirdropResponse) GetExchangeData() *ExchangeData {
	if x != nil {
		return x.ExchangeData
	}
	return nil
}

type SwapRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//
	//	*SwapRequest_Initiate_
	//	*SwapRequest_SubmitSignature_
	Request isSwapRequest_Request `protobuf_oneof:"request"`
}

func (x *SwapRequest) Reset() {
	*x = SwapRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapRequest) ProtoMessage() {}

func (x *SwapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapRequest.ProtoReflect.Descriptor instead.
func (*SwapRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{16}
}

func (m *SwapRequest) GetRequest() isSwapRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *SwapRequest) GetInitiate() *SwapRequest_Initiate {
	if x, ok := x.GetRequest().(*SwapRequest_Initiate_); ok {
		return x.Initiate
	}
	return nil
}

func (x *SwapRequest) GetSubmitSignature() *SwapRequest_SubmitSignature {
	if x, ok := x.GetRequest().(*SwapRequest_SubmitSignature_); ok {
		return x.SubmitSignature
	}
	return nil
}

type isSwapRequest_Request interface {
	isSwapRequest_Request()
}

type SwapRequest_Initiate_ struct {
	Initiate *SwapRequest_Initiate `protobuf:"bytes,1,opt,name=initiate,proto3,oneof"`
}

type SwapRequest_SubmitSignature_ struct {
	SubmitSignature *SwapRequest_SubmitSignature `protobuf:"bytes,2,opt,name=submit_signature,json=submitSignature,proto3,oneof"`
}

func (*SwapRequest_Initiate_) isSwapRequest_Request() {}

func (*SwapRequest_SubmitSignature_) isSwapRequest_Request() {}

type SwapResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*SwapResponse_ServerParameters_
	//	*SwapResponse_Success_
	//	*SwapResponse_Error_
	Response isSwapResponse_Response `protobuf_oneof:"response"`
}

func (x *SwapResponse) Reset() {
	*x = SwapResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwapResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapResponse) ProtoMessage() {}

func (x *SwapResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapResponse.ProtoReflect.Descriptor instead.
func (*SwapResponse) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{17}
}

func (m *SwapResponse) GetResponse() isSwapResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *SwapResponse) GetServerParameters() *SwapResponse_ServerParameters {
	if x, ok := x.GetResponse().(*SwapResponse_ServerParameters_); ok {
		return x.ServerParameters
	}
	return nil
}

func (x *SwapResponse) GetSuccess() *SwapResponse_Success {
	if x, ok := x.GetResponse().(*SwapResponse_Success_); ok {
		return x.Success
	}
	return nil
}

func (x *SwapResponse) GetError() *SwapResponse_Error {
	if x, ok := x.GetResponse().(*SwapResponse_Error_); ok {
		return x.Error
	}
	return nil
}

type isSwapResponse_Response interface {
	isSwapResponse_Response()
}

type SwapResponse_ServerParameters_ struct {
	ServerParameters *SwapResponse_ServerParameters `protobuf:"bytes,1,opt,name=server_parameters,json=serverParameters,proto3,oneof"`
}

type SwapResponse_Success_ struct {
	Success *SwapResponse_Success `protobuf:"bytes,2,opt,name=success,proto3,oneof"`
}

type SwapResponse_Error_ struct {
	Error *SwapResponse_Error `protobuf:"bytes,3,opt,name=error,proto3,oneof"`
}

func (*SwapResponse_ServerParameters_) isSwapResponse_Response() {}

func (*SwapResponse_Success_) isSwapResponse_Response() {}

func (*SwapResponse_Error_) isSwapResponse_Response() {}

type DeclareFiatOnrampAttemptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The owner account invoking the buy module
	Owner *v1.SolanaAccountId `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	// The amount being purchased
	PurchaseAmount *ExchangeDataWithoutRate `protobuf:"bytes,2,opt,name=purchase_amount,json=purchaseAmount,proto3" json:"purchase_amount,omitempty"`
	// A nonce value unique to the purchase. If it's included in a memo for the
	// transaction for the deposit to the owner, then purchase_amount will be used
	// for display values. Otherwise, the amount will be inferred from the transaction.
	Nonce *v1.UUID `protobuf:"bytes,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// The signature is of serialize(SomethingRequest) without this field set using the
	// private key of the owner account. This provides an authentication mechanism
	// to the RPC.
	Signature *v1.Signature `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *DeclareFiatOnrampAttemptRequest) Reset() {
	*x = DeclareFiatOnrampAttemptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeclareFiatOnrampAttemptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeclareFiatOnrampAttemptRequest) ProtoMessage() {}

func (x *DeclareFiatOnrampAttemptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeclareFiatOnrampAttemptRequest.ProtoReflect.Descriptor instead.
func (*DeclareFiatOnrampAttemptRequest) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{18}
}

func (x *DeclareFiatOnrampAttemptRequest) GetOwner() *v1.SolanaAccountId {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *DeclareFiatOnrampAttemptRequest) GetPurchaseAmount() *ExchangeDataWithoutRate {
	if x != nil {
		return x.PurchaseAmount
	}
	return nil
}

func (x *DeclareFiatOnrampAttemptRequest) GetNonce() *v1.UUID {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *DeclareFiatOnrampAttemptRequest) GetSignature() *v1.Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type DeclareFiatOnrampAttemptResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result DeclareFiatOnrampAttemptResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=code.transaction.v2.DeclareFiatOnrampAttemptResponse_Result" json:"result,omitempty"`
}

func (x *DeclareFiatOnrampAttemptResponse) Reset() {
	*x = DeclareFiatOnrampAttemptResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeclareFiatOnrampAttemptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeclareFiatOnrampAttemptResponse) ProtoMessage() {}

func (x *DeclareFiatOnrampAttemptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeclareFiatOnrampAttemptResponse.ProtoReflect.Descriptor instead.
func (*DeclareFiatOnrampAttemptResponse) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{19}
}

func (x *DeclareFiatOnrampAttemptResponse) GetResult() DeclareFiatOnrampAttemptResponse_Result {
	if x != nil {
		return x.Result
	}
	return DeclareFiatOnrampAttemptResponse_OK
}

// Metadata describes the high-level details of an intent
type Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*Metadata_OpenAccounts
	//	*Metadata_SendPrivatePayment
	//	*Metadata_ReceivePaymentsPrivately
	//	*Metadata_UpgradePrivacy
	//	*Metadata_MigrateToPrivacy_2022
	//	*Metadata_SendPublicPayment
	//	*Metadata_ReceivePaymentsPublicly
	//	*Metadata_EstablishRelationship
	Type isMetadata_Type `protobuf_oneof:"type"`
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{20}
}

func (m *Metadata) GetType() isMetadata_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *Metadata) GetOpenAccounts() *OpenAccountsMetadata {
	if x, ok := x.GetType().(*Metadata_OpenAccounts); ok {
		return x.OpenAccounts
	}
	return nil
}

func (x *Metadata) GetSendPrivatePayment() *SendPrivatePaymentMetadata {
	if x, ok := x.GetType().(*Metadata_SendPrivatePayment); ok {
		return x.SendPrivatePayment
	}
	return nil
}

func (x *Metadata) GetReceivePaymentsPrivately() *ReceivePaymentsPrivatelyMetadata {
	if x, ok := x.GetType().(*Metadata_ReceivePaymentsPrivately); ok {
		return x.ReceivePaymentsPrivately
	}
	return nil
}

func (x *Metadata) GetUpgradePrivacy() *UpgradePrivacyMetadata {
	if x, ok := x.GetType().(*Metadata_UpgradePrivacy); ok {
		return x.UpgradePrivacy
	}
	return nil
}

func (x *Metadata) GetMigrateToPrivacy_2022() *MigrateToPrivacy2022Metadata {
	if x, ok := x.GetType().(*Metadata_MigrateToPrivacy_2022); ok {
		return x.MigrateToPrivacy_2022
	}
	return nil
}

func (x *Metadata) GetSendPublicPayment() *SendPublicPaymentMetadata {
	if x, ok := x.GetType().(*Metadata_SendPublicPayment); ok {
		return x.SendPublicPayment
	}
	return nil
}

func (x *Metadata) GetReceivePaymentsPublicly() *ReceivePaymentsPubliclyMetadata {
	if x, ok := x.GetType().(*Metadata_ReceivePaymentsPublicly); ok {
		return x.ReceivePaymentsPublicly
	}
	return nil
}

func (x *Metadata) GetEstablishRelationship() *EstablishRelationshipMetadata {
	if x, ok := x.GetType().(*Metadata_EstablishRelationship); ok {
		return x.EstablishRelationship
	}
	return nil
}

type isMetadata_Type interface {
	isMetadata_Type()
}

type Metadata_OpenAccounts struct {
	OpenAccounts *OpenAccountsMetadata `protobuf:"bytes,1,opt,name=open_accounts,json=openAccounts,proto3,oneof"`
}

type Metadata_SendPrivatePayment struct {
	SendPrivatePayment *SendPrivatePaymentMetadata `protobuf:"bytes,2,opt,name=send_private_payment,json=sendPrivatePayment,proto3,oneof"`
}

type Metadata_ReceivePaymentsPrivately struct {
	ReceivePaymentsPrivately *ReceivePaymentsPrivatelyMetadata `protobuf:"bytes,3,opt,name=receive_payments_privately,json=receivePaymentsPrivately,proto3,oneof"`
}

type Metadata_UpgradePrivacy struct {
	UpgradePrivacy *UpgradePrivacyMetadata `protobuf:"bytes,4,opt,name=upgrade_privacy,json=upgradePrivacy,proto3,oneof"`
}

type Metadata_MigrateToPrivacy_2022 struct {
	MigrateToPrivacy_2022 *MigrateToPrivacy2022Metadata `protobuf:"bytes,5,opt,name=migrate_to_privacy_2022,json=migrateToPrivacy2022,proto3,oneof"`
}

type Metadata_SendPublicPayment struct {
	SendPublicPayment *SendPublicPaymentMetadata `protobuf:"bytes,6,opt,name=send_public_payment,json=sendPublicPayment,proto3,oneof"`
}

type Metadata_ReceivePaymentsPublicly struct {
	ReceivePaymentsPublicly *ReceivePaymentsPubliclyMetadata `protobuf:"bytes,7,opt,name=receive_payments_publicly,json=receivePaymentsPublicly,proto3,oneof"`
}

type Metadata_EstablishRelationship struct {
	EstablishRelationship *EstablishRelationshipMetadata `protobuf:"bytes,8,opt,name=establish_relationship,json=establishRelationship,proto3,oneof"`
}

func (*Metadata_OpenAccounts) isMetadata_Type() {}

func (*Metadata_SendPrivatePayment) isMetadata_Type() {}

func (*Metadata_ReceivePaymentsPrivately) isMetadata_Type() {}

func (*Metadata_UpgradePrivacy) isMetadata_Type() {}

func (*Metadata_MigrateToPrivacy_2022) isMetadata_Type() {}

func (*Metadata_SendPublicPayment) isMetadata_Type() {}

func (*Metadata_ReceivePaymentsPublicly) isMetadata_Type() {}

func (*Metadata_EstablishRelationship) isMetadata_Type() {}

// Open a set of accounts. Currently, clients should only use this for new users
// to open all required accounts up front (buckets, incoming, and outgoing).
//
// Action Spec:
//
// actions = [OpenAccountAction(PRIMARY)]
// for account in [TEMPORARY_INCOMING, TEMPORARY_OUTGOING, BUCKET_1_KIN, ... , BUCKET_1_000_000_KIN]
//
//	actions.push_back(OpenAccountAction(account))
//	actions.push_back(CloseDormantAccount(account))
type OpenAccountsMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OpenAccountsMetadata) Reset() {
	*x = OpenAccountsMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenAccountsMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenAccountsMetadata) ProtoMessage() {}

func (x *OpenAccountsMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenAccountsMetadata.ProtoReflect.Descriptor instead.
func (*OpenAccountsMetadata) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{21}
}

// Sends a payment to a destination account with initial temporary privacy. Clients
// should also reorganize their bucket accounts and rotate their temporary outgoing
// account.
//
// Action Spec (In Person Cash Payment or Withdrawal):
//
// actions = [
//
//	// Section 1: Transfer ExchangeData.Quarks from BUCKET_X_KIN accounts to TEMPORARY_OUTGOING account with reogranizations
//
//	TemporaryPrivacyExchangeAction(BUCKET_X_KIN, BUCKET_X_KIN, multiple * bucketSize),
//	TemporaryPrivacyTransferAction(BUCKET_X_KIN, TEMPORARY_OUTGOING[index], multiple * bucketSize),
//	...,
//	TemporaryPrivacyExchangeAction(BUCKET_X_KIN, BUCKET_X_KIN, multiple * bucketSize),
//	TemporaryPrivacyTransferAction(BUCKET_X_KIN, TEMPORARY_OUTGOING[index], multiple * bucketSize),
//
//	// Section 2: Rotate TEMPORARY_OUTGOING account
//
//	// Below must appear last in this exact order
//	NoPrivacyWithdrawAction(TEMPORARY_OUTGOING[index], destination, ExchangeData.Quarks),
//	OpenAccountAction(TEMPORARY_OUTGOING[index + 1]),
//	CloseDormantAccount(TEMPORARY_OUTGOING[index + 1]),
//
// ]
//
// Action Spec (Remote Send):
//
// actions = [
//
//	// Section 1: Open REMOTE_SEND_GIFT_CARD account
//
//	OpenAccountAction(REMOTE_SEND_GIFT_CARD),
//
//	// Section 2: Transfer ExchangeData.Quarks from BUCKET_X_KIN accounts to TEMPORARY_OUTGOING account with reogranizations
//
//	TemporaryPrivacyExchangeAction(BUCKET_X_KIN, BUCKET_X_KIN, multiple * bucketSize),
//	TemporaryPrivacyTransferAction(BUCKET_X_KIN, TEMPORARY_OUTGOING[index], multiple * bucketSize),
//	...,
//	TemporaryPrivacyExchangeAction(BUCKET_X_KIN, BUCKET_X_KIN, multiple * bucketSize),
//	TemporaryPrivacyTransferAction(BUCKET_X_KIN, TEMPORARY_OUTGOING[index], multiple * bucketSize),
//
//	// Section 3: Rotate TEMPORARY_OUTGOING account
//
//	// Below must appear last in this exact order
//	NoPrivacyWithdrawAction(TEMPORARY_OUTGOING[index], REMOTE_SEND_GIFT_CARD, ExchangeData.Quarks),
//	OpenAccountAction(TEMPORARY_OUTGOING[index + 1]),
//	CloseDormantAccount(TEMPORARY_OUTGOING[index + 1]),
//
//	// Section 4: Close REMOTE_SEND_GIFT_CARD if not redeemed after period of time
//
//	CloseDormantAccount(REMOTE_SEND_GIFT_CARD),
//
// Action Spec (Micro Payment):
//
// actions = [
//
//	// Section 1: Transfer ExchangeData.Quarks from BUCKET_X_KIN accounts to TEMPORARY_OUTGOING account with reogranizations
//
//	TemporaryPrivacyExchangeAction(BUCKET_X_KIN, BUCKET_X_KIN, multiple * bucketSize),
//	TemporaryPrivacyTransferAction(BUCKET_X_KIN, TEMPORARY_OUTGOING[index], multiple * bucketSize),
//	...,
//	TemporaryPrivacyExchangeAction(BUCKET_X_KIN, BUCKET_X_KIN, multiple * bucketSize),
//	TemporaryPrivacyTransferAction(BUCKET_X_KIN, TEMPORARY_OUTGOING[index], multiple * bucketSize),
//
//	// Section 2: Fee payments
//
//	// Hard-coded Code $0.01 USD fee to a dynamic fee account
//	FeePayment(TEMPORARY_OUTGOING[index], codeFeeAccount, $0.01 USD of Kin),
//
//	// Additional fees, exactly as specified in the original payment request
//	FeePayment(TEMPORARY_OUTGOING[index], additionalFeeAccount0, additionalFeeQuarks0),
//	...
//	FeePayment(TEMPORARY_OUTGOING[index], additionalFeeAccountN, additionalFeeQuarksN),
//
//	// Section 3: Rotate TEMPORARY_OUTGOING account
//
//	// Below must appear last in this exact order
//	NoPrivacyWithdrawAction(TEMPORARY_OUTGOING[index], destination, ExchangeData.Quarks - $0.01 USD of Kin - additionalFeeQuarks0 - ... - additionalFeeQuarksN),
//	OpenAccountAction(TEMPORARY_OUTGOING[index + 1]),
//	CloseDormantAccount(TEMPORARY_OUTGOING[index + 1]),
//
// ]
type SendPrivatePaymentMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The destination token account to send funds to
	Destination *v1.SolanaAccountId `protobuf:"bytes,1,opt,name=destination,proto3" json:"destination,omitempty"`
	// The exchange data of total funds being sent to the destination
	ExchangeData *ExchangeData `protobuf:"bytes,2,opt,name=exchange_data,json=exchangeData,proto3" json:"exchange_data,omitempty"`
	// Is the payment a withdrawal? For destinations that are not Code temporary
	// accounts, this must be set to true.
	IsWithdrawal bool `protobuf:"varint,3,opt,name=is_withdrawal,json=isWithdrawal,proto3" json:"is_withdrawal,omitempty"`
	// Is the payment for a remote send?
	IsRemoteSend bool `protobuf:"varint,4,opt,name=is_remote_send,json=isRemoteSend,proto3" json:"is_remote_send,omitempty"`
}

func (x *SendPrivatePaymentMetadata) Reset() {
	*x = SendPrivatePaymentMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendPrivatePaymentMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendPrivatePaymentMetadata) ProtoMessage() {}

func (x *SendPrivatePaymentMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendPrivatePaymentMetadata.ProtoReflect.Descriptor instead.
func (*SendPrivatePaymentMetadata) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{22}
}

func (x *SendPrivatePaymentMetadata) GetDestination() *v1.SolanaAccountId {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *SendPrivatePaymentMetadata) GetExchangeData() *ExchangeData {
	if x != nil {
		return x.ExchangeData
	}
	return nil
}

func (x *SendPrivatePaymentMetadata) GetIsWithdrawal() bool {
	if x != nil {
		return x.IsWithdrawal
	}
	return false
}

func (x *SendPrivatePaymentMetadata) GetIsRemoteSend() bool {
	if x != nil {
		return x.IsRemoteSend
	}
	return false
}

// Send a payment to a destination account publicly.
//
// Action Spec:
//
// source = PRIMARY or RELATIONSHIP
// actions = [NoPrivacyTransferAction(source, destination, ExchangeData.Quarks)]
type SendPublicPaymentMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The primary or relatinship account where funds will be sent from. The primary
	// account is assumed if this field is not set for backwards compatibility with
	// old clients.
	Source *v1.SolanaAccountId `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
	// The destination token account to send funds to. This cannot be a Code
	// temporary account.
	Destination *v1.SolanaAccountId `protobuf:"bytes,1,opt,name=destination,proto3" json:"destination,omitempty"`
	// The exchange data of total funds being sent to the destination
	ExchangeData *ExchangeData `protobuf:"bytes,2,opt,name=exchange_data,json=exchangeData,proto3" json:"exchange_data,omitempty"`
	// Is the payment a withdrawal? Currently, this is always true.
	IsWithdrawal bool `protobuf:"varint,3,opt,name=is_withdrawal,json=isWithdrawal,proto3" json:"is_withdrawal,omitempty"`
}

func (x *SendPublicPaymentMetadata) Reset() {
	*x = SendPublicPaymentMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendPublicPaymentMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendPublicPaymentMetadata) ProtoMessage() {}

func (x *SendPublicPaymentMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendPublicPaymentMetadata.ProtoReflect.Descriptor instead.
func (*SendPublicPaymentMetadata) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{23}
}

func (x *SendPublicPaymentMetadata) GetSource() *v1.SolanaAccountId {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *SendPublicPaymentMetadata) GetDestination() *v1.SolanaAccountId {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *SendPublicPaymentMetadata) GetExchangeData() *ExchangeData {
	if x != nil {
		return x.ExchangeData
	}
	return nil
}

func (x *SendPublicPaymentMetadata) GetIsWithdrawal() bool {
	if x != nil {
		return x.IsWithdrawal
	}
	return false
}

// Receive funds into an organizer with initial temporary privacy. Clients should
// also reorganize their bucket accounts and rotate their temporary incoming account
// as applicable. Only accounts owned and derived by a user's 12 words should operate
// as a source in this intent type to guarantee privacy upgradeability.
//
// Action Spec (Payment):
//
// actions = [
//
//	// Section 1: Transfer Quarks from TEMPORARY_INCOMING account to BUCKET_X_KIN accounts with reorganizations
//
//	TemporaryPrivacyTransferAction(TEMPORARY_INCOMING[index], BUCKET_X_KIN, multiple * bucketSize),
//	TemporaryPrivacyExchangeAction(BUCKET_X_KIN, BUCKET_X_KIN, multiple * bucketSize),
//	...,
//	TemporaryPrivacyTransferAction(TEMPORARY_INCOMING[index], BUCKET_X_KIN, multiple * bucketSize),
//	TemporaryPrivacyExchangeAction(BUCKET_X_KIN, BUCKET_X_KIN, multiple * bucketSize),
//
//	// Section 2: Rotate TEMPORARY_INCOMING account
//
//	// Below must appear last in this exact order
//	CloseEmptyAccountAction(TEMPORARY_INCOMING[index]),
//	OpenAccountAction(TEMPORARY_INCOMING[index + 1])
//	CloseDormantAccount(TEMPORARY_INCOMING[index + 1]),
//
// ]
//
// Action Spec (Deposit):
//
// source = PRIMARY or RELATIONSHIP
// actions = [
//
//	TemporaryPrivacyTransferAction(source, BUCKET_X_KIN, multiple * bucketSize),
//	TemporaryPrivacyExchangeAction(BUCKET_X_KIN, BUCKET_X_KIN, multiple * bucketSize),
//	...,
//	TemporaryPrivacyTransferAction(source, BUCKET_X_KIN, multiple * bucketSize),
//	TemporaryPrivacyExchangeAction(BUCKET_X_KIN, BUCKET_X_KIN, multiple * bucketSize),
//
// ]
type ReceivePaymentsPrivatelyMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The temporary incoming, primary or relationship account to receive funds from
	Source *v1.SolanaAccountId `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	// The exact amount of Kin in quarks being received
	Quarks uint64 `protobuf:"varint,2,opt,name=quarks,proto3" json:"quarks,omitempty"`
	// Is the receipt of funds from a deposit? If true, the source account must
	// be a primary or relationship account. Otherwise, it must be from a temporary
	// incoming account.
	IsDeposit bool `protobuf:"varint,3,opt,name=is_deposit,json=isDeposit,proto3" json:"is_deposit,omitempty"`
}

func (x *ReceivePaymentsPrivatelyMetadata) Reset() {
	*x = ReceivePaymentsPrivatelyMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceivePaymentsPrivatelyMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceivePaymentsPrivatelyMetadata) ProtoMessage() {}

func (x *ReceivePaymentsPrivatelyMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceivePaymentsPrivatelyMetadata.ProtoReflect.Descriptor instead.
func (*ReceivePaymentsPrivatelyMetadata) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{24}
}

func (x *ReceivePaymentsPrivatelyMetadata) GetSource() *v1.SolanaAccountId {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *ReceivePaymentsPrivatelyMetadata) GetQuarks() uint64 {
	if x != nil {
		return x.Quarks
	}
	return 0
}

func (x *ReceivePaymentsPrivatelyMetadata) GetIsDeposit() bool {
	if x != nil {
		return x.IsDeposit
	}
	return false
}

// Receive funds into a user-owned account publicly. All use cases of this intent
// close the account, so all funds must be moved. Use this intent to receive payments
// from an account not owned by a user's 12 words into a temporary incoming account,
// which will guarantee privacy upgradeability.
//
// Action Spec (Remote Send):
//
// actions = [NoPrivacyWithdrawAction(REMOTE_SEND_GIFT_CARD, TEMPORARY_INCOMING[latest_index], quarks)]
type ReceivePaymentsPubliclyMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The remote send gift card to receive funds from
	Source *v1.SolanaAccountId `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	// The exact amount of Kin in quarks being received
	Quarks uint64 `protobuf:"varint,2,opt,name=quarks,proto3" json:"quarks,omitempty"`
	// Is the receipt of funds from a remote send gift card? Currently, this is
	// the only use case for this intent and validation enforces the flag to true.
	IsRemoteSend bool `protobuf:"varint,3,opt,name=is_remote_send,json=isRemoteSend,proto3" json:"is_remote_send,omitempty"`
	// If is_remote_send is true, is the gift card being voided? The user owner
	// account's 12 words that issued the gift card may only set this flag to true.
	// Functionally, this doesn't affect the intent, but rather if we decide to show
	// it in a user-friendly payment history.
	IsIssuerVoidingGiftCard bool `protobuf:"varint,4,opt,name=is_issuer_voiding_gift_card,json=isIssuerVoidingGiftCard,proto3" json:"is_issuer_voiding_gift_card,omitempty"`
	// If is_remote_send is true, the original exchange data that was provided as
	// part of creating the gift card account. This is purely a server-provided value.
	// SubmitIntent will disallow this being set.
	ExchangeData *ExchangeData `protobuf:"bytes,5,opt,name=exchange_data,json=exchangeData,proto3" json:"exchange_data,omitempty"`
}

func (x *ReceivePaymentsPubliclyMetadata) Reset() {
	*x = ReceivePaymentsPubliclyMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceivePaymentsPubliclyMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceivePaymentsPubliclyMetadata) ProtoMessage() {}

func (x *ReceivePaymentsPubliclyMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceivePaymentsPubliclyMetadata.ProtoReflect.Descriptor instead.
func (*ReceivePaymentsPubliclyMetadata) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{25}
}

func (x *ReceivePaymentsPubliclyMetadata) GetSource() *v1.SolanaAccountId {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *ReceivePaymentsPubliclyMetadata) GetQuarks() uint64 {
	if x != nil {
		return x.Quarks
	}
	return 0
}

func (x *ReceivePaymentsPubliclyMetadata) GetIsRemoteSend() bool {
	if x != nil {
		return x.IsRemoteSend
	}
	return false
}

func (x *ReceivePaymentsPubliclyMetadata) GetIsIssuerVoidingGiftCard() bool {
	if x != nil {
		return x.IsIssuerVoidingGiftCard
	}
	return false
}

func (x *ReceivePaymentsPubliclyMetadata) GetExchangeData() *ExchangeData {
	if x != nil {
		return x.ExchangeData
	}
	return nil
}

// Upgrade existing private transactions from temporary to permanent privacy.
type UpgradePrivacyMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpgradePrivacyMetadata) Reset() {
	*x = UpgradePrivacyMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradePrivacyMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradePrivacyMetadata) ProtoMessage() {}

func (x *UpgradePrivacyMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradePrivacyMetadata.ProtoReflect.Descriptor instead.
func (*UpgradePrivacyMetadata) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{26}
}

// Migrates existing users prior to the privacy implementation by:
//  1. If there are funds in the LEGACY_PRIMARY_2022 account, then move them
//     to the new PRIMARY account, so the client can later simulate a deposit
//     by submitting a *separate* ReceivePaymentsPrivately intent.
//  2. Close the LEGACY_PRIMARY_2022 account.
//
// Prereqs:
//   - OpenAccounts intent has been submitted
//
// Action spec:
//
//	if balance == 0 {
//	   actions = [CloseEmptyAccountAction(LEGACY_PRIMARY_2022)]
//	} else {
//
//	   actions = [NoPrivacyWitdraw(LEGACY_PRIMARY_2022, PRIMARY, Quarks)]
//	}
type MigrateToPrivacy2022Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The exact amount of Kin in quarks being migrated. Set this to zero if
	// the account is empty.
	Quarks uint64 `protobuf:"varint,1,opt,name=quarks,proto3" json:"quarks,omitempty"`
}

func (x *MigrateToPrivacy2022Metadata) Reset() {
	*x = MigrateToPrivacy2022Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MigrateToPrivacy2022Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MigrateToPrivacy2022Metadata) ProtoMessage() {}

func (x *MigrateToPrivacy2022Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MigrateToPrivacy2022Metadata.ProtoReflect.Descriptor instead.
func (*MigrateToPrivacy2022Metadata) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{27}
}

func (x *MigrateToPrivacy2022Metadata) GetQuarks() uint64 {
	if x != nil {
		return x.Quarks
	}
	return 0
}

// Establishes a long-lived private relationship between a user and another
// entity.
//
// Prereqs:
//   - OpenAccounts intent has been submitted
//
// Action spec:
//
// actions = [OpenAccountAction(RELATIONSHIP)]
type EstablishRelationshipMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Relationship *v1.Relationship `protobuf:"bytes,1,opt,name=relationship,proto3" json:"relationship,omitempty"`
}

func (x *EstablishRelationshipMetadata) Reset() {
	*x = EstablishRelationshipMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EstablishRelationshipMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EstablishRelationshipMetadata) ProtoMessage() {}

func (x *EstablishRelationshipMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EstablishRelationshipMetadata.ProtoReflect.Descriptor instead.
func (*EstablishRelationshipMetadata) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{28}
}

func (x *EstablishRelationshipMetadata) GetRelationship() *v1.Relationship {
	if x != nil {
		return x.Relationship
	}
	return nil
}

// Action is a well-defined, ordered and small set of transactions for a unit of work
// that the client wants to perform on the blockchain. Clients provide parameters known
// to them in the action.
type Action struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of this action, which is unique within an intent. It must match
	// the index of the action's location in the SubmitAction's actions field.
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The type of action to perform.
	//
	// Types that are assignable to Type:
	//
	//	*Action_OpenAccount
	//	*Action_CloseEmptyAccount
	//	*Action_CloseDormantAccount
	//	*Action_NoPrivacyTransfer
	//	*Action_NoPrivacyWithdraw
	//	*Action_TemporaryPrivacyTransfer
	//	*Action_TemporaryPrivacyExchange
	//	*Action_PermanentPrivacyUpgrade
	//	*Action_FeePayment
	Type isAction_Type `protobuf_oneof:"type"`
}

func (x *Action) Reset() {
	*x = Action{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action) ProtoMessage() {}

func (x *Action) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action.ProtoReflect.Descriptor instead.
func (*Action) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{29}
}

func (x *Action) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (m *Action) GetType() isAction_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *Action) GetOpenAccount() *OpenAccountAction {
	if x, ok := x.GetType().(*Action_OpenAccount); ok {
		return x.OpenAccount
	}
	return nil
}

func (x *Action) GetCloseEmptyAccount() *CloseEmptyAccountAction {
	if x, ok := x.GetType().(*Action_CloseEmptyAccount); ok {
		return x.CloseEmptyAccount
	}
	return nil
}

func (x *Action) GetCloseDormantAccount() *CloseDormantAccountAction {
	if x, ok := x.GetType().(*Action_CloseDormantAccount); ok {
		return x.CloseDormantAccount
	}
	return nil
}

func (x *Action) GetNoPrivacyTransfer() *NoPrivacyTransferAction {
	if x, ok := x.GetType().(*Action_NoPrivacyTransfer); ok {
		return x.NoPrivacyTransfer
	}
	return nil
}

func (x *Action) GetNoPrivacyWithdraw() *NoPrivacyWithdrawAction {
	if x, ok := x.GetType().(*Action_NoPrivacyWithdraw); ok {
		return x.NoPrivacyWithdraw
	}
	return nil
}

func (x *Action) GetTemporaryPrivacyTransfer() *TemporaryPrivacyTransferAction {
	if x, ok := x.GetType().(*Action_TemporaryPrivacyTransfer); ok {
		return x.TemporaryPrivacyTransfer
	}
	return nil
}

func (x *Action) GetTemporaryPrivacyExchange() *TemporaryPrivacyExchangeAction {
	if x, ok := x.GetType().(*Action_TemporaryPrivacyExchange); ok {
		return x.TemporaryPrivacyExchange
	}
	return nil
}

func (x *Action) GetPermanentPrivacyUpgrade() *PermanentPrivacyUpgradeAction {
	if x, ok := x.GetType().(*Action_PermanentPrivacyUpgrade); ok {
		return x.PermanentPrivacyUpgrade
	}
	return nil
}

func (x *Action) GetFeePayment() *FeePaymentAction {
	if x, ok := x.GetType().(*Action_FeePayment); ok {
		return x.FeePayment
	}
	return nil
}

type isAction_Type interface {
	isAction_Type()
}

type Action_OpenAccount struct {
	OpenAccount *OpenAccountAction `protobuf:"bytes,2,opt,name=open_account,json=openAccount,proto3,oneof"`
}

type Action_CloseEmptyAccount struct {
	CloseEmptyAccount *CloseEmptyAccountAction `protobuf:"bytes,3,opt,name=close_empty_account,json=closeEmptyAccount,proto3,oneof"`
}

type Action_CloseDormantAccount struct {
	CloseDormantAccount *CloseDormantAccountAction `protobuf:"bytes,4,opt,name=close_dormant_account,json=closeDormantAccount,proto3,oneof"`
}

type Action_NoPrivacyTransfer struct {
	NoPrivacyTransfer *NoPrivacyTransferAction `protobuf:"bytes,5,opt,name=no_privacy_transfer,json=noPrivacyTransfer,proto3,oneof"`
}

type Action_NoPrivacyWithdraw struct {
	NoPrivacyWithdraw *NoPrivacyWithdrawAction `protobuf:"bytes,6,opt,name=no_privacy_withdraw,json=noPrivacyWithdraw,proto3,oneof"`
}

type Action_TemporaryPrivacyTransfer struct {
	TemporaryPrivacyTransfer *TemporaryPrivacyTransferAction `protobuf:"bytes,7,opt,name=temporary_privacy_transfer,json=temporaryPrivacyTransfer,proto3,oneof"`
}

type Action_TemporaryPrivacyExchange struct {
	TemporaryPrivacyExchange *TemporaryPrivacyExchangeAction `protobuf:"bytes,8,opt,name=temporary_privacy_exchange,json=temporaryPrivacyExchange,proto3,oneof"`
}

type Action_PermanentPrivacyUpgrade struct {
	PermanentPrivacyUpgrade *PermanentPrivacyUpgradeAction `protobuf:"bytes,9,opt,name=permanent_privacy_upgrade,json=permanentPrivacyUpgrade,proto3,oneof"`
}

type Action_FeePayment struct {
	FeePayment *FeePaymentAction `protobuf:"bytes,10,opt,name=fee_payment,json=feePayment,proto3,oneof"`
}

func (*Action_OpenAccount) isAction_Type() {}

func (*Action_CloseEmptyAccount) isAction_Type() {}

func (*Action_CloseDormantAccount) isAction_Type() {}

func (*Action_NoPrivacyTransfer) isAction_Type() {}

func (*Action_NoPrivacyWithdraw) isAction_Type() {}

func (*Action_TemporaryPrivacyTransfer) isAction_Type() {}

func (*Action_TemporaryPrivacyExchange) isAction_Type() {}

func (*Action_PermanentPrivacyUpgrade) isAction_Type() {}

func (*Action_FeePayment) isAction_Type() {}

// Transaction 1
//
//	Instructions:
//	  1. system::AdvanceNonce
//	  2. timelock::Initialize
//	Client Signature Required: No
//
// All OpenAccountActions for non-primary accounts must be followed with an associated
// CloseDormantAccountAction to enable server to perform cleanup.
type OpenAccountAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of account, which will dictate its intended use
	AccountType v1.AccountType `protobuf:"varint,1,opt,name=account_type,json=accountType,proto3,enum=code.common.v1.AccountType" json:"account_type,omitempty"`
	// The owner of the account. For accounts liked to a user's 12 words, this is
	// the verified parent owner account public key. All other account types should
	// set this to the authority value.
	Owner *v1.SolanaAccountId `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	// The index used to for accounts that are derived from owner
	Index uint64 `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	// The public key of the private key that has authority over the opened token account
	Authority *v1.SolanaAccountId `protobuf:"bytes,4,opt,name=authority,proto3" json:"authority,omitempty"`
	// The token account being opened
	Token *v1.SolanaAccountId `protobuf:"bytes,5,opt,name=token,proto3" json:"token,omitempty"`
	// The signature is of serialize(OpenAccountAction) without this field set
	// using the private key of the authority account. This provides a proof
	// of authorization to link authority to owner.
	AuthoritySignature *v1.Signature `protobuf:"bytes,6,opt,name=authority_signature,json=authoritySignature,proto3" json:"authority_signature,omitempty"`
}

func (x *OpenAccountAction) Reset() {
	*x = OpenAccountAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenAccountAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenAccountAction) ProtoMessage() {}

func (x *OpenAccountAction) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenAccountAction.ProtoReflect.Descriptor instead.
func (*OpenAccountAction) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{30}
}

func (x *OpenAccountAction) GetAccountType() v1.AccountType {
	if x != nil {
		return x.AccountType
	}
	return v1.AccountType(0)
}

func (x *OpenAccountAction) GetOwner() *v1.SolanaAccountId {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *OpenAccountAction) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *OpenAccountAction) GetAuthority() *v1.SolanaAccountId {
	if x != nil {
		return x.Authority
	}
	return nil
}

func (x *OpenAccountAction) GetToken() *v1.SolanaAccountId {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *OpenAccountAction) GetAuthoritySignature() *v1.Signature {
	if x != nil {
		return x.AuthoritySignature
	}
	return nil
}

// Transaction 1
//
//	Instructions:
//	  1. system::AdvanceNonce
//	  2. timelock::BurnDustWithAuthority (max 1 Kin)
//	  3. timelock::CloseAccounts
//	Client Signature Required: Yes
type CloseEmptyAccountAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of account being closed
	AccountType v1.AccountType `protobuf:"varint,1,opt,name=account_type,json=accountType,proto3,enum=code.common.v1.AccountType" json:"account_type,omitempty"`
	// The public key of the private key that has authority over the token account
	// that should be closed
	Authority *v1.SolanaAccountId `protobuf:"bytes,2,opt,name=authority,proto3" json:"authority,omitempty"`
	// The token account being closed
	Token *v1.SolanaAccountId `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *CloseEmptyAccountAction) Reset() {
	*x = CloseEmptyAccountAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseEmptyAccountAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseEmptyAccountAction) ProtoMessage() {}

func (x *CloseEmptyAccountAction) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseEmptyAccountAction.ProtoReflect.Descriptor instead.
func (*CloseEmptyAccountAction) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{31}
}

func (x *CloseEmptyAccountAction) GetAccountType() v1.AccountType {
	if x != nil {
		return x.AccountType
	}
	return v1.AccountType(0)
}

func (x *CloseEmptyAccountAction) GetAuthority() *v1.SolanaAccountId {
	if x != nil {
		return x.Authority
	}
	return nil
}

func (x *CloseEmptyAccountAction) GetToken() *v1.SolanaAccountId {
	if x != nil {
		return x.Token
	}
	return nil
}

// Transaction 1
//
//	Instructions:
//	  1. system::AdvanceNonce
//	  2. memo::Memo
//	  3. timelock::RevokeLockWithAuthority
//	  4. timelock::DeactivateLock
//	  5. timelock::Withdraw (token -> primary)
//	  6. timelock::CloseAccounts
//	Client Signature Required: Yes
type CloseDormantAccountAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of account being closed
	AccountType v1.AccountType `protobuf:"varint,1,opt,name=account_type,json=accountType,proto3,enum=code.common.v1.AccountType" json:"account_type,omitempty"`
	// The public key of the private key that has authority over the token account
	// that should be closed
	Authority *v1.SolanaAccountId `protobuf:"bytes,2,opt,name=authority,proto3" json:"authority,omitempty"`
	// The token account being closed
	Token *v1.SolanaAccountId `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	// The destination where funds are withdrawn to
	Destination *v1.SolanaAccountId `protobuf:"bytes,4,opt,name=destination,proto3" json:"destination,omitempty"`
}

func (x *CloseDormantAccountAction) Reset() {
	*x = CloseDormantAccountAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseDormantAccountAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseDormantAccountAction) ProtoMessage() {}

func (x *CloseDormantAccountAction) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseDormantAccountAction.ProtoReflect.Descriptor instead.
func (*CloseDormantAccountAction) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{32}
}

func (x *CloseDormantAccountAction) GetAccountType() v1.AccountType {
	if x != nil {
		return x.AccountType
	}
	return v1.AccountType(0)
}

func (x *CloseDormantAccountAction) GetAuthority() *v1.SolanaAccountId {
	if x != nil {
		return x.Authority
	}
	return nil
}

func (x *CloseDormantAccountAction) GetToken() *v1.SolanaAccountId {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *CloseDormantAccountAction) GetDestination() *v1.SolanaAccountId {
	if x != nil {
		return x.Destination
	}
	return nil
}

// Transaction 1
//
//	Instructions:
//	  1. system::AdvanceNonce
//	  2. memo::Memo
//	  3. timelock::TransferWithAuthority (source -> destination)
//	Client Signature Required: Yes
type NoPrivacyTransferAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The public key of the private key that has authority over source
	Authority *v1.SolanaAccountId `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// The source account where funds are transferred from
	Source *v1.SolanaAccountId `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	// The destination account where funds are transferred to
	Destination *v1.SolanaAccountId `protobuf:"bytes,3,opt,name=destination,proto3" json:"destination,omitempty"`
	// The Kin quark amount to transfer
	Amount uint64 `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *NoPrivacyTransferAction) Reset() {
	*x = NoPrivacyTransferAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoPrivacyTransferAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoPrivacyTransferAction) ProtoMessage() {}

func (x *NoPrivacyTransferAction) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoPrivacyTransferAction.ProtoReflect.Descriptor instead.
func (*NoPrivacyTransferAction) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{33}
}

func (x *NoPrivacyTransferAction) GetAuthority() *v1.SolanaAccountId {
	if x != nil {
		return x.Authority
	}
	return nil
}

func (x *NoPrivacyTransferAction) GetSource() *v1.SolanaAccountId {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *NoPrivacyTransferAction) GetDestination() *v1.SolanaAccountId {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *NoPrivacyTransferAction) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

// Transaction 1
//
//	Instructions:
//	  1. system::AdvanceNonce
//	  2. memo::Memo
//	  3. timelock::RevokeLockWithAuthority
//	  4. timelock::DeactivateLock
//	  5. timelock::Withdraw (source -> destination)
//	  6. timelock::CloseAccounts
//	Client Signature Required: Yes
type NoPrivacyWithdrawAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The public key of the private key that has authority over source
	Authority *v1.SolanaAccountId `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// The source account where funds are transferred from
	Source *v1.SolanaAccountId `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	// The destination account where funds are transferred to
	Destination *v1.SolanaAccountId `protobuf:"bytes,3,opt,name=destination,proto3" json:"destination,omitempty"`
	// The intended Kin quark amount to withdraw
	Amount uint64 `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	// Whether the account is closed afterwards. This is always true, since there
	// are no current se cases to leave it open.
	ShouldClose bool `protobuf:"varint,5,opt,name=should_close,json=shouldClose,proto3" json:"should_close,omitempty"`
}

func (x *NoPrivacyWithdrawAction) Reset() {
	*x = NoPrivacyWithdrawAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoPrivacyWithdrawAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoPrivacyWithdrawAction) ProtoMessage() {}

func (x *NoPrivacyWithdrawAction) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoPrivacyWithdrawAction.ProtoReflect.Descriptor instead.
func (*NoPrivacyWithdrawAction) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{34}
}

func (x *NoPrivacyWithdrawAction) GetAuthority() *v1.SolanaAccountId {
	if x != nil {
		return x.Authority
	}
	return nil
}

func (x *NoPrivacyWithdrawAction) GetSource() *v1.SolanaAccountId {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *NoPrivacyWithdrawAction) GetDestination() *v1.SolanaAccountId {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *NoPrivacyWithdrawAction) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *NoPrivacyWithdrawAction) GetShouldClose() bool {
	if x != nil {
		return x.ShouldClose
	}
	return false
}

// Transaction 1
//
//	Instructions:
//	  1. system::AdvanceNonce
//	  2. memo::Memo
//	  3. splitter::TransferWithCommitment (treasury -> destination)
//	Client Signature Required: No
//
// Transaction 2
//
//	Instructions:
//	  1. system::AdvanceNonce
//	  2. memo::Memo
//	  3. timelock::TransferWithAuthority (source -> commitment)
//	Client Signature Required: Yes
type TemporaryPrivacyTransferAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The public key of the private key that has authority over source
	Authority *v1.SolanaAccountId `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// The source account where funds are transferred from
	Source *v1.SolanaAccountId `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	// The destination account where funds are transferred to
	Destination *v1.SolanaAccountId `protobuf:"bytes,3,opt,name=destination,proto3" json:"destination,omitempty"`
	// The Kin quark amount to transfer
	Amount uint64 `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *TemporaryPrivacyTransferAction) Reset() {
	*x = TemporaryPrivacyTransferAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemporaryPrivacyTransferAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemporaryPrivacyTransferAction) ProtoMessage() {}

func (x *TemporaryPrivacyTransferAction) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemporaryPrivacyTransferAction.ProtoReflect.Descriptor instead.
func (*TemporaryPrivacyTransferAction) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{35}
}

func (x *TemporaryPrivacyTransferAction) GetAuthority() *v1.SolanaAccountId {
	if x != nil {
		return x.Authority
	}
	return nil
}

func (x *TemporaryPrivacyTransferAction) GetSource() *v1.SolanaAccountId {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *TemporaryPrivacyTransferAction) GetDestination() *v1.SolanaAccountId {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *TemporaryPrivacyTransferAction) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

// Transaction 1
//
//	Instructions:
//	  1. system::AdvanceNonce
//	  2. memo::Memo
//	  3. splitter::TransferWithCommitment (treasury -> destination)
//	Client Signature Required: No
//
// Transaction 2
//
//	Instructions:
//	  1. system::AdvanceNonce
//	  2. memo::Memo
//	  3. timelock::TransferWithAuthority (source -> commitment)
//	Client Signature Required: Yes
type TemporaryPrivacyExchangeAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The public key of the private key that has authority over source
	Authority *v1.SolanaAccountId `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// The source account where funds are exchanged from
	Source *v1.SolanaAccountId `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	// The destination account where funds are exchanged to
	Destination *v1.SolanaAccountId `protobuf:"bytes,3,opt,name=destination,proto3" json:"destination,omitempty"`
	// The Kin quark amount to exchange
	Amount uint64 `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *TemporaryPrivacyExchangeAction) Reset() {
	*x = TemporaryPrivacyExchangeAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemporaryPrivacyExchangeAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemporaryPrivacyExchangeAction) ProtoMessage() {}

func (x *TemporaryPrivacyExchangeAction) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemporaryPrivacyExchangeAction.ProtoReflect.Descriptor instead.
func (*TemporaryPrivacyExchangeAction) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{36}
}

func (x *TemporaryPrivacyExchangeAction) GetAuthority() *v1.SolanaAccountId {
	if x != nil {
		return x.Authority
	}
	return nil
}

func (x *TemporaryPrivacyExchangeAction) GetSource() *v1.SolanaAccountId {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *TemporaryPrivacyExchangeAction) GetDestination() *v1.SolanaAccountId {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *TemporaryPrivacyExchangeAction) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

// Transaction 1
//
//	Instructions:
//	  1. system::AdvanceNonce
//	  2. memo::Memo
//	  3. timelock::TransferWithAuthority (source -> different commitment)
//	Client Signature Required: Yes
type PermanentPrivacyUpgradeAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The action ID of the temporary private transfer or exchange to upgrade
	ActionId uint32 `protobuf:"varint,1,opt,name=action_id,json=actionId,proto3" json:"action_id,omitempty"`
}

func (x *PermanentPrivacyUpgradeAction) Reset() {
	*x = PermanentPrivacyUpgradeAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermanentPrivacyUpgradeAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermanentPrivacyUpgradeAction) ProtoMessage() {}

func (x *PermanentPrivacyUpgradeAction) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermanentPrivacyUpgradeAction.ProtoReflect.Descriptor instead.
func (*PermanentPrivacyUpgradeAction) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{37}
}

func (x *PermanentPrivacyUpgradeAction) GetActionId() uint32 {
	if x != nil {
		return x.ActionId
	}
	return 0
}

// Transaction 1
//
//	Instructions:
//	  1. system::AdvanceNonce
//	  2. memo::Memo
//	  3. timelock::TransferWithAuthority (source -> fee account)
//	Client Signature Required: Yes
//
// Note: This is exactly a NoPrivacyTransferAction, but with specialized metadata
//
//	for fees.
type FeePaymentAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of fee being operated on
	Type FeePaymentAction_FeeType `protobuf:"varint,4,opt,name=type,proto3,enum=code.transaction.v2.FeePaymentAction_FeeType" json:"type,omitempty"`
	// The public key of the private key that has authority over source
	Authority *v1.SolanaAccountId `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// The source account where funds are transferred from
	Source *v1.SolanaAccountId `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	// The Kin quark amount to transfer
	Amount uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	// The destination where the fee payment is being made for fees outside of
	// Code.
	Destination *v1.SolanaAccountId `protobuf:"bytes,5,opt,name=destination,proto3" json:"destination,omitempty"`
}

func (x *FeePaymentAction) Reset() {
	*x = FeePaymentAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeePaymentAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeePaymentAction) ProtoMessage() {}

func (x *FeePaymentAction) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeePaymentAction.ProtoReflect.Descriptor instead.
func (*FeePaymentAction) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{38}
}

func (x *FeePaymentAction) GetType() FeePaymentAction_FeeType {
	if x != nil {
		return x.Type
	}
	return FeePaymentAction_CODE
}

func (x *FeePaymentAction) GetAuthority() *v1.SolanaAccountId {
	if x != nil {
		return x.Authority
	}
	return nil
}

func (x *FeePaymentAction) GetSource() *v1.SolanaAccountId {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *FeePaymentAction) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *FeePaymentAction) GetDestination() *v1.SolanaAccountId {
	if x != nil {
		return x.Destination
	}
	return nil
}

// ServerParameter are a set of parameters known and returned by server that
// enables clients to complete transaction construction. Any necessary proofs,
// which are required to be locally verifiable, are also provided to ensure
// safe use in the event of a malicious server.
type ServerParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The action the server parameters belong to
	ActionId uint32 `protobuf:"varint,1,opt,name=action_id,json=actionId,proto3" json:"action_id,omitempty"`
	// The set of nonces used for the action. Server will only provide values
	// for transactions requiring client signatures.
	Nonces []*NoncedTransactionMetadata `protobuf:"bytes,2,rep,name=nonces,proto3" json:"nonces,omitempty"`
	// The type of server parameter which maps to the type of action requested
	//
	// Types that are assignable to Type:
	//
	//	*ServerParameter_OpenAccount
	//	*ServerParameter_CloseEmptyAccount
	//	*ServerParameter_CloseDormantAccount
	//	*ServerParameter_NoPrivacyTransfer
	//	*ServerParameter_NoPrivacyWithdraw
	//	*ServerParameter_TemporaryPrivacyTransfer
	//	*ServerParameter_TemporaryPrivacyExchange
	//	*ServerParameter_PermanentPrivacyUpgrade
	//	*ServerParameter_FeePayment
	Type isServerParameter_Type `protobuf_oneof:"type"`
}

func (x *ServerParameter) Reset() {
	*x = ServerParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerParameter) ProtoMessage() {}

func (x *ServerParameter) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerParameter.ProtoReflect.Descriptor instead.
func (*ServerParameter) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{39}
}

func (x *ServerParameter) GetActionId() uint32 {
	if x != nil {
		return x.ActionId
	}
	return 0
}

func (x *ServerParameter) GetNonces() []*NoncedTransactionMetadata {
	if x != nil {
		return x.Nonces
	}
	return nil
}

func (m *ServerParameter) GetType() isServerParameter_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *ServerParameter) GetOpenAccount() *OpenAccountServerParameter {
	if x, ok := x.GetType().(*ServerParameter_OpenAccount); ok {
		return x.OpenAccount
	}
	return nil
}

func (x *ServerParameter) GetCloseEmptyAccount() *CloseEmptyAccountServerParameter {
	if x, ok := x.GetType().(*ServerParameter_CloseEmptyAccount); ok {
		return x.CloseEmptyAccount
	}
	return nil
}

func (x *ServerParameter) GetCloseDormantAccount() *CloseDormantAccountServerParameter {
	if x, ok := x.GetType().(*ServerParameter_CloseDormantAccount); ok {
		return x.CloseDormantAccount
	}
	return nil
}

func (x *ServerParameter) GetNoPrivacyTransfer() *NoPrivacyTransferServerParameter {
	if x, ok := x.GetType().(*ServerParameter_NoPrivacyTransfer); ok {
		return x.NoPrivacyTransfer
	}
	return nil
}

func (x *ServerParameter) GetNoPrivacyWithdraw() *NoPrivacyWithdrawServerParameter {
	if x, ok := x.GetType().(*ServerParameter_NoPrivacyWithdraw); ok {
		return x.NoPrivacyWithdraw
	}
	return nil
}

func (x *ServerParameter) GetTemporaryPrivacyTransfer() *TemporaryPrivacyTransferServerParameter {
	if x, ok := x.GetType().(*ServerParameter_TemporaryPrivacyTransfer); ok {
		return x.TemporaryPrivacyTransfer
	}
	return nil
}

func (x *ServerParameter) GetTemporaryPrivacyExchange() *TemporaryPrivacyExchangeServerParameter {
	if x, ok := x.GetType().(*ServerParameter_TemporaryPrivacyExchange); ok {
		return x.TemporaryPrivacyExchange
	}
	return nil
}

func (x *ServerParameter) GetPermanentPrivacyUpgrade() *PermanentPrivacyUpgradeServerParameter {
	if x, ok := x.GetType().(*ServerParameter_PermanentPrivacyUpgrade); ok {
		return x.PermanentPrivacyUpgrade
	}
	return nil
}

func (x *ServerParameter) GetFeePayment() *FeePaymentServerParameter {
	if x, ok := x.GetType().(*ServerParameter_FeePayment); ok {
		return x.FeePayment
	}
	return nil
}

type isServerParameter_Type interface {
	isServerParameter_Type()
}

type ServerParameter_OpenAccount struct {
	OpenAccount *OpenAccountServerParameter `protobuf:"bytes,3,opt,name=open_account,json=openAccount,proto3,oneof"`
}

type ServerParameter_CloseEmptyAccount struct {
	CloseEmptyAccount *CloseEmptyAccountServerParameter `protobuf:"bytes,4,opt,name=close_empty_account,json=closeEmptyAccount,proto3,oneof"`
}

type ServerParameter_CloseDormantAccount struct {
	CloseDormantAccount *CloseDormantAccountServerParameter `protobuf:"bytes,5,opt,name=close_dormant_account,json=closeDormantAccount,proto3,oneof"`
}

type ServerParameter_NoPrivacyTransfer struct {
	NoPrivacyTransfer *NoPrivacyTransferServerParameter `protobuf:"bytes,6,opt,name=no_privacy_transfer,json=noPrivacyTransfer,proto3,oneof"`
}

type ServerParameter_NoPrivacyWithdraw struct {
	NoPrivacyWithdraw *NoPrivacyWithdrawServerParameter `protobuf:"bytes,7,opt,name=no_privacy_withdraw,json=noPrivacyWithdraw,proto3,oneof"`
}

type ServerParameter_TemporaryPrivacyTransfer struct {
	TemporaryPrivacyTransfer *TemporaryPrivacyTransferServerParameter `protobuf:"bytes,8,opt,name=temporary_privacy_transfer,json=temporaryPrivacyTransfer,proto3,oneof"`
}

type ServerParameter_TemporaryPrivacyExchange struct {
	TemporaryPrivacyExchange *TemporaryPrivacyExchangeServerParameter `protobuf:"bytes,9,opt,name=temporary_privacy_exchange,json=temporaryPrivacyExchange,proto3,oneof"`
}

type ServerParameter_PermanentPrivacyUpgrade struct {
	PermanentPrivacyUpgrade *PermanentPrivacyUpgradeServerParameter `protobuf:"bytes,10,opt,name=permanent_privacy_upgrade,json=permanentPrivacyUpgrade,proto3,oneof"`
}

type ServerParameter_FeePayment struct {
	FeePayment *FeePaymentServerParameter `protobuf:"bytes,11,opt,name=fee_payment,json=feePayment,proto3,oneof"`
}

func (*ServerParameter_OpenAccount) isServerParameter_Type() {}

func (*ServerParameter_CloseEmptyAccount) isServerParameter_Type() {}

func (*ServerParameter_CloseDormantAccount) isServerParameter_Type() {}

func (*ServerParameter_NoPrivacyTransfer) isServerParameter_Type() {}

func (*ServerParameter_NoPrivacyWithdraw) isServerParameter_Type() {}

func (*ServerParameter_TemporaryPrivacyTransfer) isServerParameter_Type() {}

func (*ServerParameter_TemporaryPrivacyExchange) isServerParameter_Type() {}

func (*ServerParameter_PermanentPrivacyUpgrade) isServerParameter_Type() {}

func (*ServerParameter_FeePayment) isServerParameter_Type() {}

type NoncedTransactionMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The nonce account to use in the system::AdvanceNonce instruction
	Nonce *v1.SolanaAccountId `protobuf:"bytes,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// The blockhash to set in the transaction
	Blockhash *v1.Blockhash `protobuf:"bytes,2,opt,name=blockhash,proto3" json:"blockhash,omitempty"`
}

func (x *NoncedTransactionMetadata) Reset() {
	*x = NoncedTransactionMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoncedTransactionMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoncedTransactionMetadata) ProtoMessage() {}

func (x *NoncedTransactionMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoncedTransactionMetadata.ProtoReflect.Descriptor instead.
func (*NoncedTransactionMetadata) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{40}
}

func (x *NoncedTransactionMetadata) GetNonce() *v1.SolanaAccountId {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *NoncedTransactionMetadata) GetBlockhash() *v1.Blockhash {
	if x != nil {
		return x.Blockhash
	}
	return nil
}

type OpenAccountServerParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OpenAccountServerParameter) Reset() {
	*x = OpenAccountServerParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenAccountServerParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenAccountServerParameter) ProtoMessage() {}

func (x *OpenAccountServerParameter) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenAccountServerParameter.ProtoReflect.Descriptor instead.
func (*OpenAccountServerParameter) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{41}
}

type CloseEmptyAccountServerParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CloseEmptyAccountServerParameter) Reset() {
	*x = CloseEmptyAccountServerParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseEmptyAccountServerParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseEmptyAccountServerParameter) ProtoMessage() {}

func (x *CloseEmptyAccountServerParameter) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseEmptyAccountServerParameter.ProtoReflect.Descriptor instead.
func (*CloseEmptyAccountServerParameter) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{42}
}

type CloseDormantAccountServerParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CloseDormantAccountServerParameter) Reset() {
	*x = CloseDormantAccountServerParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseDormantAccountServerParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseDormantAccountServerParameter) ProtoMessage() {}

func (x *CloseDormantAccountServerParameter) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseDormantAccountServerParameter.ProtoReflect.Descriptor instead.
func (*CloseDormantAccountServerParameter) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{43}
}

type NoPrivacyTransferServerParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NoPrivacyTransferServerParameter) Reset() {
	*x = NoPrivacyTransferServerParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoPrivacyTransferServerParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoPrivacyTransferServerParameter) ProtoMessage() {}

func (x *NoPrivacyTransferServerParameter) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoPrivacyTransferServerParameter.ProtoReflect.Descriptor instead.
func (*NoPrivacyTransferServerParameter) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{44}
}

type NoPrivacyWithdrawServerParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NoPrivacyWithdrawServerParameter) Reset() {
	*x = NoPrivacyWithdrawServerParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoPrivacyWithdrawServerParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoPrivacyWithdrawServerParameter) ProtoMessage() {}

func (x *NoPrivacyWithdrawServerParameter) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoPrivacyWithdrawServerParameter.ProtoReflect.Descriptor instead.
func (*NoPrivacyWithdrawServerParameter) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{45}
}

type TemporaryPrivacyTransferServerParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The treasury that will be used to split payments and provide a level of privacy
	Treasury *v1.SolanaAccountId `protobuf:"bytes,1,opt,name=treasury,proto3" json:"treasury,omitempty"`
	// A recent root server observed from the treasury
	RecentRoot *v1.Hash `protobuf:"bytes,2,opt,name=recent_root,json=recentRoot,proto3" json:"recent_root,omitempty"`
}

func (x *TemporaryPrivacyTransferServerParameter) Reset() {
	*x = TemporaryPrivacyTransferServerParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemporaryPrivacyTransferServerParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemporaryPrivacyTransferServerParameter) ProtoMessage() {}

func (x *TemporaryPrivacyTransferServerParameter) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemporaryPrivacyTransferServerParameter.ProtoReflect.Descriptor instead.
func (*TemporaryPrivacyTransferServerParameter) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{46}
}

func (x *TemporaryPrivacyTransferServerParameter) GetTreasury() *v1.SolanaAccountId {
	if x != nil {
		return x.Treasury
	}
	return nil
}

func (x *TemporaryPrivacyTransferServerParameter) GetRecentRoot() *v1.Hash {
	if x != nil {
		return x.RecentRoot
	}
	return nil
}

type TemporaryPrivacyExchangeServerParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The treasury that will be used to split payments and provide a level of privacy
	Treasury *v1.SolanaAccountId `protobuf:"bytes,1,opt,name=treasury,proto3" json:"treasury,omitempty"`
	// A recent root server observed from the treasury
	RecentRoot *v1.Hash `protobuf:"bytes,2,opt,name=recent_root,json=recentRoot,proto3" json:"recent_root,omitempty"`
}

func (x *TemporaryPrivacyExchangeServerParameter) Reset() {
	*x = TemporaryPrivacyExchangeServerParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemporaryPrivacyExchangeServerParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemporaryPrivacyExchangeServerParameter) ProtoMessage() {}

func (x *TemporaryPrivacyExchangeServerParameter) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemporaryPrivacyExchangeServerParameter.ProtoReflect.Descriptor instead.
func (*TemporaryPrivacyExchangeServerParameter) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{47}
}

func (x *TemporaryPrivacyExchangeServerParameter) GetTreasury() *v1.SolanaAccountId {
	if x != nil {
		return x.Treasury
	}
	return nil
}

func (x *TemporaryPrivacyExchangeServerParameter) GetRecentRoot() *v1.Hash {
	if x != nil {
		return x.RecentRoot
	}
	return nil
}

type PermanentPrivacyUpgradeServerParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The new commitment that is being paid
	NewCommitment *v1.SolanaAccountId `protobuf:"bytes,1,opt,name=new_commitment,json=newCommitment,proto3" json:"new_commitment,omitempty"`
	// The new commitment account's transcript. This is purely needed by client
	// to validate merkle_root with commitment PDA logic.
	NewCommitmentTranscript *v1.Hash `protobuf:"bytes,2,opt,name=new_commitment_transcript,json=newCommitmentTranscript,proto3" json:"new_commitment_transcript,omitempty"`
	// The new commitment account's destination. This is purely needed by client
	// to validate merkle_root with commitment PDA logic.
	NewCommitmentDestination *v1.SolanaAccountId `protobuf:"bytes,3,opt,name=new_commitment_destination,json=newCommitmentDestination,proto3" json:"new_commitment_destination,omitempty"`
	// The new commitment account's payment amount. This is purely needed by client
	// to validate merkle_root with commitment PDA logic.
	NewCommitmentAmount uint64 `protobuf:"varint,4,opt,name=new_commitment_amount,json=newCommitmentAmount,proto3" json:"new_commitment_amount,omitempty"`
	// The merkle root, which was the recent root used in the new commitment account
	MerkleRoot *v1.Hash `protobuf:"bytes,5,opt,name=merkle_root,json=merkleRoot,proto3" json:"merkle_root,omitempty"`
	// The merkle proof that validates the original commitment occurred prior to
	// the new commitment server is asking client to pay
	MerkleProof []*v1.Hash `protobuf:"bytes,6,rep,name=merkle_proof,json=merkleProof,proto3" json:"merkle_proof,omitempty"`
}

func (x *PermanentPrivacyUpgradeServerParameter) Reset() {
	*x = PermanentPrivacyUpgradeServerParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermanentPrivacyUpgradeServerParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermanentPrivacyUpgradeServerParameter) ProtoMessage() {}

func (x *PermanentPrivacyUpgradeServerParameter) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermanentPrivacyUpgradeServerParameter.ProtoReflect.Descriptor instead.
func (*PermanentPrivacyUpgradeServerParameter) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{48}
}

func (x *PermanentPrivacyUpgradeServerParameter) GetNewCommitment() *v1.SolanaAccountId {
	if x != nil {
		return x.NewCommitment
	}
	return nil
}

func (x *PermanentPrivacyUpgradeServerParameter) GetNewCommitmentTranscript() *v1.Hash {
	if x != nil {
		return x.NewCommitmentTranscript
	}
	return nil
}

func (x *PermanentPrivacyUpgradeServerParameter) GetNewCommitmentDestination() *v1.SolanaAccountId {
	if x != nil {
		return x.NewCommitmentDestination
	}
	return nil
}

func (x *PermanentPrivacyUpgradeServerParameter) GetNewCommitmentAmount() uint64 {
	if x != nil {
		return x.NewCommitmentAmount
	}
	return 0
}

func (x *PermanentPrivacyUpgradeServerParameter) GetMerkleRoot() *v1.Hash {
	if x != nil {
		return x.MerkleRoot
	}
	return nil
}

func (x *PermanentPrivacyUpgradeServerParameter) GetMerkleProof() []*v1.Hash {
	if x != nil {
		return x.MerkleProof
	}
	return nil
}

type FeePaymentServerParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The destination account where Code fee payments should be sent. This will
	// only be set when the corresponding FeePaymentAction Type is CODE.
	CodeDestination *v1.SolanaAccountId `protobuf:"bytes,1,opt,name=code_destination,json=codeDestination,proto3" json:"code_destination,omitempty"`
}

func (x *FeePaymentServerParameter) Reset() {
	*x = FeePaymentServerParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeePaymentServerParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeePaymentServerParameter) ProtoMessage() {}

func (x *FeePaymentServerParameter) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeePaymentServerParameter.ProtoReflect.Descriptor instead.
func (*FeePaymentServerParameter) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{49}
}

func (x *FeePaymentServerParameter) GetCodeDestination() *v1.SolanaAccountId {
	if x != nil {
		return x.CodeDestination
	}
	return nil
}

type ErrorDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*ErrorDetails_ReasonString
	//	*ErrorDetails_InvalidSignature
	Type isErrorDetails_Type `protobuf_oneof:"type"`
}

func (x *ErrorDetails) Reset() {
	*x = ErrorDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorDetails) ProtoMessage() {}

func (x *ErrorDetails) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorDetails.ProtoReflect.Descriptor instead.
func (*ErrorDetails) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{50}
}

func (m *ErrorDetails) GetType() isErrorDetails_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *ErrorDetails) GetReasonString() *ReasonStringErrorDetails {
	if x, ok := x.GetType().(*ErrorDetails_ReasonString); ok {
		return x.ReasonString
	}
	return nil
}

func (x *ErrorDetails) GetInvalidSignature() *InvalidSignatureErrorDetails {
	if x, ok := x.GetType().(*ErrorDetails_InvalidSignature); ok {
		return x.InvalidSignature
	}
	return nil
}

type isErrorDetails_Type interface {
	isErrorDetails_Type()
}

type ErrorDetails_ReasonString struct {
	ReasonString *ReasonStringErrorDetails `protobuf:"bytes,1,opt,name=reason_string,json=reasonString,proto3,oneof"`
}

type ErrorDetails_InvalidSignature struct {
	InvalidSignature *InvalidSignatureErrorDetails `protobuf:"bytes,2,opt,name=invalid_signature,json=invalidSignature,proto3,oneof"`
}

func (*ErrorDetails_ReasonString) isErrorDetails_Type() {}

func (*ErrorDetails_InvalidSignature) isErrorDetails_Type() {}

type ReasonStringErrorDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Human readable string indicating the failure.
	Reason string `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *ReasonStringErrorDetails) Reset() {
	*x = ReasonStringErrorDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReasonStringErrorDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReasonStringErrorDetails) ProtoMessage() {}

func (x *ReasonStringErrorDetails) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReasonStringErrorDetails.ProtoReflect.Descriptor instead.
func (*ReasonStringErrorDetails) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{51}
}

func (x *ReasonStringErrorDetails) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type InvalidSignatureErrorDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The action whose signature mismatched
	ActionId uint32 `protobuf:"varint,1,opt,name=action_id,json=actionId,proto3" json:"action_id,omitempty"`
	// The transaction the server expected to have signed.
	ExpectedTransaction *v1.Transaction `protobuf:"bytes,2,opt,name=expected_transaction,json=expectedTransaction,proto3" json:"expected_transaction,omitempty"`
	// The signature that was provided by the client.
	ProvidedSignature *v1.Signature `protobuf:"bytes,3,opt,name=provided_signature,json=providedSignature,proto3" json:"provided_signature,omitempty"`
}

func (x *InvalidSignatureErrorDetails) Reset() {
	*x = InvalidSignatureErrorDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvalidSignatureErrorDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvalidSignatureErrorDetails) ProtoMessage() {}

func (x *InvalidSignatureErrorDetails) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvalidSignatureErrorDetails.ProtoReflect.Descriptor instead.
func (*InvalidSignatureErrorDetails) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{52}
}

func (x *InvalidSignatureErrorDetails) GetActionId() uint32 {
	if x != nil {
		return x.ActionId
	}
	return 0
}

func (x *InvalidSignatureErrorDetails) GetExpectedTransaction() *v1.Transaction {
	if x != nil {
		return x.ExpectedTransaction
	}
	return nil
}

func (x *InvalidSignatureErrorDetails) GetProvidedSignature() *v1.Signature {
	if x != nil {
		return x.ProvidedSignature
	}
	return nil
}

// UpgradeableIntent is an intent whose actions can be upgraded.
type UpgradeableIntent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The intent ID
	Id *v1.IntentId `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The set of private actions that can be upgraded
	Actions []*UpgradeableIntent_UpgradeablePrivateAction `protobuf:"bytes,2,rep,name=actions,proto3" json:"actions,omitempty"`
}

func (x *UpgradeableIntent) Reset() {
	*x = UpgradeableIntent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradeableIntent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeableIntent) ProtoMessage() {}

func (x *UpgradeableIntent) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeableIntent.ProtoReflect.Descriptor instead.
func (*UpgradeableIntent) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{53}
}

func (x *UpgradeableIntent) GetId() *v1.IntentId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UpgradeableIntent) GetActions() []*UpgradeableIntent_UpgradeablePrivateAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

type PaymentHistoryItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The cursor position of this item.
	Cursor *Cursor `protobuf:"bytes,1,opt,name=cursor,proto3" json:"cursor,omitempty"`
	// Exchange data related to the payment
	ExchangeData *ExchangeData `protobuf:"bytes,2,opt,name=exchange_data,json=exchangeData,proto3" json:"exchange_data,omitempty"`
	// Is this payment a send or receive?
	PaymentType PaymentHistoryItem_PaymentType `protobuf:"varint,3,opt,name=payment_type,json=paymentType,proto3,enum=code.transaction.v2.PaymentHistoryItem_PaymentType" json:"payment_type,omitempty"`
	// If the payment was a SEND, was it a withdraw?
	IsWithdraw bool `protobuf:"varint,4,opt,name=is_withdraw,json=isWithdraw,proto3" json:"is_withdraw,omitempty"`
	// If the payment was a RECEIVE, was it a deposit?
	IsDeposit bool `protobuf:"varint,5,opt,name=is_deposit,json=isDeposit,proto3" json:"is_deposit,omitempty"`
	// The timestamp of the payment
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Was the payment involved in a remote send?
	IsRemoteSend bool `protobuf:"varint,7,opt,name=is_remote_send,json=isRemoteSend,proto3" json:"is_remote_send,omitempty"`
	// If payment_type is RECEIVE and is_remote_send is true, was the funds being
	// returned back to the issuer?
	IsReturned bool `protobuf:"varint,8,opt,name=is_returned,json=isReturned,proto3" json:"is_returned,omitempty"`
	// If payment_type is RECEIVE, is this receive an airdrop part of a reward, incentive, etc.?
	IsAirdrop bool `protobuf:"varint,9,opt,name=is_airdrop,json=isAirdrop,proto3" json:"is_airdrop,omitempty"`
	// If is_airdrop is true, the type of airdrop received.
	AirdropType AirdropType `protobuf:"varint,10,opt,name=airdrop_type,json=airdropType,proto3,enum=code.transaction.v2.AirdropType" json:"airdrop_type,omitempty"`
	// Is this a micro payment?
	IsMicroPayment bool `protobuf:"varint,11,opt,name=is_micro_payment,json=isMicroPayment,proto3" json:"is_micro_payment,omitempty"`
	// The intent ID associated with this history item
	IntentId *v1.IntentId `protobuf:"bytes,12,opt,name=intent_id,json=intentId,proto3" json:"intent_id,omitempty"`
}

func (x *PaymentHistoryItem) Reset() {
	*x = PaymentHistoryItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentHistoryItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentHistoryItem) ProtoMessage() {}

func (x *PaymentHistoryItem) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentHistoryItem.ProtoReflect.Descriptor instead.
func (*PaymentHistoryItem) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{54}
}

func (x *PaymentHistoryItem) GetCursor() *Cursor {
	if x != nil {
		return x.Cursor
	}
	return nil
}

func (x *PaymentHistoryItem) GetExchangeData() *ExchangeData {
	if x != nil {
		return x.ExchangeData
	}
	return nil
}

func (x *PaymentHistoryItem) GetPaymentType() PaymentHistoryItem_PaymentType {
	if x != nil {
		return x.PaymentType
	}
	return PaymentHistoryItem_UNKNOWN
}

func (x *PaymentHistoryItem) GetIsWithdraw() bool {
	if x != nil {
		return x.IsWithdraw
	}
	return false
}

func (x *PaymentHistoryItem) GetIsDeposit() bool {
	if x != nil {
		return x.IsDeposit
	}
	return false
}

func (x *PaymentHistoryItem) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *PaymentHistoryItem) GetIsRemoteSend() bool {
	if x != nil {
		return x.IsRemoteSend
	}
	return false
}

func (x *PaymentHistoryItem) GetIsReturned() bool {
	if x != nil {
		return x.IsReturned
	}
	return false
}

func (x *PaymentHistoryItem) GetIsAirdrop() bool {
	if x != nil {
		return x.IsAirdrop
	}
	return false
}

func (x *PaymentHistoryItem) GetAirdropType() AirdropType {
	if x != nil {
		return x.AirdropType
	}
	return AirdropType_UNKNOWN
}

func (x *PaymentHistoryItem) GetIsMicroPayment() bool {
	if x != nil {
		return x.IsMicroPayment
	}
	return false
}

func (x *PaymentHistoryItem) GetIntentId() *v1.IntentId {
	if x != nil {
		return x.IntentId
	}
	return nil
}

// ExchangeData defines an amount of Kin with currency exchange data
type ExchangeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ISO 4217 alpha-3 currency code.
	Currency string `protobuf:"bytes,1,opt,name=currency,proto3" json:"currency,omitempty"`
	// The agreed upon exchange rate. This might not be the same as the
	// actual exchange rate at the time of intent or fund transfer.
	ExchangeRate float64 `protobuf:"fixed64,2,opt,name=exchange_rate,json=exchangeRate,proto3" json:"exchange_rate,omitempty"`
	// The agreed upon transfer amount in the currency the payment was made
	// in.
	NativeAmount float64 `protobuf:"fixed64,3,opt,name=native_amount,json=nativeAmount,proto3" json:"native_amount,omitempty"`
	// The exact amount of quarks to send. This will be used as the source of
	// truth for validating transaction transfer amounts.
	Quarks uint64 `protobuf:"varint,4,opt,name=quarks,proto3" json:"quarks,omitempty"`
}

func (x *ExchangeData) Reset() {
	*x = ExchangeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeData) ProtoMessage() {}

func (x *ExchangeData) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeData.ProtoReflect.Descriptor instead.
func (*ExchangeData) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{55}
}

func (x *ExchangeData) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *ExchangeData) GetExchangeRate() float64 {
	if x != nil {
		return x.ExchangeRate
	}
	return 0
}

func (x *ExchangeData) GetNativeAmount() float64 {
	if x != nil {
		return x.NativeAmount
	}
	return 0
}

func (x *ExchangeData) GetQuarks() uint64 {
	if x != nil {
		return x.Quarks
	}
	return 0
}

type ExchangeDataWithoutRate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ISO 4217 alpha-3 currency code.
	Currency string `protobuf:"bytes,1,opt,name=currency,proto3" json:"currency,omitempty"`
	// The agreed upon transfer amount in the currency the payment was made
	// in.
	NativeAmount float64 `protobuf:"fixed64,2,opt,name=native_amount,json=nativeAmount,proto3" json:"native_amount,omitempty"`
}

func (x *ExchangeDataWithoutRate) Reset() {
	*x = ExchangeDataWithoutRate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeDataWithoutRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeDataWithoutRate) ProtoMessage() {}

func (x *ExchangeDataWithoutRate) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeDataWithoutRate.ProtoReflect.Descriptor instead.
func (*ExchangeDataWithoutRate) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{56}
}

func (x *ExchangeDataWithoutRate) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *ExchangeDataWithoutRate) GetNativeAmount() float64 {
	if x != nil {
		return x.NativeAmount
	}
	return 0
}

type AdditionalFeePayment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Destination Kin token account where the fee payment will be made
	Destination *v1.SolanaAccountId `protobuf:"bytes,1,opt,name=destination,proto3" json:"destination,omitempty"`
	// Fee percentage, in basis points, of the total quark amount of a payment.
	FeeBps uint32 `protobuf:"varint,2,opt,name=fee_bps,json=feeBps,proto3" json:"fee_bps,omitempty"`
}

func (x *AdditionalFeePayment) Reset() {
	*x = AdditionalFeePayment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdditionalFeePayment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdditionalFeePayment) ProtoMessage() {}

func (x *AdditionalFeePayment) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdditionalFeePayment.ProtoReflect.Descriptor instead.
func (*AdditionalFeePayment) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{57}
}

func (x *AdditionalFeePayment) GetDestination() *v1.SolanaAccountId {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *AdditionalFeePayment) GetFeeBps() uint32 {
	if x != nil {
		return x.FeeBps
	}
	return 0
}

type SendLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Remaining limit to apply on the next transaction
	NextTransaction float32 `protobuf:"fixed32,1,opt,name=next_transaction,json=nextTransaction,proto3" json:"next_transaction,omitempty"`
	// Maximum allowed on a per-transaction basis
	MaxPerTransaction float32 `protobuf:"fixed32,2,opt,name=max_per_transaction,json=maxPerTransaction,proto3" json:"max_per_transaction,omitempty"`
	// Maximum allowed on a per-day basis
	MaxPerDay float32 `protobuf:"fixed32,3,opt,name=max_per_day,json=maxPerDay,proto3" json:"max_per_day,omitempty"`
}

func (x *SendLimit) Reset() {
	*x = SendLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendLimit) ProtoMessage() {}

func (x *SendLimit) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendLimit.ProtoReflect.Descriptor instead.
func (*SendLimit) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{58}
}

func (x *SendLimit) GetNextTransaction() float32 {
	if x != nil {
		return x.NextTransaction
	}
	return 0
}

func (x *SendLimit) GetMaxPerTransaction() float32 {
	if x != nil {
		return x.MaxPerTransaction
	}
	return 0
}

func (x *SendLimit) GetMaxPerDay() float32 {
	if x != nil {
		return x.MaxPerDay
	}
	return 0
}

type DepositLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Maximum quarks that may be deposited at any time. Server will guarantee
	// this threshold will be below enforced dollar value limits, while also
	// ensuring sufficient funds are available for a full organizer that supports
	// max payment sends. Total dollar value limits may be spread across many deposits.
	MaxQuarks uint64 `protobuf:"varint,1,opt,name=max_quarks,json=maxQuarks,proto3" json:"max_quarks,omitempty"`
}

func (x *DepositLimit) Reset() {
	*x = DepositLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepositLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositLimit) ProtoMessage() {}

func (x *DepositLimit) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositLimit.ProtoReflect.Descriptor instead.
func (*DepositLimit) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{59}
}

func (x *DepositLimit) GetMaxQuarks() uint64 {
	if x != nil {
		return x.MaxQuarks
	}
	return 0
}

type MicroPaymentLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Maximum native amount that can be applied per micro payment transaction
	MaxPerTransaction float32 `protobuf:"fixed32,1,opt,name=max_per_transaction,json=maxPerTransaction,proto3" json:"max_per_transaction,omitempty"`
	// Minimum native amount that can be applied per micro payment transaction
	MinPerTransaction float32 `protobuf:"fixed32,2,opt,name=min_per_transaction,json=minPerTransaction,proto3" json:"min_per_transaction,omitempty"`
}

func (x *MicroPaymentLimit) Reset() {
	*x = MicroPaymentLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MicroPaymentLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MicroPaymentLimit) ProtoMessage() {}

func (x *MicroPaymentLimit) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MicroPaymentLimit.ProtoReflect.Descriptor instead.
func (*MicroPaymentLimit) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{60}
}

func (x *MicroPaymentLimit) GetMaxPerTransaction() float32 {
	if x != nil {
		return x.MaxPerTransaction
	}
	return 0
}

func (x *MicroPaymentLimit) GetMinPerTransaction() float32 {
	if x != nil {
		return x.MinPerTransaction
	}
	return 0
}

type BuyModuleLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Minimum amount that can be purchased through the buy module
	MinPerTransaction float32 `protobuf:"fixed32,1,opt,name=min_per_transaction,json=minPerTransaction,proto3" json:"min_per_transaction,omitempty"`
	// Maximum amount that can be purchased through the buy module
	MaxPerTransaction float32 `protobuf:"fixed32,2,opt,name=max_per_transaction,json=maxPerTransaction,proto3" json:"max_per_transaction,omitempty"`
}

func (x *BuyModuleLimit) Reset() {
	*x = BuyModuleLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuyModuleLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuyModuleLimit) ProtoMessage() {}

func (x *BuyModuleLimit) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuyModuleLimit.ProtoReflect.Descriptor instead.
func (*BuyModuleLimit) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{61}
}

func (x *BuyModuleLimit) GetMinPerTransaction() float32 {
	if x != nil {
		return x.MinPerTransaction
	}
	return 0
}

func (x *BuyModuleLimit) GetMaxPerTransaction() float32 {
	if x != nil {
		return x.MaxPerTransaction
	}
	return 0
}

type Cursor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Cursor) Reset() {
	*x = Cursor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cursor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cursor) ProtoMessage() {}

func (x *Cursor) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cursor.ProtoReflect.Descriptor instead.
func (*Cursor) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{62}
}

func (x *Cursor) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type SubmitIntentRequest_SubmitActions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The globally unique client generated intent ID. Use the original intent
	// ID when operating on actions that mutate the intent.
	Id *v1.IntentId `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The verified owner account public key
	Owner *v1.SolanaAccountId `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	// Additional metadata that describes the high-level intention
	Metadata *Metadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// The set of all ordered actions required to fulfill the intent
	Actions []*Action `protobuf:"bytes,4,rep,name=actions,proto3" json:"actions,omitempty"`
	// The signature is of serialize(SubmitActions) without this field set using the
	// private key of the owner account. This provides an authentication mechanism
	// to the RPC.
	Signature *v1.Signature `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
	// Device token for antispam measures against fake devices
	DeviceToken *v1.DeviceToken `protobuf:"bytes,6,opt,name=device_token,json=deviceToken,proto3" json:"device_token,omitempty"`
}

func (x *SubmitIntentRequest_SubmitActions) Reset() {
	*x = SubmitIntentRequest_SubmitActions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitIntentRequest_SubmitActions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitIntentRequest_SubmitActions) ProtoMessage() {}

func (x *SubmitIntentRequest_SubmitActions) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitIntentRequest_SubmitActions.ProtoReflect.Descriptor instead.
func (*SubmitIntentRequest_SubmitActions) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{0, 0}
}

func (x *SubmitIntentRequest_SubmitActions) GetId() *v1.IntentId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SubmitIntentRequest_SubmitActions) GetOwner() *v1.SolanaAccountId {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *SubmitIntentRequest_SubmitActions) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *SubmitIntentRequest_SubmitActions) GetActions() []*Action {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *SubmitIntentRequest_SubmitActions) GetSignature() *v1.Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *SubmitIntentRequest_SubmitActions) GetDeviceToken() *v1.DeviceToken {
	if x != nil {
		return x.DeviceToken
	}
	return nil
}

type SubmitIntentRequest_SubmitSignatures struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The set of all signatures for each transaction requiring signature from the
	// authority accounts.
	Signatures []*v1.Signature `protobuf:"bytes,1,rep,name=signatures,proto3" json:"signatures,omitempty"`
}

func (x *SubmitIntentRequest_SubmitSignatures) Reset() {
	*x = SubmitIntentRequest_SubmitSignatures{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitIntentRequest_SubmitSignatures) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitIntentRequest_SubmitSignatures) ProtoMessage() {}

func (x *SubmitIntentRequest_SubmitSignatures) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitIntentRequest_SubmitSignatures.ProtoReflect.Descriptor instead.
func (*SubmitIntentRequest_SubmitSignatures) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{0, 1}
}

func (x *SubmitIntentRequest_SubmitSignatures) GetSignatures() []*v1.Signature {
	if x != nil {
		return x.Signatures
	}
	return nil
}

type SubmitIntentResponse_ServerParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The set of all server paremeters required to fill missing transaction
	// details. Server guarantees to provide a message for each client action
	// in an order consistent with the received action list.
	ServerParameters []*ServerParameter `protobuf:"bytes,1,rep,name=server_parameters,json=serverParameters,proto3" json:"server_parameters,omitempty"`
}

func (x *SubmitIntentResponse_ServerParameters) Reset() {
	*x = SubmitIntentResponse_ServerParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitIntentResponse_ServerParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitIntentResponse_ServerParameters) ProtoMessage() {}

func (x *SubmitIntentResponse_ServerParameters) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitIntentResponse_ServerParameters.ProtoReflect.Descriptor instead.
func (*SubmitIntentResponse_ServerParameters) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{1, 0}
}

func (x *SubmitIntentResponse_ServerParameters) GetServerParameters() []*ServerParameter {
	if x != nil {
		return x.ServerParameters
	}
	return nil
}

type SubmitIntentResponse_Success struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code SubmitIntentResponse_Success_Code `protobuf:"varint,1,opt,name=code,proto3,enum=code.transaction.v2.SubmitIntentResponse_Success_Code" json:"code,omitempty"`
}

func (x *SubmitIntentResponse_Success) Reset() {
	*x = SubmitIntentResponse_Success{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitIntentResponse_Success) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitIntentResponse_Success) ProtoMessage() {}

func (x *SubmitIntentResponse_Success) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitIntentResponse_Success.ProtoReflect.Descriptor instead.
func (*SubmitIntentResponse_Success) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{1, 1}
}

func (x *SubmitIntentResponse_Success) GetCode() SubmitIntentResponse_Success_Code {
	if x != nil {
		return x.Code
	}
	return SubmitIntentResponse_Success_OK
}

type SubmitIntentResponse_Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code         SubmitIntentResponse_Error_Code `protobuf:"varint,1,opt,name=code,proto3,enum=code.transaction.v2.SubmitIntentResponse_Error_Code" json:"code,omitempty"`
	ErrorDetails []*ErrorDetails                 `protobuf:"bytes,2,rep,name=error_details,json=errorDetails,proto3" json:"error_details,omitempty"`
}

func (x *SubmitIntentResponse_Error) Reset() {
	*x = SubmitIntentResponse_Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitIntentResponse_Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitIntentResponse_Error) ProtoMessage() {}

func (x *SubmitIntentResponse_Error) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitIntentResponse_Error.ProtoReflect.Descriptor instead.
func (*SubmitIntentResponse_Error) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{1, 2}
}

func (x *SubmitIntentResponse_Error) GetCode() SubmitIntentResponse_Error_Code {
	if x != nil {
		return x.Code
	}
	return SubmitIntentResponse_Error_DENIED
}

func (x *SubmitIntentResponse_Error) GetErrorDetails() []*ErrorDetails {
	if x != nil {
		return x.ErrorDetails
	}
	return nil
}

type SwapRequest_Initiate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The verified owner account public key
	Owner *v1.SolanaAccountId `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	// The user authority account that will sign to authorize the swap. Ideally,
	// this is an account derived off the owner account that is solely responsible
	// for swapping.
	SwapAuthority *v1.SolanaAccountId `protobuf:"bytes,2,opt,name=swap_authority,json=swapAuthority,proto3" json:"swap_authority,omitempty"`
	// Maximum amount to swap from the source mint, in quarks. If value is set to zero,
	// the entire amount will be swapped.
	Limit uint64 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	// Whether the client wants the RPC to wait for blockchain status. If false,
	// then the RPC will return Success when the swap is submitted to the blockchain.
	// Otherwise, the RPC will observe and report back the status of the transaction.
	WaitForBlockchainStatus bool `protobuf:"varint,4,opt,name=wait_for_blockchain_status,json=waitForBlockchainStatus,proto3" json:"wait_for_blockchain_status,omitempty"`
	// The signature is of serialize(Initiate) without this field set using the
	// private key of the owner account. This provides an authentication mechanism
	// to the RPC.
	Signature *v1.Signature `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *SwapRequest_Initiate) Reset() {
	*x = SwapRequest_Initiate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwapRequest_Initiate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapRequest_Initiate) ProtoMessage() {}

func (x *SwapRequest_Initiate) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapRequest_Initiate.ProtoReflect.Descriptor instead.
func (*SwapRequest_Initiate) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{16, 0}
}

func (x *SwapRequest_Initiate) GetOwner() *v1.SolanaAccountId {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *SwapRequest_Initiate) GetSwapAuthority() *v1.SolanaAccountId {
	if x != nil {
		return x.SwapAuthority
	}
	return nil
}

func (x *SwapRequest_Initiate) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *SwapRequest_Initiate) GetWaitForBlockchainStatus() bool {
	if x != nil {
		return x.WaitForBlockchainStatus
	}
	return false
}

func (x *SwapRequest_Initiate) GetSignature() *v1.Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type SwapRequest_SubmitSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The signature for the locally constructed swap transaction
	Signature *v1.Signature `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *SwapRequest_SubmitSignature) Reset() {
	*x = SwapRequest_SubmitSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwapRequest_SubmitSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapRequest_SubmitSignature) ProtoMessage() {}

func (x *SwapRequest_SubmitSignature) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapRequest_SubmitSignature.ProtoReflect.Descriptor instead.
func (*SwapRequest_SubmitSignature) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{16, 1}
}

func (x *SwapRequest_SubmitSignature) GetSignature() *v1.Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type SwapResponse_ServerParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Subisdizer account that will be paying for the swap
	Payer *v1.SolanaAccountId `protobuf:"bytes,1,opt,name=payer,proto3" json:"payer,omitempty"`
	// Recent blockhash
	RecentBlockhash *v1.Blockhash `protobuf:"bytes,2,opt,name=recent_blockhash,json=recentBlockhash,proto3" json:"recent_blockhash,omitempty"`
	// Compute unit limit provided to the ComputeBudget::SetComputeUnitLimit
	// instruction. If the value is 0, then the instruction can be omitted.
	ComputeUnitLimit uint32 `protobuf:"varint,3,opt,name=compute_unit_limit,json=computeUnitLimit,proto3" json:"compute_unit_limit,omitempty"`
	// Compute unit price provided in the ComputeBudget::SetComputeUnitPrice
	// instruction. If the value is 0, then the instruction can be omitted.
	ComputeUnitPrice uint64 `protobuf:"varint,4,opt,name=compute_unit_price,json=computeUnitPrice,proto3" json:"compute_unit_price,omitempty"`
	// On-chain program that will be performing the swap
	SwapProgram *v1.SolanaAccountId `protobuf:"bytes,5,opt,name=swap_program,json=swapProgram,proto3" json:"swap_program,omitempty"`
	// Accounts provided to the swap instruction
	SwapIxnAccounts []*v1.InstructionAccount `protobuf:"bytes,6,rep,name=swap_ixn_accounts,json=swapIxnAccounts,proto3" json:"swap_ixn_accounts,omitempty"`
	// Instruction data for the swap instruction
	SwapIxnData []byte `protobuf:"bytes,7,opt,name=swap_ixn_data,json=swapIxnData,proto3" json:"swap_ixn_data,omitempty"`
	// Maximum quarks that will be sent out of the source account after
	// executing the swap. If not, the validation instruction will cause
	// the transaction to fail.
	MaxToSend uint64 `protobuf:"varint,8,opt,name=max_to_send,json=maxToSend,proto3" json:"max_to_send,omitempty"`
	// Minimum quarks that will be received into the destination account
	// after executing the swap. If not, the validation instruction will
	// cause the transaction to fail.
	MinToReceive uint64 `protobuf:"varint,9,opt,name=min_to_receive,json=minToReceive,proto3" json:"min_to_receive,omitempty"`
	// Nonce to use in swap validator state account PDA
	Nonce *v1.SolanaAccountId `protobuf:"bytes,10,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *SwapResponse_ServerParameters) Reset() {
	*x = SwapResponse_ServerParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwapResponse_ServerParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapResponse_ServerParameters) ProtoMessage() {}

func (x *SwapResponse_ServerParameters) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapResponse_ServerParameters.ProtoReflect.Descriptor instead.
func (*SwapResponse_ServerParameters) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{17, 0}
}

func (x *SwapResponse_ServerParameters) GetPayer() *v1.SolanaAccountId {
	if x != nil {
		return x.Payer
	}
	return nil
}

func (x *SwapResponse_ServerParameters) GetRecentBlockhash() *v1.Blockhash {
	if x != nil {
		return x.RecentBlockhash
	}
	return nil
}

func (x *SwapResponse_ServerParameters) GetComputeUnitLimit() uint32 {
	if x != nil {
		return x.ComputeUnitLimit
	}
	return 0
}

func (x *SwapResponse_ServerParameters) GetComputeUnitPrice() uint64 {
	if x != nil {
		return x.ComputeUnitPrice
	}
	return 0
}

func (x *SwapResponse_ServerParameters) GetSwapProgram() *v1.SolanaAccountId {
	if x != nil {
		return x.SwapProgram
	}
	return nil
}

func (x *SwapResponse_ServerParameters) GetSwapIxnAccounts() []*v1.InstructionAccount {
	if x != nil {
		return x.SwapIxnAccounts
	}
	return nil
}

func (x *SwapResponse_ServerParameters) GetSwapIxnData() []byte {
	if x != nil {
		return x.SwapIxnData
	}
	return nil
}

func (x *SwapResponse_ServerParameters) GetMaxToSend() uint64 {
	if x != nil {
		return x.MaxToSend
	}
	return 0
}

func (x *SwapResponse_ServerParameters) GetMinToReceive() uint64 {
	if x != nil {
		return x.MinToReceive
	}
	return 0
}

func (x *SwapResponse_ServerParameters) GetNonce() *v1.SolanaAccountId {
	if x != nil {
		return x.Nonce
	}
	return nil
}

type SwapResponse_Success struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code SwapResponse_Success_Code `protobuf:"varint,1,opt,name=code,proto3,enum=code.transaction.v2.SwapResponse_Success_Code" json:"code,omitempty"`
}

func (x *SwapResponse_Success) Reset() {
	*x = SwapResponse_Success{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwapResponse_Success) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapResponse_Success) ProtoMessage() {}

func (x *SwapResponse_Success) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapResponse_Success.ProtoReflect.Descriptor instead.
func (*SwapResponse_Success) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{17, 1}
}

func (x *SwapResponse_Success) GetCode() SwapResponse_Success_Code {
	if x != nil {
		return x.Code
	}
	return SwapResponse_Success_SWAP_SUBMITTED
}

type SwapResponse_Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code         SwapResponse_Error_Code `protobuf:"varint,1,opt,name=code,proto3,enum=code.transaction.v2.SwapResponse_Error_Code" json:"code,omitempty"`
	ErrorDetails []*ErrorDetails         `protobuf:"bytes,2,rep,name=error_details,json=errorDetails,proto3" json:"error_details,omitempty"`
}

func (x *SwapResponse_Error) Reset() {
	*x = SwapResponse_Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwapResponse_Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapResponse_Error) ProtoMessage() {}

func (x *SwapResponse_Error) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapResponse_Error.ProtoReflect.Descriptor instead.
func (*SwapResponse_Error) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{17, 2}
}

func (x *SwapResponse_Error) GetCode() SwapResponse_Error_Code {
	if x != nil {
		return x.Code
	}
	return SwapResponse_Error_DENIED
}

func (x *SwapResponse_Error) GetErrorDetails() []*ErrorDetails {
	if x != nil {
		return x.ErrorDetails
	}
	return nil
}

type UpgradeableIntent_UpgradeablePrivateAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The transaction blob that was signed by the client. Clients *MUST* use
	// the source and destination account in the timelock::TransferWithAuthority
	// instruction to validate all fields provided by server by locally computing
	// the expected addresses.
	TransactionBlob *v1.Transaction `protobuf:"bytes,1,opt,name=transaction_blob,json=transactionBlob,proto3" json:"transaction_blob,omitempty"`
	// The client's signature for the transaction. Clients MUST use this to
	// locally validate the transaction blob provided by server.
	ClientSignature *v1.Signature `protobuf:"bytes,2,opt,name=client_signature,json=clientSignature,proto3" json:"client_signature,omitempty"`
	// The action ID of this transaction
	ActionId uint32 `protobuf:"varint,3,opt,name=action_id,json=actionId,proto3" json:"action_id,omitempty"`
	// The source account's type, which hints how to efficiently derive source
	SourceAccountType v1.AccountType `protobuf:"varint,4,opt,name=source_account_type,json=sourceAccountType,proto3,enum=code.common.v1.AccountType" json:"source_account_type,omitempty"`
	// The source account's derivation index, which hints how to efficiently derive source
	SourceDerivationIndex uint64 `protobuf:"varint,5,opt,name=source_derivation_index,json=sourceDerivationIndex,proto3" json:"source_derivation_index,omitempty"`
	// The original destination account that was paid by the treasury
	OriginalDestination *v1.SolanaAccountId `protobuf:"bytes,6,opt,name=original_destination,json=originalDestination,proto3" json:"original_destination,omitempty"`
	// The original quark amount for the action
	OriginalAmount uint64 `protobuf:"varint,7,opt,name=original_amount,json=originalAmount,proto3" json:"original_amount,omitempty"`
	// The treasury used for this the private action
	Treasury *v1.SolanaAccountId `protobuf:"bytes,8,opt,name=treasury,proto3" json:"treasury,omitempty"`
	// The recent root observed at the time of intent creation for this private action
	RecentRoot *v1.Hash `protobuf:"bytes,9,opt,name=recent_root,json=recentRoot,proto3" json:"recent_root,omitempty"`
}

func (x *UpgradeableIntent_UpgradeablePrivateAction) Reset() {
	*x = UpgradeableIntent_UpgradeablePrivateAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_v2_transaction_service_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradeableIntent_UpgradeablePrivateAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeableIntent_UpgradeablePrivateAction) ProtoMessage() {}

func (x *UpgradeableIntent_UpgradeablePrivateAction) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_v2_transaction_service_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeableIntent_UpgradeablePrivateAction.ProtoReflect.Descriptor instead.
func (*UpgradeableIntent_UpgradeablePrivateAction) Descriptor() ([]byte, []int) {
	return file_transaction_v2_transaction_service_proto_rawDescGZIP(), []int{53, 0}
}

func (x *UpgradeableIntent_UpgradeablePrivateAction) GetTransactionBlob() *v1.Transaction {
	if x != nil {
		return x.TransactionBlob
	}
	return nil
}

func (x *UpgradeableIntent_UpgradeablePrivateAction) GetClientSignature() *v1.Signature {
	if x != nil {
		return x.ClientSignature
	}
	return nil
}

func (x *UpgradeableIntent_UpgradeablePrivateAction) GetActionId() uint32 {
	if x != nil {
		return x.ActionId
	}
	return 0
}

func (x *UpgradeableIntent_UpgradeablePrivateAction) GetSourceAccountType() v1.AccountType {
	if x != nil {
		return x.SourceAccountType
	}
	return v1.AccountType(0)
}

func (x *UpgradeableIntent_UpgradeablePrivateAction) GetSourceDerivationIndex() uint64 {
	if x != nil {
		return x.SourceDerivationIndex
	}
	return 0
}

func (x *UpgradeableIntent_UpgradeablePrivateAction) GetOriginalDestination() *v1.SolanaAccountId {
	if x != nil {
		return x.OriginalDestination
	}
	return nil
}

func (x *UpgradeableIntent_UpgradeablePrivateAction) GetOriginalAmount() uint64 {
	if x != nil {
		return x.OriginalAmount
	}
	return 0
}

func (x *UpgradeableIntent_UpgradeablePrivateAction) GetTreasury() *v1.SolanaAccountId {
	if x != nil {
		return x.Treasury
	}
	return nil
}

func (x *UpgradeableIntent_UpgradeablePrivateAction) GetRecentRoot() *v1.Hash {
	if x != nil {
		return x.RecentRoot
	}
	return nil
}

var File_transaction_v2_transaction_service_proto protoreflect.FileDescriptor

var file_transaction_v2_transaction_service_proto_rawDesc = []byte{
	0x0a, 0x28, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x32,
	0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x1a,
	0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xed, 0x05, 0x0a, 0x13, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5f, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x68, 0x0a, 0x11, 0x73, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x48,
	0x00, 0x52, 0x10, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x1a, 0x9a, 0x03, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0,
	0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x05, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61,
	0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0,
	0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x45,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42,
	0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x0d, 0xba, 0xe9, 0xc0, 0x03, 0x08, 0x92, 0x01, 0x05, 0x08, 0x01, 0x10,
	0x80, 0x02, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x43, 0x0a, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05,
	0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x3e, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x1a, 0x5c, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x42, 0x0d, 0xba, 0xe9, 0xc0, 0x03, 0x08, 0x92, 0x01, 0x05, 0x08, 0x01, 0x10,
	0x80, 0x02, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x42, 0x10,
	0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x05, 0xb8, 0xe9, 0xc0, 0x03, 0x01,
	0x22, 0xf3, 0x05, 0x0a, 0x14, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x11, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x48, 0x00, 0x52, 0x10, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x4d, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x47, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x49,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0x74, 0x0a, 0x10,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x60, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x32, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x42, 0x0d, 0xba, 0xe9, 0xc0, 0x03, 0x08, 0x92, 0x01, 0x05, 0x08, 0x01, 0x10, 0x80, 0x02,
	0x52, 0x10, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x1a, 0x65, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x4a, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x32, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x0e, 0x0a, 0x04, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x1a, 0xe7, 0x01, 0x0a, 0x05, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x48, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x49, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x46, 0x0a,
	0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x4c, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0a, 0x0a,
	0x06, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x13, 0x0a,
	0x0f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x41, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x10, 0x03, 0x42, 0x11, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x05, 0xb8, 0xe9, 0xc0, 0x03, 0x01, 0x22, 0xd9, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x49, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x08, 0x69, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x43, 0x0a,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x0a, 0xba, 0xe9, 0xc0,
	0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x22, 0xc6, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4d, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x35, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x39, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x1f, 0x0a, 0x06, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09,
	0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x22, 0x80, 0x01, 0x0a, 0x1e,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41,
	0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0,
	0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xa3,
	0x03, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x55, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x53, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x63, 0x79, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x53, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x50, 0x0a, 0x06,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x14,
	0x0a, 0x10, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55,
	0x4e, 0x44, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x22, 0x83,
	0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x54, 0x45, 0x4d, 0x50, 0x4f, 0x52,
	0x41, 0x52, 0x59, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x46, 0x49, 0x4e, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x57,
	0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x5f,
	0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x45, 0x41, 0x44, 0x59,
	0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45, 0x10, 0x03, 0x12, 0x14,
	0x0a, 0x10, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44,
	0x45, 0x44, 0x10, 0x04, 0x22, 0xd8, 0x01, 0x0a, 0x2d, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x46, 0x6f,
	0x72, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02,
	0x10, 0x01, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x09, 0xba, 0xe9, 0xc0, 0x03, 0x04, 0x2a,
	0x02, 0x18, 0x64, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x43, 0x0a, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22,
	0xff, 0x01, 0x0a, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x7a,
	0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x63, 0x79, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x62, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x4a, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x46, 0x6f,
	0x72, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x48, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x0a, 0xba,
	0xe9, 0xc0, 0x03, 0x05, 0x92, 0x01, 0x02, 0x10, 0x64, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x22, 0x1f, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b,
	0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10,
	0x01, 0x22, 0xe9, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02,
	0x10, 0x01, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01,
	0x02, 0x10, 0x01, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x4d,
	0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0xb2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x0d,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x22, 0x9f, 0x07,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x77, 0x0a, 0x17, 0x73, 0x65,
	0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x32, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x42, 0x79,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x73,
	0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x42, 0x79, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x46, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32,
	0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x0c, 0x64,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x90, 0x01, 0x0a, 0x20,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d,
	0x69, 0x63, 0x72, 0x6f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x73, 0x42, 0x79, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x1c, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x73, 0x42, 0x79, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x87,
	0x01, 0x0a, 0x1d, 0x62, 0x75, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42,
	0x75, 0x79, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x42, 0x79,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x19, 0x62,
	0x75, 0x79, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x42, 0x79,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x1a, 0x67, 0x0a, 0x19, 0x53, 0x65, 0x6e, 0x64,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x42, 0x79, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x6e,
	0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x77, 0x0a, 0x21, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x42, 0x79, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x69,
	0x63, 0x72, 0x6f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x71, 0x0a, 0x1e, 0x42, 0x75,
	0x79, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x42, 0x79, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x39,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x32, 0x2e, 0x42, 0x75, 0x79, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x10, 0x0a,
	0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x22,
	0xf6, 0x02, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x05,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c,
	0x61, 0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9,
	0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12,
	0x33, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x52, 0x06, 0x63, 0x75,
	0x72, 0x73, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x09, 0xba, 0xe9, 0xc0, 0x03, 0x04, 0x2a, 0x02,
	0x18, 0x64, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x55, 0x0a, 0x09,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x37, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x1e, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x53, 0x43, 0x10, 0x00, 0x12, 0x08,
	0x0a, 0x04, 0x44, 0x45, 0x53, 0x43, 0x10, 0x01, 0x22, 0xd6, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x49, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0a, 0xba,
	0xe9, 0xc0, 0x03, 0x05, 0x92, 0x01, 0x02, 0x10, 0x64, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x22, 0x1f, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b,
	0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10,
	0x01, 0x22, 0x64, 0x0a, 0x1b, 0x43, 0x61, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x54, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x45, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x07,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xba, 0x02, 0x0a, 0x1c, 0x43, 0x61, 0x6e, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x54, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x61, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x54, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x69, 0x73,
	0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x19, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x17, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3e, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00,
	0x12, 0x10, 0x0a, 0x0c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x10, 0x02, 0x22, 0xeb, 0x01, 0x0a, 0x0e, 0x41, 0x69, 0x72, 0x64, 0x72, 0x6f, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x0c, 0x61, 0x69, 0x72, 0x64, 0x72,
	0x6f, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x32, 0x2e, 0x41, 0x69, 0x72, 0x64, 0x72, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x0c, 0xba, 0xe9, 0xc0, 0x03, 0x07, 0x82, 0x01, 0x04, 0x20, 0x00, 0x20, 0x01, 0x52, 0x0b, 0x61,
	0x69, 0x72, 0x64, 0x72, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e,
	0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03,
	0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x43, 0x0a,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x0a, 0xba, 0xe9, 0xc0,
	0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x22, 0xd6, 0x01, 0x0a, 0x0f, 0x41, 0x69, 0x72, 0x64, 0x72, 0x6f, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x69, 0x72,
	0x64, 0x72, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x46, 0x0a, 0x0d, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x36, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a,
	0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44,
	0x59, 0x5f, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x45, 0x44, 0x10, 0x02, 0x22, 0xdb, 0x04, 0x0a, 0x0b,
	0x53, 0x77, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x08, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x32, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x74, 0x65, 0x12, 0x5d, 0x0a, 0x10, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x48, 0x00, 0x52, 0x0f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x1a, 0xb9, 0x02, 0x0a, 0x08, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65,
	0x12, 0x41, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x12, 0x52, 0x0a, 0x0e, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c,
	0x61, 0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9,
	0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0d, 0x73, 0x77, 0x61, 0x70, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x3b, 0x0a,
	0x1a, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x17, 0x77, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x43, 0x0a, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x1a,
	0x56, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x43, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x10, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x05, 0xb8, 0xe9, 0xc0, 0x03, 0x01, 0x22, 0xf0, 0x09, 0x0a, 0x0c, 0x53, 0x77,
	0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x11, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x77, 0x61, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x10, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x45, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x3f, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0x82, 0x05, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x41, 0x0a, 0x05, 0x70, 0x61,
	0x79, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e,
	0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03,
	0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x05, 0x70, 0x61, 0x79, 0x65, 0x72, 0x12, 0x50, 0x0a,
	0x10, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x68, 0x61,
	0x73, 0x68, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0f,
	0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x68, 0x61, 0x73, 0x68, 0x12,
	0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2c, 0x0a,
	0x12, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x4e, 0x0a, 0x0c, 0x73,
	0x77, 0x61, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0b,
	0x73, 0x77, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x5c, 0x0a, 0x11, 0x73,
	0x77, 0x61, 0x70, 0x5f, 0x69, 0x78, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0c, 0xba, 0xe9, 0xc0, 0x03,
	0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x40, 0x52, 0x0f, 0x73, 0x77, 0x61, 0x70, 0x49, 0x78,
	0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x0d, 0x73, 0x77, 0x61,
	0x70, 0x5f, 0x69, 0x78, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c,
	0x42, 0x0c, 0xba, 0xe9, 0xc0, 0x03, 0x07, 0x7a, 0x05, 0x10, 0x01, 0x18, 0x80, 0x02, 0x52, 0x0b,
	0x73, 0x77, 0x61, 0x70, 0x49, 0x78, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x29, 0x0a, 0x0b, 0x6d,
	0x61, 0x78, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x09, 0xba, 0xe9, 0xc0, 0x03, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x09, 0x6d, 0x61, 0x78,
	0x54, 0x6f, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x2f, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x6f,
	0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x42, 0x09,
	0xba, 0xe9, 0xc0, 0x03, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x54, 0x6f,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x12, 0x41, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01,
	0x02, 0x10, 0x01, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x1a, 0x7d, 0x0a, 0x07, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x42, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x2e, 0x0a, 0x04, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x57, 0x41, 0x50, 0x5f, 0x53, 0x55, 0x42, 0x4d, 0x49, 0x54,
	0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x57, 0x41, 0x50, 0x5f, 0x46, 0x49,
	0x4e, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x01, 0x1a, 0xdd, 0x01, 0x0a, 0x05, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x40, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x46, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x32, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x4a, 0x0a,
	0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x53, 0x57, 0x41, 0x50, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x57, 0x41, 0x50,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x42, 0x11, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x05, 0xb8, 0xe9, 0xc0, 0x03, 0x01, 0x22, 0xc4, 0x02, 0x0a,
	0x1f, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x46, 0x69, 0x61, 0x74, 0x4f, 0x6e, 0x72, 0x61,
	0x6d, 0x70, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x41, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x12, 0x61, 0x0a, 0x0f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x32, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x57,
	0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x52, 0x61, 0x74, 0x65, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03,
	0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x42, 0x0a, 0xba, 0xe9, 0xc0,
	0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x43,
	0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x0a, 0xba, 0xe9,
	0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x20, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x46,
	0x69, 0x61, 0x74, 0x4f, 0x6e, 0x72, 0x61, 0x6d, 0x70, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x44,
	0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x46, 0x69, 0x61, 0x74, 0x4f, 0x6e, 0x72, 0x61, 0x6d, 0x70,
	0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x10,
	0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00,
	0x22, 0xce, 0x06, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x50, 0x0a,
	0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48,
	0x00, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12,
	0x63, 0x0a, 0x14, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00,
	0x52, 0x12, 0x73, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x75, 0x0a, 0x1a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48,
	0x00, 0x52, 0x18, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x12, 0x56, 0x0a, 0x0f, 0x75,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x48, 0x00, 0x52, 0x0e, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x63, 0x79, 0x12, 0x6a, 0x0a, 0x17, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x6f, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x5f, 0x32, 0x30, 0x32, 0x32, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x69, 0x67, 0x72, 0x61,
	0x74, 0x65, 0x54, 0x6f, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x32, 0x30, 0x32, 0x32, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x14, 0x6d, 0x69, 0x67, 0x72, 0x61,
	0x74, 0x65, 0x54, 0x6f, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x32, 0x30, 0x32, 0x32, 0x12,
	0x60, 0x0a, 0x13, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x32, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x11,
	0x73, 0x65, 0x6e, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x72, 0x0a, 0x19, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x6c, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x6c, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x17, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x6c, 0x79, 0x12, 0x6b, 0x0a, 0x16, 0x65, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x73, 0x74, 0x61,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69,
	0x70, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x15, 0x65, 0x73, 0x74,
	0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68,
	0x69, 0x70, 0x42, 0x0d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x05, 0xb8, 0xe9, 0xc0, 0x03,
	0x01, 0x22, 0x16, 0x0a, 0x14, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8a, 0x02, 0x0a, 0x1a, 0x53, 0x65,
	0x6e, 0x64, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x4d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x0a,
	0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x69,
	0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c,
	0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x73, 0x65,
	0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x22, 0xa7, 0x02, 0x0a, 0x19, 0x53, 0x65, 0x6e, 0x64, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x4d, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x0d,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02,
	0x10, 0x01, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x2e, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x09, 0xba, 0xe9, 0xc0, 0x03, 0x04, 0x6a, 0x02,
	0x08, 0x01, 0x52, 0x0c, 0x69, 0x73, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c,
	0x22, 0xa9, 0x01, 0x0a, 0x20, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02,
	0x10, 0x01, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x06, 0x71, 0x75,
	0x61, 0x72, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x09, 0xba, 0xe9, 0xc0, 0x03,
	0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x06, 0x71, 0x75, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x22, 0xc0, 0x02, 0x0a,
	0x1f, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x6c, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x43, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x06, 0x71, 0x75, 0x61, 0x72, 0x6b, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x09, 0xba, 0xe9, 0xc0, 0x03, 0x04, 0x32, 0x02, 0x20, 0x00,
	0x52, 0x06, 0x71, 0x75, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x2f, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x09, 0xba, 0xe9, 0xc0, 0x03, 0x04, 0x6a, 0x02, 0x08, 0x01, 0x52, 0x0c, 0x69, 0x73, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x3c, 0x0a, 0x1b, 0x69, 0x73, 0x5f,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x5f, 0x76, 0x6f, 0x69, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x67,
	0x69, 0x66, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17,
	0x69, 0x73, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x56, 0x6f, 0x69, 0x64, 0x69, 0x6e, 0x67, 0x47,
	0x69, 0x66, 0x74, 0x43, 0x61, 0x72, 0x64, 0x12, 0x46, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22,
	0x18, 0x0a, 0x16, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63,
	0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x36, 0x0a, 0x1c, 0x4d, 0x69, 0x67,
	0x72, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x32, 0x30, 0x32,
	0x32, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x71, 0x75, 0x61,
	0x72, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x71, 0x75, 0x61, 0x72, 0x6b,
	0x73, 0x22, 0x6d, 0x0a, 0x1d, 0x45, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x4c, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68,
	0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02,
	0x10, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70,
	0x22, 0xa0, 0x07, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4b, 0x0a, 0x0c, 0x6f,
	0x70, 0x65, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x6f, 0x70, 0x65,
	0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5e, 0x0a, 0x13, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x11, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x64, 0x0a, 0x15, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x5f, 0x64, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x44, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x13, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x44, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5e,
	0x0a, 0x13, 0x6e, 0x6f, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x32, 0x2e, 0x4e, 0x6f, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x11, 0x6e, 0x6f, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x5e,
	0x0a, 0x13, 0x6e, 0x6f, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x5f, 0x77, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x32, 0x2e, 0x4e, 0x6f, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x11, 0x6e, 0x6f, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x73,
	0x0a, 0x1a, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x63, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61,
	0x72, 0x79, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x18, 0x74, 0x65, 0x6d, 0x70, 0x6f,
	0x72, 0x61, 0x72, 0x79, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x12, 0x73, 0x0a, 0x1a, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79,
	0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x65,
	0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x18,
	0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x70, 0x0a, 0x19, 0x70, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x5f, 0x75, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x32, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x63, 0x79, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x17, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x63, 0x79, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x48, 0x0a, 0x0b, 0x66, 0x65,
	0x65, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x65, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x65, 0x65, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x05, 0xb8, 0xe9,
	0xc0, 0x03, 0x01, 0x22, 0x9e, 0x03, 0x0a, 0x11, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x0c, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1b, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0xba, 0xe9,
	0xc0, 0x03, 0x05, 0x82, 0x01, 0x02, 0x20, 0x00, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10,
	0x01, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x49,
	0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x09,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x41, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05,
	0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x56, 0x0a, 0x13,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x12, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x22, 0xf3, 0x01, 0x0a, 0x17, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x4a, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x82, 0x01, 0x02, 0x20, 0x00, 0x52,
	0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x49, 0x0a, 0x09,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x09, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x41, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01,
	0x02, 0x10, 0x01, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xc4, 0x02, 0x0a, 0x19, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x44, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0xba, 0xe9, 0xc0,
	0x03, 0x05, 0x82, 0x01, 0x02, 0x20, 0x00, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x49, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x41, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42,
	0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x4d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x9b, 0x02, 0x0a, 0x17, 0x4e, 0x6f, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a,
	0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x09, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x43, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05,
	0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x4d, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x42, 0x09, 0xba, 0xe9,
	0xc0, 0x03, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0xc9, 0x02, 0x0a, 0x17, 0x4e, 0x6f, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x09, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42,
	0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x09, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x43, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01,
	0x02, 0x10, 0x01, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x4d, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x42, 0x09, 0xba, 0xe9, 0xc0, 0x03,
	0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a,
	0x0c, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x09, 0xba, 0xe9, 0xc0, 0x03, 0x04, 0x6a, 0x02, 0x08, 0x01, 0x52, 0x0b,
	0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x22, 0xa2, 0x02, 0x0a, 0x1e,
	0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49,
	0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x09,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x43, 0x0a, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e,
	0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03,
	0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x4d,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x42, 0x09, 0xba,
	0xe9, 0xc0, 0x03, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0xa2, 0x02, 0x0a, 0x1e, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x63, 0x79, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01,
	0x02, 0x10, 0x01, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x43,
	0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42,
	0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x4d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05,
	0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x09, 0xba, 0xe9, 0xc0, 0x03, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x3c, 0x0a, 0x1d, 0x50, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65,
	0x6e, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x22, 0xf1, 0x02, 0x0a, 0x10, 0x46, 0x65, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x65, 0x65,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x65,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x49, 0x0a, 0x09, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42,
	0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x09, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x43, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01,
	0x02, 0x10, 0x01, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x09, 0xba, 0xe9, 0xc0,
	0x03, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x41,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x24, 0x0a, 0x07, 0x46, 0x65, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04,
	0x43, 0x4f, 0x44, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x48, 0x49, 0x52, 0x44, 0x5f,
	0x50, 0x41, 0x52, 0x54, 0x59, 0x10, 0x01, 0x22, 0xdb, 0x08, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x06, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x4e,
	0x6f, 0x6e, 0x63, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x92,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x54, 0x0a, 0x0c,
	0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x67, 0x0a, 0x13, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x11, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x6d, 0x0a, 0x15, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x64, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32,
	0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x44, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x74, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x13, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x44, 0x6f, 0x72, 0x6d,
	0x61, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x67, 0x0a, 0x13, 0x6e, 0x6f,
	0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x4e, 0x6f,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x11, 0x6e, 0x6f, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x12, 0x67, 0x0a, 0x13, 0x6e, 0x6f, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63,
	0x79, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x4e, 0x6f, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x11, 0x6e, 0x6f, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x63, 0x79, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x7c, 0x0a, 0x1a,
	0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63,
	0x79, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3c, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x18, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x63, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x7c, 0x0a, 0x1a, 0x74, 0x65,
	0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x5f,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x63, 0x79, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x18,
	0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x79, 0x0a, 0x19, 0x70, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x5f, 0x75, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x32, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x63, 0x79, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x17, 0x70, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x55, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x12, 0x51, 0x0a, 0x0b, 0x66, 0x65, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x46,
	0x65, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x65, 0x65, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x05,
	0xb8, 0xe9, 0xc0, 0x03, 0x01, 0x22, 0xa3, 0x01, 0x0a, 0x19, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x64,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x41, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52,
	0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x68, 0x61, 0x73, 0x68, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x68, 0x61, 0x73, 0x68, 0x22, 0x1c, 0x0a, 0x1a, 0x4f,
	0x70, 0x65, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x22, 0x22, 0x0a, 0x20, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x22, 0x24, 0x0a,
	0x22, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x44, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x74, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x22, 0x22, 0x0a, 0x20, 0x4e, 0x6f, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x22, 0x22, 0x0a, 0x20, 0x4e, 0x6f, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x63, 0x79, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x22, 0xb5, 0x01, 0x0a, 0x27,
	0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x08, 0x74, 0x72, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e,
	0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03,
	0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x08, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79,
	0x12, 0x41, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x42, 0x0a, 0xba, 0xe9, 0xc0,
	0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x52,
	0x6f, 0x6f, 0x74, 0x22, 0xb5, 0x01, 0x0a, 0x27, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72,
	0x79, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12,
	0x47, 0x0a, 0x08, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x08,
	0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x12, 0x41, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65,
	0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x48,
	0x61, 0x73, 0x68, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52,
	0x0a, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x22, 0x8e, 0x04, 0x0a, 0x26,
	0x50, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
	0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x52, 0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42,
	0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0d, 0x6e, 0x65, 0x77,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x5c, 0x0a, 0x19, 0x6e, 0x65,
	0x77, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x48,
	0x61, 0x73, 0x68, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52,
	0x17, 0x6e, 0x65, 0x77, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x69, 0x0a, 0x1a, 0x6e, 0x65, 0x77, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f,
	0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x0a, 0xba,
	0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x18, 0x6e, 0x65, 0x77, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x15, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x09, 0xba, 0xe9, 0xc0, 0x03, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x13, 0x6e,
	0x65, 0x77, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x41, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x5f, 0x72, 0x6f, 0x6f,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x42, 0x0a, 0xba,
	0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x6b, 0x6c,
	0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x45, 0x0a, 0x0c, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x5f,
	0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61, 0x73,
	0x68, 0x42, 0x0c, 0xba, 0xe9, 0xc0, 0x03, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x40, 0x52,
	0x0b, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x22, 0x67, 0x0a, 0x19,
	0x46, 0x65, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x10, 0x63, 0x6f, 0x64,
	0x65, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd5, 0x01, 0x0a, 0x0c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x54, 0x0a, 0x0d, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x0c,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x60, 0x0a, 0x11,
	0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x10, 0x69, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x0d,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x05, 0xb8, 0xe9, 0xc0, 0x03, 0x01, 0x22, 0x40, 0x0a,
	0x18, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x24, 0x0a, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xba, 0xe9, 0xc0, 0x03, 0x07,
	0x72, 0x05, 0x10, 0x01, 0x18, 0x80, 0x10, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22,
	0xed, 0x01, 0x0a, 0x1c, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x5a, 0x0a,
	0x14, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x13, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x12, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x11, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22,
	0xc4, 0x06, 0x0a, 0x11, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0,
	0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x68, 0x0a, 0x07, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x32, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0xba,
	0xe9, 0xc0, 0x03, 0x08, 0x92, 0x01, 0x05, 0x08, 0x01, 0x10, 0x80, 0x02, 0x52, 0x07, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x8e, 0x05, 0x0a, 0x18, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05,
	0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x62, 0x12, 0x50, 0x0a, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x0a, 0xba, 0xe9, 0xc0,
	0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x57, 0x0a, 0x13, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x82, 0x01, 0x02, 0x20, 0x00, 0x52, 0x11, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36,
	0x0a, 0x17, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x15, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x5e, 0x0a, 0x14, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10,
	0x01, 0x52, 0x13, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x0f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x09, 0xba, 0xe9, 0xc0, 0x03, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x0e, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x47, 0x0a, 0x08, 0x74, 0x72,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f,
	0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x0a, 0xba,
	0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x08, 0x74, 0x72, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x79, 0x12, 0x41, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f,
	0x6f, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x42, 0x0a,
	0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x65,
	0x6e, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x22, 0xde, 0x05, 0x0a, 0x12, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x3f, 0x0a,
	0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x32, 0x2e, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03,
	0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x52,
	0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x62, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65,
	0x6d, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0xba,
	0xe9, 0xc0, 0x03, 0x05, 0x82, 0x01, 0x02, 0x20, 0x00, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x77, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x44, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0xb2, 0x01, 0x02, 0x08,
	0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x24, 0x0a, 0x0e,
	0x69, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x65,
	0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x61, 0x69, 0x72, 0x64, 0x72, 0x6f,
	0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x41, 0x69, 0x72, 0x64, 0x72,
	0x6f, 0x70, 0x12, 0x43, 0x0a, 0x0c, 0x61, 0x69, 0x72, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x41,
	0x69, 0x72, 0x64, 0x72, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x61, 0x69, 0x72, 0x64,
	0x72, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x69, 0x73, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x41, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x0a,
	0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x22, 0x31, 0x0a, 0x0b, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x53, 0x45, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45,
	0x43, 0x45, 0x49, 0x56, 0x45, 0x10, 0x02, 0x22, 0xd0, 0x01, 0x0a, 0x0c, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2f, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xba, 0xe9, 0xc0, 0x03,
	0x0e, 0x72, 0x0c, 0x32, 0x0a, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x7b, 0x33, 0x7d, 0x24, 0x52,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x35, 0x0a, 0x0d, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x42, 0x10, 0xba, 0xe9, 0xc0, 0x03, 0x0b, 0x12, 0x09, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x35, 0x0a, 0x0d, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x42, 0x10, 0xba, 0xe9, 0xc0, 0x03, 0x0b, 0x12, 0x09,
	0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x0c, 0x6e, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x06, 0x71, 0x75, 0x61, 0x72, 0x6b,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x42, 0x09, 0xba, 0xe9, 0xc0, 0x03, 0x04, 0x32, 0x02,
	0x20, 0x00, 0x52, 0x06, 0x71, 0x75, 0x61, 0x72, 0x6b, 0x73, 0x22, 0x81, 0x01, 0x0a, 0x17, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x57, 0x69, 0x74, 0x68, 0x6f,
	0x75, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xba, 0xe9, 0xc0, 0x03, 0x0e, 0x72,
	0x0c, 0x32, 0x0a, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x7b, 0x33, 0x7d, 0x24, 0x52, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x35, 0x0a, 0x0d, 0x6e, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x42, 0x10,
	0xba, 0xe9, 0xc0, 0x03, 0x0b, 0x12, 0x09, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x52, 0x0c, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x8c,
	0x01, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x65, 0x65,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f,
	0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x0a, 0xba,
	0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x07, 0x66, 0x65, 0x65, 0x5f, 0x62, 0x70,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0c, 0xba, 0xe9, 0xc0, 0x03, 0x07, 0x2a, 0x05,
	0x18, 0x90, 0x4e, 0x20, 0x00, 0x52, 0x06, 0x66, 0x65, 0x65, 0x42, 0x70, 0x73, 0x22, 0x86, 0x01,
	0x0a, 0x09, 0x53, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x65,
	0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x50, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x65,
	0x72, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6d, 0x61, 0x78,
	0x50, 0x65, 0x72, 0x44, 0x61, 0x79, 0x22, 0x2d, 0x0a, 0x0c, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x71, 0x75,
	0x61, 0x72, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x51,
	0x75, 0x61, 0x72, 0x6b, 0x73, 0x22, 0x73, 0x0a, 0x11, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x61,
	0x78, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x50, 0x65, 0x72, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x69,
	0x6e, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x6d, 0x69, 0x6e, 0x50, 0x65, 0x72, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x70, 0x0a, 0x0e, 0x42, 0x75,
	0x79, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2e, 0x0a, 0x13,
	0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x6d, 0x69, 0x6e, 0x50, 0x65,
	0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13,
	0x6d, 0x61, 0x78, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x50, 0x65,
	0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2b, 0x0a, 0x06,
	0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x0b, 0xba, 0xe9, 0xc0, 0x03, 0x06, 0x7a, 0x04, 0x10, 0x08,
	0x18, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2a, 0x41, 0x0a, 0x0b, 0x41, 0x69, 0x72,
	0x64, 0x72, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x49, 0x56, 0x45, 0x5f, 0x46, 0x49,
	0x52, 0x53, 0x54, 0x5f, 0x4b, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x45, 0x54,
	0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x4b, 0x49, 0x4e, 0x10, 0x02, 0x32, 0xa3, 0x09, 0x0a,
	0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x67, 0x0a, 0x0c,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x32, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x72, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2d, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32,
	0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e,
	0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x55, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0xb1, 0x01, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x69,
	0x7a, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x63, 0x79, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x42, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x32, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x64,
	0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63,
	0x79, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x43, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x69, 0x7a, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x63, 0x79, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x73, 0x12, 0x25, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x47,
	0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x72, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2d, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7b, 0x0a, 0x14, 0x43, 0x61, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x54, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x32, 0x2e, 0x43, 0x61, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x54, 0x6f,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x61, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x54, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x54, 0x0a, 0x07, 0x41, 0x69, 0x72, 0x64, 0x72, 0x6f, 0x70, 0x12, 0x23, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x32, 0x2e, 0x41, 0x69, 0x72, 0x64, 0x72, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x24, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x69, 0x72, 0x64, 0x72, 0x6f, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x04, 0x53, 0x77, 0x61, 0x70, 0x12,
	0x20, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x87, 0x01, 0x0a, 0x18, 0x44, 0x65, 0x63,
	0x6c, 0x61, 0x72, 0x65, 0x46, 0x69, 0x61, 0x74, 0x4f, 0x6e, 0x72, 0x61, 0x6d, 0x70, 0x41, 0x74,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x12, 0x34, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x63, 0x6c,
	0x61, 0x72, 0x65, 0x46, 0x69, 0x61, 0x74, 0x4f, 0x6e, 0x72, 0x61, 0x6d, 0x70, 0x41, 0x74, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x32, 0x2e, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x46, 0x69, 0x61, 0x74, 0x4f, 0x6e, 0x72,
	0x61, 0x6d, 0x70, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x87, 0x01, 0x0a, 0x1e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x69,
	0x6e, 0x63, 0x2e, 0x67, 0x65, 0x6e, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x5a, 0x52, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x2d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x63, 0x6f, 0x64, 0x65, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2d, 0x61, 0x70,
	0x69, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x32, 0x3b, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0xa2, 0x02, 0x10, 0x41, 0x50, 0x42, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_transaction_v2_transaction_service_proto_rawDescOnce sync.Once
	file_transaction_v2_transaction_service_proto_rawDescData = file_transaction_v2_transaction_service_proto_rawDesc
)

func file_transaction_v2_transaction_service_proto_rawDescGZIP() []byte {
	file_transaction_v2_transaction_service_proto_rawDescOnce.Do(func() {
		file_transaction_v2_transaction_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_transaction_v2_transaction_service_proto_rawDescData)
	})
	return file_transaction_v2_transaction_service_proto_rawDescData
}

var file_transaction_v2_transaction_service_proto_enumTypes = make([]protoimpl.EnumInfo, 17)
var file_transaction_v2_transaction_service_proto_msgTypes = make([]protoimpl.MessageInfo, 77)
var file_transaction_v2_transaction_service_proto_goTypes = []interface{}{
	(AirdropType)(0),                                           // 0: code.transaction.v2.AirdropType
	(SubmitIntentResponse_Success_Code)(0),                     // 1: code.transaction.v2.SubmitIntentResponse.Success.Code
	(SubmitIntentResponse_Error_Code)(0),                       // 2: code.transaction.v2.SubmitIntentResponse.Error.Code
	(GetIntentMetadataResponse_Result)(0),                      // 3: code.transaction.v2.GetIntentMetadataResponse.Result
	(GetPrivacyUpgradeStatusResponse_Result)(0),                // 4: code.transaction.v2.GetPrivacyUpgradeStatusResponse.Result
	(GetPrivacyUpgradeStatusResponse_Status)(0),                // 5: code.transaction.v2.GetPrivacyUpgradeStatusResponse.Status
	(GetPrioritizedIntentsForPrivacyUpgradeResponse_Result)(0), // 6: code.transaction.v2.GetPrioritizedIntentsForPrivacyUpgradeResponse.Result
	(GetLimitsResponse_Result)(0),                              // 7: code.transaction.v2.GetLimitsResponse.Result
	(GetPaymentHistoryRequest_Direction)(0),                    // 8: code.transaction.v2.GetPaymentHistoryRequest.Direction
	(GetPaymentHistoryResponse_Result)(0),                      // 9: code.transaction.v2.GetPaymentHistoryResponse.Result
	(CanWithdrawToAccountResponse_AccountType)(0),              // 10: code.transaction.v2.CanWithdrawToAccountResponse.AccountType
	(AirdropResponse_Result)(0),                                // 11: code.transaction.v2.AirdropResponse.Result
	(SwapResponse_Success_Code)(0),                             // 12: code.transaction.v2.SwapResponse.Success.Code
	(SwapResponse_Error_Code)(0),                               // 13: code.transaction.v2.SwapResponse.Error.Code
	(DeclareFiatOnrampAttemptResponse_Result)(0),               // 14: code.transaction.v2.DeclareFiatOnrampAttemptResponse.Result
	(FeePaymentAction_FeeType)(0),                              // 15: code.transaction.v2.FeePaymentAction.FeeType
	(PaymentHistoryItem_PaymentType)(0),                        // 16: code.transaction.v2.PaymentHistoryItem.PaymentType
	(*SubmitIntentRequest)(nil),                                // 17: code.transaction.v2.SubmitIntentRequest
	(*SubmitIntentResponse)(nil),                               // 18: code.transaction.v2.SubmitIntentResponse
	(*GetIntentMetadataRequest)(nil),                           // 19: code.transaction.v2.GetIntentMetadataRequest
	(*GetIntentMetadataResponse)(nil),                          // 20: code.transaction.v2.GetIntentMetadataResponse
	(*GetPrivacyUpgradeStatusRequest)(nil),                     // 21: code.transaction.v2.GetPrivacyUpgradeStatusRequest
	(*GetPrivacyUpgradeStatusResponse)(nil),                    // 22: code.transaction.v2.GetPrivacyUpgradeStatusResponse
	(*GetPrioritizedIntentsForPrivacyUpgradeRequest)(nil),      // 23: code.transaction.v2.GetPrioritizedIntentsForPrivacyUpgradeRequest
	(*GetPrioritizedIntentsForPrivacyUpgradeResponse)(nil),     // 24: code.transaction.v2.GetPrioritizedIntentsForPrivacyUpgradeResponse
	(*GetLimitsRequest)(nil),                                   // 25: code.transaction.v2.GetLimitsRequest
	(*GetLimitsResponse)(nil),                                  // 26: code.transaction.v2.GetLimitsResponse
	(*GetPaymentHistoryRequest)(nil),                           // 27: code.transaction.v2.GetPaymentHistoryRequest
	(*GetPaymentHistoryResponse)(nil),                          // 28: code.transaction.v2.GetPaymentHistoryResponse
	(*CanWithdrawToAccountRequest)(nil),                        // 29: code.transaction.v2.CanWithdrawToAccountRequest
	(*CanWithdrawToAccountResponse)(nil),                       // 30: code.transaction.v2.CanWithdrawToAccountResponse
	(*AirdropRequest)(nil),                                     // 31: code.transaction.v2.AirdropRequest
	(*AirdropResponse)(nil),                                    // 32: code.transaction.v2.AirdropResponse
	(*SwapRequest)(nil),                                        // 33: code.transaction.v2.SwapRequest
	(*SwapResponse)(nil),                                       // 34: code.transaction.v2.SwapResponse
	(*DeclareFiatOnrampAttemptRequest)(nil),                    // 35: code.transaction.v2.DeclareFiatOnrampAttemptRequest
	(*DeclareFiatOnrampAttemptResponse)(nil),                   // 36: code.transaction.v2.DeclareFiatOnrampAttemptResponse
	(*Metadata)(nil),                                           // 37: code.transaction.v2.Metadata
	(*OpenAccountsMetadata)(nil),                               // 38: code.transaction.v2.OpenAccountsMetadata
	(*SendPrivatePaymentMetadata)(nil),                         // 39: code.transaction.v2.SendPrivatePaymentMetadata
	(*SendPublicPaymentMetadata)(nil),                          // 40: code.transaction.v2.SendPublicPaymentMetadata
	(*ReceivePaymentsPrivatelyMetadata)(nil),                   // 41: code.transaction.v2.ReceivePaymentsPrivatelyMetadata
	(*ReceivePaymentsPubliclyMetadata)(nil),                    // 42: code.transaction.v2.ReceivePaymentsPubliclyMetadata
	(*UpgradePrivacyMetadata)(nil),                             // 43: code.transaction.v2.UpgradePrivacyMetadata
	(*MigrateToPrivacy2022Metadata)(nil),                       // 44: code.transaction.v2.MigrateToPrivacy2022Metadata
	(*EstablishRelationshipMetadata)(nil),                      // 45: code.transaction.v2.EstablishRelationshipMetadata
	(*Action)(nil),                                             // 46: code.transaction.v2.Action
	(*OpenAccountAction)(nil),                                  // 47: code.transaction.v2.OpenAccountAction
	(*CloseEmptyAccountAction)(nil),                            // 48: code.transaction.v2.CloseEmptyAccountAction
	(*CloseDormantAccountAction)(nil),                          // 49: code.transaction.v2.CloseDormantAccountAction
	(*NoPrivacyTransferAction)(nil),                            // 50: code.transaction.v2.NoPrivacyTransferAction
	(*NoPrivacyWithdrawAction)(nil),                            // 51: code.transaction.v2.NoPrivacyWithdrawAction
	(*TemporaryPrivacyTransferAction)(nil),                     // 52: code.transaction.v2.TemporaryPrivacyTransferAction
	(*TemporaryPrivacyExchangeAction)(nil),                     // 53: code.transaction.v2.TemporaryPrivacyExchangeAction
	(*PermanentPrivacyUpgradeAction)(nil),                      // 54: code.transaction.v2.PermanentPrivacyUpgradeAction
	(*FeePaymentAction)(nil),                                   // 55: code.transaction.v2.FeePaymentAction
	(*ServerParameter)(nil),                                    // 56: code.transaction.v2.ServerParameter
	(*NoncedTransactionMetadata)(nil),                          // 57: code.transaction.v2.NoncedTransactionMetadata
	(*OpenAccountServerParameter)(nil),                         // 58: code.transaction.v2.OpenAccountServerParameter
	(*CloseEmptyAccountServerParameter)(nil),                   // 59: code.transaction.v2.CloseEmptyAccountServerParameter
	(*CloseDormantAccountServerParameter)(nil),                 // 60: code.transaction.v2.CloseDormantAccountServerParameter
	(*NoPrivacyTransferServerParameter)(nil),                   // 61: code.transaction.v2.NoPrivacyTransferServerParameter
	(*NoPrivacyWithdrawServerParameter)(nil),                   // 62: code.transaction.v2.NoPrivacyWithdrawServerParameter
	(*TemporaryPrivacyTransferServerParameter)(nil),            // 63: code.transaction.v2.TemporaryPrivacyTransferServerParameter
	(*TemporaryPrivacyExchangeServerParameter)(nil),            // 64: code.transaction.v2.TemporaryPrivacyExchangeServerParameter
	(*PermanentPrivacyUpgradeServerParameter)(nil),             // 65: code.transaction.v2.PermanentPrivacyUpgradeServerParameter
	(*FeePaymentServerParameter)(nil),                          // 66: code.transaction.v2.FeePaymentServerParameter
	(*ErrorDetails)(nil),                                       // 67: code.transaction.v2.ErrorDetails
	(*ReasonStringErrorDetails)(nil),                           // 68: code.transaction.v2.ReasonStringErrorDetails
	(*InvalidSignatureErrorDetails)(nil),                       // 69: code.transaction.v2.InvalidSignatureErrorDetails
	(*UpgradeableIntent)(nil),                                  // 70: code.transaction.v2.UpgradeableIntent
	(*PaymentHistoryItem)(nil),                                 // 71: code.transaction.v2.PaymentHistoryItem
	(*ExchangeData)(nil),                                       // 72: code.transaction.v2.ExchangeData
	(*ExchangeDataWithoutRate)(nil),                            // 73: code.transaction.v2.ExchangeDataWithoutRate
	(*AdditionalFeePayment)(nil),                               // 74: code.transaction.v2.AdditionalFeePayment
	(*SendLimit)(nil),                                          // 75: code.transaction.v2.SendLimit
	(*DepositLimit)(nil),                                       // 76: code.transaction.v2.DepositLimit
	(*MicroPaymentLimit)(nil),                                  // 77: code.transaction.v2.MicroPaymentLimit
	(*BuyModuleLimit)(nil),                                     // 78: code.transaction.v2.BuyModuleLimit
	(*Cursor)(nil),                                             // 79: code.transaction.v2.Cursor
	(*SubmitIntentRequest_SubmitActions)(nil),                  // 80: code.transaction.v2.SubmitIntentRequest.SubmitActions
	(*SubmitIntentRequest_SubmitSignatures)(nil),               // 81: code.transaction.v2.SubmitIntentRequest.SubmitSignatures
	(*SubmitIntentResponse_ServerParameters)(nil),              // 82: code.transaction.v2.SubmitIntentResponse.ServerParameters
	(*SubmitIntentResponse_Success)(nil),                       // 83: code.transaction.v2.SubmitIntentResponse.Success
	(*SubmitIntentResponse_Error)(nil),                         // 84: code.transaction.v2.SubmitIntentResponse.Error
	nil,                                                        // 85: code.transaction.v2.GetLimitsResponse.SendLimitsByCurrencyEntry
	nil,                                                        // 86: code.transaction.v2.GetLimitsResponse.MicroPaymentLimitsByCurrencyEntry
	nil,                                                        // 87: code.transaction.v2.GetLimitsResponse.BuyModuleLimitsByCurrencyEntry
	(*SwapRequest_Initiate)(nil),                               // 88: code.transaction.v2.SwapRequest.Initiate
	(*SwapRequest_SubmitSignature)(nil),                        // 89: code.transaction.v2.SwapRequest.SubmitSignature
	(*SwapResponse_ServerParameters)(nil),                      // 90: code.transaction.v2.SwapResponse.ServerParameters
	(*SwapResponse_Success)(nil),                               // 91: code.transaction.v2.SwapResponse.Success
	(*SwapResponse_Error)(nil),                                 // 92: code.transaction.v2.SwapResponse.Error
	(*UpgradeableIntent_UpgradeablePrivateAction)(nil),         // 93: code.transaction.v2.UpgradeableIntent.UpgradeablePrivateAction
	(*v1.IntentId)(nil),                                        // 94: code.common.v1.IntentId
	(*v1.SolanaAccountId)(nil),                                 // 95: code.common.v1.SolanaAccountId
	(*v1.Signature)(nil),                                       // 96: code.common.v1.Signature
	(*timestamppb.Timestamp)(nil),                              // 97: google.protobuf.Timestamp
	(*v1.UUID)(nil),                                            // 98: code.common.v1.UUID
	(*v1.Relationship)(nil),                                    // 99: code.common.v1.Relationship
	(v1.AccountType)(0),                                        // 100: code.common.v1.AccountType
	(*v1.Blockhash)(nil),                                       // 101: code.common.v1.Blockhash
	(*v1.Hash)(nil),                                            // 102: code.common.v1.Hash
	(*v1.Transaction)(nil),                                     // 103: code.common.v1.Transaction
	(*v1.DeviceToken)(nil),                                     // 104: code.common.v1.DeviceToken
	(*v1.InstructionAccount)(nil),                              // 105: code.common.v1.InstructionAccount
}
var file_transaction_v2_transaction_service_proto_depIdxs = []int32{
	80,  // 0: code.transaction.v2.SubmitIntentRequest.submit_actions:type_name -> code.transaction.v2.SubmitIntentRequest.SubmitActions
	81,  // 1: code.transaction.v2.SubmitIntentRequest.submit_signatures:type_name -> code.transaction.v2.SubmitIntentRequest.SubmitSignatures
	82,  // 2: code.transaction.v2.SubmitIntentResponse.server_parameters:type_name -> code.transaction.v2.SubmitIntentResponse.ServerParameters
	83,  // 3: code.transaction.v2.SubmitIntentResponse.success:type_name -> code.transaction.v2.SubmitIntentResponse.Success
	84,  // 4: code.transaction.v2.SubmitIntentResponse.error:type_name -> code.transaction.v2.SubmitIntentResponse.Error
	94,  // 5: code.transaction.v2.GetIntentMetadataRequest.intent_id:type_name -> code.common.v1.IntentId
	95,  // 6: code.transaction.v2.GetIntentMetadataRequest.owner:type_name -> code.common.v1.SolanaAccountId
	96,  // 7: code.transaction.v2.GetIntentMetadataRequest.signature:type_name -> code.common.v1.Signature
	3,   // 8: code.transaction.v2.GetIntentMetadataResponse.result:type_name -> code.transaction.v2.GetIntentMetadataResponse.Result
	37,  // 9: code.transaction.v2.GetIntentMetadataResponse.metadata:type_name -> code.transaction.v2.Metadata
	94,  // 10: code.transaction.v2.GetPrivacyUpgradeStatusRequest.intent_id:type_name -> code.common.v1.IntentId
	4,   // 11: code.transaction.v2.GetPrivacyUpgradeStatusResponse.result:type_name -> code.transaction.v2.GetPrivacyUpgradeStatusResponse.Result
	5,   // 12: code.transaction.v2.GetPrivacyUpgradeStatusResponse.status:type_name -> code.transaction.v2.GetPrivacyUpgradeStatusResponse.Status
	95,  // 13: code.transaction.v2.GetPrioritizedIntentsForPrivacyUpgradeRequest.owner:type_name -> code.common.v1.SolanaAccountId
	96,  // 14: code.transaction.v2.GetPrioritizedIntentsForPrivacyUpgradeRequest.signature:type_name -> code.common.v1.Signature
	6,   // 15: code.transaction.v2.GetPrioritizedIntentsForPrivacyUpgradeResponse.result:type_name -> code.transaction.v2.GetPrioritizedIntentsForPrivacyUpgradeResponse.Result
	70,  // 16: code.transaction.v2.GetPrioritizedIntentsForPrivacyUpgradeResponse.items:type_name -> code.transaction.v2.UpgradeableIntent
	95,  // 17: code.transaction.v2.GetLimitsRequest.owner:type_name -> code.common.v1.SolanaAccountId
	96,  // 18: code.transaction.v2.GetLimitsRequest.signature:type_name -> code.common.v1.Signature
	97,  // 19: code.transaction.v2.GetLimitsRequest.consumed_since:type_name -> google.protobuf.Timestamp
	7,   // 20: code.transaction.v2.GetLimitsResponse.result:type_name -> code.transaction.v2.GetLimitsResponse.Result
	85,  // 21: code.transaction.v2.GetLimitsResponse.send_limits_by_currency:type_name -> code.transaction.v2.GetLimitsResponse.SendLimitsByCurrencyEntry
	76,  // 22: code.transaction.v2.GetLimitsResponse.deposit_limit:type_name -> code.transaction.v2.DepositLimit
	86,  // 23: code.transaction.v2.GetLimitsResponse.micro_payment_limits_by_currency:type_name -> code.transaction.v2.GetLimitsResponse.MicroPaymentLimitsByCurrencyEntry
	87,  // 24: code.transaction.v2.GetLimitsResponse.buy_module_limits_by_currency:type_name -> code.transaction.v2.GetLimitsResponse.BuyModuleLimitsByCurrencyEntry
	95,  // 25: code.transaction.v2.GetPaymentHistoryRequest.owner:type_name -> code.common.v1.SolanaAccountId
	79,  // 26: code.transaction.v2.GetPaymentHistoryRequest.cursor:type_name -> code.transaction.v2.Cursor
	8,   // 27: code.transaction.v2.GetPaymentHistoryRequest.direction:type_name -> code.transaction.v2.GetPaymentHistoryRequest.Direction
	96,  // 28: code.transaction.v2.GetPaymentHistoryRequest.signature:type_name -> code.common.v1.Signature
	9,   // 29: code.transaction.v2.GetPaymentHistoryResponse.result:type_name -> code.transaction.v2.GetPaymentHistoryResponse.Result
	71,  // 30: code.transaction.v2.GetPaymentHistoryResponse.items:type_name -> code.transaction.v2.PaymentHistoryItem
	95,  // 31: code.transaction.v2.CanWithdrawToAccountRequest.account:type_name -> code.common.v1.SolanaAccountId
	10,  // 32: code.transaction.v2.CanWithdrawToAccountResponse.account_type:type_name -> code.transaction.v2.CanWithdrawToAccountResponse.AccountType
	0,   // 33: code.transaction.v2.AirdropRequest.airdrop_type:type_name -> code.transaction.v2.AirdropType
	95,  // 34: code.transaction.v2.AirdropRequest.owner:type_name -> code.common.v1.SolanaAccountId
	96,  // 35: code.transaction.v2.AirdropRequest.signature:type_name -> code.common.v1.Signature
	11,  // 36: code.transaction.v2.AirdropResponse.result:type_name -> code.transaction.v2.AirdropResponse.Result
	72,  // 37: code.transaction.v2.AirdropResponse.exchange_data:type_name -> code.transaction.v2.ExchangeData
	88,  // 38: code.transaction.v2.SwapRequest.initiate:type_name -> code.transaction.v2.SwapRequest.Initiate
	89,  // 39: code.transaction.v2.SwapRequest.submit_signature:type_name -> code.transaction.v2.SwapRequest.SubmitSignature
	90,  // 40: code.transaction.v2.SwapResponse.server_parameters:type_name -> code.transaction.v2.SwapResponse.ServerParameters
	91,  // 41: code.transaction.v2.SwapResponse.success:type_name -> code.transaction.v2.SwapResponse.Success
	92,  // 42: code.transaction.v2.SwapResponse.error:type_name -> code.transaction.v2.SwapResponse.Error
	95,  // 43: code.transaction.v2.DeclareFiatOnrampAttemptRequest.owner:type_name -> code.common.v1.SolanaAccountId
	73,  // 44: code.transaction.v2.DeclareFiatOnrampAttemptRequest.purchase_amount:type_name -> code.transaction.v2.ExchangeDataWithoutRate
	98,  // 45: code.transaction.v2.DeclareFiatOnrampAttemptRequest.nonce:type_name -> code.common.v1.UUID
	96,  // 46: code.transaction.v2.DeclareFiatOnrampAttemptRequest.signature:type_name -> code.common.v1.Signature
	14,  // 47: code.transaction.v2.DeclareFiatOnrampAttemptResponse.result:type_name -> code.transaction.v2.DeclareFiatOnrampAttemptResponse.Result
	38,  // 48: code.transaction.v2.Metadata.open_accounts:type_name -> code.transaction.v2.OpenAccountsMetadata
	39,  // 49: code.transaction.v2.Metadata.send_private_payment:type_name -> code.transaction.v2.SendPrivatePaymentMetadata
	41,  // 50: code.transaction.v2.Metadata.receive_payments_privately:type_name -> code.transaction.v2.ReceivePaymentsPrivatelyMetadata
	43,  // 51: code.transaction.v2.Metadata.upgrade_privacy:type_name -> code.transaction.v2.UpgradePrivacyMetadata
	44,  // 52: code.transaction.v2.Metadata.migrate_to_privacy_2022:type_name -> code.transaction.v2.MigrateToPrivacy2022Metadata
	40,  // 53: code.transaction.v2.Metadata.send_public_payment:type_name -> code.transaction.v2.SendPublicPaymentMetadata
	42,  // 54: code.transaction.v2.Metadata.receive_payments_publicly:type_name -> code.transaction.v2.ReceivePaymentsPubliclyMetadata
	45,  // 55: code.transaction.v2.Metadata.establish_relationship:type_name -> code.transaction.v2.EstablishRelationshipMetadata
	95,  // 56: code.transaction.v2.SendPrivatePaymentMetadata.destination:type_name -> code.common.v1.SolanaAccountId
	72,  // 57: code.transaction.v2.SendPrivatePaymentMetadata.exchange_data:type_name -> code.transaction.v2.ExchangeData
	95,  // 58: code.transaction.v2.SendPublicPaymentMetadata.source:type_name -> code.common.v1.SolanaAccountId
	95,  // 59: code.transaction.v2.SendPublicPaymentMetadata.destination:type_name -> code.common.v1.SolanaAccountId
	72,  // 60: code.transaction.v2.SendPublicPaymentMetadata.exchange_data:type_name -> code.transaction.v2.ExchangeData
	95,  // 61: code.transaction.v2.ReceivePaymentsPrivatelyMetadata.source:type_name -> code.common.v1.SolanaAccountId
	95,  // 62: code.transaction.v2.ReceivePaymentsPubliclyMetadata.source:type_name -> code.common.v1.SolanaAccountId
	72,  // 63: code.transaction.v2.ReceivePaymentsPubliclyMetadata.exchange_data:type_name -> code.transaction.v2.ExchangeData
	99,  // 64: code.transaction.v2.EstablishRelationshipMetadata.relationship:type_name -> code.common.v1.Relationship
	47,  // 65: code.transaction.v2.Action.open_account:type_name -> code.transaction.v2.OpenAccountAction
	48,  // 66: code.transaction.v2.Action.close_empty_account:type_name -> code.transaction.v2.CloseEmptyAccountAction
	49,  // 67: code.transaction.v2.Action.close_dormant_account:type_name -> code.transaction.v2.CloseDormantAccountAction
	50,  // 68: code.transaction.v2.Action.no_privacy_transfer:type_name -> code.transaction.v2.NoPrivacyTransferAction
	51,  // 69: code.transaction.v2.Action.no_privacy_withdraw:type_name -> code.transaction.v2.NoPrivacyWithdrawAction
	52,  // 70: code.transaction.v2.Action.temporary_privacy_transfer:type_name -> code.transaction.v2.TemporaryPrivacyTransferAction
	53,  // 71: code.transaction.v2.Action.temporary_privacy_exchange:type_name -> code.transaction.v2.TemporaryPrivacyExchangeAction
	54,  // 72: code.transaction.v2.Action.permanent_privacy_upgrade:type_name -> code.transaction.v2.PermanentPrivacyUpgradeAction
	55,  // 73: code.transaction.v2.Action.fee_payment:type_name -> code.transaction.v2.FeePaymentAction
	100, // 74: code.transaction.v2.OpenAccountAction.account_type:type_name -> code.common.v1.AccountType
	95,  // 75: code.transaction.v2.OpenAccountAction.owner:type_name -> code.common.v1.SolanaAccountId
	95,  // 76: code.transaction.v2.OpenAccountAction.authority:type_name -> code.common.v1.SolanaAccountId
	95,  // 77: code.transaction.v2.OpenAccountAction.token:type_name -> code.common.v1.SolanaAccountId
	96,  // 78: code.transaction.v2.OpenAccountAction.authority_signature:type_name -> code.common.v1.Signature
	100, // 79: code.transaction.v2.CloseEmptyAccountAction.account_type:type_name -> code.common.v1.AccountType
	95,  // 80: code.transaction.v2.CloseEmptyAccountAction.authority:type_name -> code.common.v1.SolanaAccountId
	95,  // 81: code.transaction.v2.CloseEmptyAccountAction.token:type_name -> code.common.v1.SolanaAccountId
	100, // 82: code.transaction.v2.CloseDormantAccountAction.account_type:type_name -> code.common.v1.AccountType
	95,  // 83: code.transaction.v2.CloseDormantAccountAction.authority:type_name -> code.common.v1.SolanaAccountId
	95,  // 84: code.transaction.v2.CloseDormantAccountAction.token:type_name -> code.common.v1.SolanaAccountId
	95,  // 85: code.transaction.v2.CloseDormantAccountAction.destination:type_name -> code.common.v1.SolanaAccountId
	95,  // 86: code.transaction.v2.NoPrivacyTransferAction.authority:type_name -> code.common.v1.SolanaAccountId
	95,  // 87: code.transaction.v2.NoPrivacyTransferAction.source:type_name -> code.common.v1.SolanaAccountId
	95,  // 88: code.transaction.v2.NoPrivacyTransferAction.destination:type_name -> code.common.v1.SolanaAccountId
	95,  // 89: code.transaction.v2.NoPrivacyWithdrawAction.authority:type_name -> code.common.v1.SolanaAccountId
	95,  // 90: code.transaction.v2.NoPrivacyWithdrawAction.source:type_name -> code.common.v1.SolanaAccountId
	95,  // 91: code.transaction.v2.NoPrivacyWithdrawAction.destination:type_name -> code.common.v1.SolanaAccountId
	95,  // 92: code.transaction.v2.TemporaryPrivacyTransferAction.authority:type_name -> code.common.v1.SolanaAccountId
	95,  // 93: code.transaction.v2.TemporaryPrivacyTransferAction.source:type_name -> code.common.v1.SolanaAccountId
	95,  // 94: code.transaction.v2.TemporaryPrivacyTransferAction.destination:type_name -> code.common.v1.SolanaAccountId
	95,  // 95: code.transaction.v2.TemporaryPrivacyExchangeAction.authority:type_name -> code.common.v1.SolanaAccountId
	95,  // 96: code.transaction.v2.TemporaryPrivacyExchangeAction.source:type_name -> code.common.v1.SolanaAccountId
	95,  // 97: code.transaction.v2.TemporaryPrivacyExchangeAction.destination:type_name -> code.common.v1.SolanaAccountId
	15,  // 98: code.transaction.v2.FeePaymentAction.type:type_name -> code.transaction.v2.FeePaymentAction.FeeType
	95,  // 99: code.transaction.v2.FeePaymentAction.authority:type_name -> code.common.v1.SolanaAccountId
	95,  // 100: code.transaction.v2.FeePaymentAction.source:type_name -> code.common.v1.SolanaAccountId
	95,  // 101: code.transaction.v2.FeePaymentAction.destination:type_name -> code.common.v1.SolanaAccountId
	57,  // 102: code.transaction.v2.ServerParameter.nonces:type_name -> code.transaction.v2.NoncedTransactionMetadata
	58,  // 103: code.transaction.v2.ServerParameter.open_account:type_name -> code.transaction.v2.OpenAccountServerParameter
	59,  // 104: code.transaction.v2.ServerParameter.close_empty_account:type_name -> code.transaction.v2.CloseEmptyAccountServerParameter
	60,  // 105: code.transaction.v2.ServerParameter.close_dormant_account:type_name -> code.transaction.v2.CloseDormantAccountServerParameter
	61,  // 106: code.transaction.v2.ServerParameter.no_privacy_transfer:type_name -> code.transaction.v2.NoPrivacyTransferServerParameter
	62,  // 107: code.transaction.v2.ServerParameter.no_privacy_withdraw:type_name -> code.transaction.v2.NoPrivacyWithdrawServerParameter
	63,  // 108: code.transaction.v2.ServerParameter.temporary_privacy_transfer:type_name -> code.transaction.v2.TemporaryPrivacyTransferServerParameter
	64,  // 109: code.transaction.v2.ServerParameter.temporary_privacy_exchange:type_name -> code.transaction.v2.TemporaryPrivacyExchangeServerParameter
	65,  // 110: code.transaction.v2.ServerParameter.permanent_privacy_upgrade:type_name -> code.transaction.v2.PermanentPrivacyUpgradeServerParameter
	66,  // 111: code.transaction.v2.ServerParameter.fee_payment:type_name -> code.transaction.v2.FeePaymentServerParameter
	95,  // 112: code.transaction.v2.NoncedTransactionMetadata.nonce:type_name -> code.common.v1.SolanaAccountId
	101, // 113: code.transaction.v2.NoncedTransactionMetadata.blockhash:type_name -> code.common.v1.Blockhash
	95,  // 114: code.transaction.v2.TemporaryPrivacyTransferServerParameter.treasury:type_name -> code.common.v1.SolanaAccountId
	102, // 115: code.transaction.v2.TemporaryPrivacyTransferServerParameter.recent_root:type_name -> code.common.v1.Hash
	95,  // 116: code.transaction.v2.TemporaryPrivacyExchangeServerParameter.treasury:type_name -> code.common.v1.SolanaAccountId
	102, // 117: code.transaction.v2.TemporaryPrivacyExchangeServerParameter.recent_root:type_name -> code.common.v1.Hash
	95,  // 118: code.transaction.v2.PermanentPrivacyUpgradeServerParameter.new_commitment:type_name -> code.common.v1.SolanaAccountId
	102, // 119: code.transaction.v2.PermanentPrivacyUpgradeServerParameter.new_commitment_transcript:type_name -> code.common.v1.Hash
	95,  // 120: code.transaction.v2.PermanentPrivacyUpgradeServerParameter.new_commitment_destination:type_name -> code.common.v1.SolanaAccountId
	102, // 121: code.transaction.v2.PermanentPrivacyUpgradeServerParameter.merkle_root:type_name -> code.common.v1.Hash
	102, // 122: code.transaction.v2.PermanentPrivacyUpgradeServerParameter.merkle_proof:type_name -> code.common.v1.Hash
	95,  // 123: code.transaction.v2.FeePaymentServerParameter.code_destination:type_name -> code.common.v1.SolanaAccountId
	68,  // 124: code.transaction.v2.ErrorDetails.reason_string:type_name -> code.transaction.v2.ReasonStringErrorDetails
	69,  // 125: code.transaction.v2.ErrorDetails.invalid_signature:type_name -> code.transaction.v2.InvalidSignatureErrorDetails
	103, // 126: code.transaction.v2.InvalidSignatureErrorDetails.expected_transaction:type_name -> code.common.v1.Transaction
	96,  // 127: code.transaction.v2.InvalidSignatureErrorDetails.provided_signature:type_name -> code.common.v1.Signature
	94,  // 128: code.transaction.v2.UpgradeableIntent.id:type_name -> code.common.v1.IntentId
	93,  // 129: code.transaction.v2.UpgradeableIntent.actions:type_name -> code.transaction.v2.UpgradeableIntent.UpgradeablePrivateAction
	79,  // 130: code.transaction.v2.PaymentHistoryItem.cursor:type_name -> code.transaction.v2.Cursor
	72,  // 131: code.transaction.v2.PaymentHistoryItem.exchange_data:type_name -> code.transaction.v2.ExchangeData
	16,  // 132: code.transaction.v2.PaymentHistoryItem.payment_type:type_name -> code.transaction.v2.PaymentHistoryItem.PaymentType
	97,  // 133: code.transaction.v2.PaymentHistoryItem.timestamp:type_name -> google.protobuf.Timestamp
	0,   // 134: code.transaction.v2.PaymentHistoryItem.airdrop_type:type_name -> code.transaction.v2.AirdropType
	94,  // 135: code.transaction.v2.PaymentHistoryItem.intent_id:type_name -> code.common.v1.IntentId
	95,  // 136: code.transaction.v2.AdditionalFeePayment.destination:type_name -> code.common.v1.SolanaAccountId
	94,  // 137: code.transaction.v2.SubmitIntentRequest.SubmitActions.id:type_name -> code.common.v1.IntentId
	95,  // 138: code.transaction.v2.SubmitIntentRequest.SubmitActions.owner:type_name -> code.common.v1.SolanaAccountId
	37,  // 139: code.transaction.v2.SubmitIntentRequest.SubmitActions.metadata:type_name -> code.transaction.v2.Metadata
	46,  // 140: code.transaction.v2.SubmitIntentRequest.SubmitActions.actions:type_name -> code.transaction.v2.Action
	96,  // 141: code.transaction.v2.SubmitIntentRequest.SubmitActions.signature:type_name -> code.common.v1.Signature
	104, // 142: code.transaction.v2.SubmitIntentRequest.SubmitActions.device_token:type_name -> code.common.v1.DeviceToken
	96,  // 143: code.transaction.v2.SubmitIntentRequest.SubmitSignatures.signatures:type_name -> code.common.v1.Signature
	56,  // 144: code.transaction.v2.SubmitIntentResponse.ServerParameters.server_parameters:type_name -> code.transaction.v2.ServerParameter
	1,   // 145: code.transaction.v2.SubmitIntentResponse.Success.code:type_name -> code.transaction.v2.SubmitIntentResponse.Success.Code
	2,   // 146: code.transaction.v2.SubmitIntentResponse.Error.code:type_name -> code.transaction.v2.SubmitIntentResponse.Error.Code
	67,  // 147: code.transaction.v2.SubmitIntentResponse.Error.error_details:type_name -> code.transaction.v2.ErrorDetails
	75,  // 148: code.transaction.v2.GetLimitsResponse.SendLimitsByCurrencyEntry.value:type_name -> code.transaction.v2.SendLimit
	77,  // 149: code.transaction.v2.GetLimitsResponse.MicroPaymentLimitsByCurrencyEntry.value:type_name -> code.transaction.v2.MicroPaymentLimit
	78,  // 150: code.transaction.v2.GetLimitsResponse.BuyModuleLimitsByCurrencyEntry.value:type_name -> code.transaction.v2.BuyModuleLimit
	95,  // 151: code.transaction.v2.SwapRequest.Initiate.owner:type_name -> code.common.v1.SolanaAccountId
	95,  // 152: code.transaction.v2.SwapRequest.Initiate.swap_authority:type_name -> code.common.v1.SolanaAccountId
	96,  // 153: code.transaction.v2.SwapRequest.Initiate.signature:type_name -> code.common.v1.Signature
	96,  // 154: code.transaction.v2.SwapRequest.SubmitSignature.signature:type_name -> code.common.v1.Signature
	95,  // 155: code.transaction.v2.SwapResponse.ServerParameters.payer:type_name -> code.common.v1.SolanaAccountId
	101, // 156: code.transaction.v2.SwapResponse.ServerParameters.recent_blockhash:type_name -> code.common.v1.Blockhash
	95,  // 157: code.transaction.v2.SwapResponse.ServerParameters.swap_program:type_name -> code.common.v1.SolanaAccountId
	105, // 158: code.transaction.v2.SwapResponse.ServerParameters.swap_ixn_accounts:type_name -> code.common.v1.InstructionAccount
	95,  // 159: code.transaction.v2.SwapResponse.ServerParameters.nonce:type_name -> code.common.v1.SolanaAccountId
	12,  // 160: code.transaction.v2.SwapResponse.Success.code:type_name -> code.transaction.v2.SwapResponse.Success.Code
	13,  // 161: code.transaction.v2.SwapResponse.Error.code:type_name -> code.transaction.v2.SwapResponse.Error.Code
	67,  // 162: code.transaction.v2.SwapResponse.Error.error_details:type_name -> code.transaction.v2.ErrorDetails
	103, // 163: code.transaction.v2.UpgradeableIntent.UpgradeablePrivateAction.transaction_blob:type_name -> code.common.v1.Transaction
	96,  // 164: code.transaction.v2.UpgradeableIntent.UpgradeablePrivateAction.client_signature:type_name -> code.common.v1.Signature
	100, // 165: code.transaction.v2.UpgradeableIntent.UpgradeablePrivateAction.source_account_type:type_name -> code.common.v1.AccountType
	95,  // 166: code.transaction.v2.UpgradeableIntent.UpgradeablePrivateAction.original_destination:type_name -> code.common.v1.SolanaAccountId
	95,  // 167: code.transaction.v2.UpgradeableIntent.UpgradeablePrivateAction.treasury:type_name -> code.common.v1.SolanaAccountId
	102, // 168: code.transaction.v2.UpgradeableIntent.UpgradeablePrivateAction.recent_root:type_name -> code.common.v1.Hash
	17,  // 169: code.transaction.v2.Transaction.SubmitIntent:input_type -> code.transaction.v2.SubmitIntentRequest
	19,  // 170: code.transaction.v2.Transaction.GetIntentMetadata:input_type -> code.transaction.v2.GetIntentMetadataRequest
	21,  // 171: code.transaction.v2.Transaction.GetPrivacyUpgradeStatus:input_type -> code.transaction.v2.GetPrivacyUpgradeStatusRequest
	23,  // 172: code.transaction.v2.Transaction.GetPrioritizedIntentsForPrivacyUpgrade:input_type -> code.transaction.v2.GetPrioritizedIntentsForPrivacyUpgradeRequest
	25,  // 173: code.transaction.v2.Transaction.GetLimits:input_type -> code.transaction.v2.GetLimitsRequest
	27,  // 174: code.transaction.v2.Transaction.GetPaymentHistory:input_type -> code.transaction.v2.GetPaymentHistoryRequest
	29,  // 175: code.transaction.v2.Transaction.CanWithdrawToAccount:input_type -> code.transaction.v2.CanWithdrawToAccountRequest
	31,  // 176: code.transaction.v2.Transaction.Airdrop:input_type -> code.transaction.v2.AirdropRequest
	33,  // 177: code.transaction.v2.Transaction.Swap:input_type -> code.transaction.v2.SwapRequest
	35,  // 178: code.transaction.v2.Transaction.DeclareFiatOnrampAttempt:input_type -> code.transaction.v2.DeclareFiatOnrampAttemptRequest
	18,  // 179: code.transaction.v2.Transaction.SubmitIntent:output_type -> code.transaction.v2.SubmitIntentResponse
	20,  // 180: code.transaction.v2.Transaction.GetIntentMetadata:output_type -> code.transaction.v2.GetIntentMetadataResponse
	22,  // 181: code.transaction.v2.Transaction.GetPrivacyUpgradeStatus:output_type -> code.transaction.v2.GetPrivacyUpgradeStatusResponse
	24,  // 182: code.transaction.v2.Transaction.GetPrioritizedIntentsForPrivacyUpgrade:output_type -> code.transaction.v2.GetPrioritizedIntentsForPrivacyUpgradeResponse
	26,  // 183: code.transaction.v2.Transaction.GetLimits:output_type -> code.transaction.v2.GetLimitsResponse
	28,  // 184: code.transaction.v2.Transaction.GetPaymentHistory:output_type -> code.transaction.v2.GetPaymentHistoryResponse
	30,  // 185: code.transaction.v2.Transaction.CanWithdrawToAccount:output_type -> code.transaction.v2.CanWithdrawToAccountResponse
	32,  // 186: code.transaction.v2.Transaction.Airdrop:output_type -> code.transaction.v2.AirdropResponse
	34,  // 187: code.transaction.v2.Transaction.Swap:output_type -> code.transaction.v2.SwapResponse
	36,  // 188: code.transaction.v2.Transaction.DeclareFiatOnrampAttempt:output_type -> code.transaction.v2.DeclareFiatOnrampAttemptResponse
	179, // [179:189] is the sub-list for method output_type
	169, // [169:179] is the sub-list for method input_type
	169, // [169:169] is the sub-list for extension type_name
	169, // [169:169] is the sub-list for extension extendee
	0,   // [0:169] is the sub-list for field type_name
}

func init() { file_transaction_v2_transaction_service_proto_init() }
func file_transaction_v2_transaction_service_proto_init() {
	if File_transaction_v2_transaction_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_transaction_v2_transaction_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitIntentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitIntentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIntentMetadataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIntentMetadataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPrivacyUpgradeStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPrivacyUpgradeStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPrioritizedIntentsForPrivacyUpgradeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPrioritizedIntentsForPrivacyUpgradeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLimitsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLimitsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPaymentHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPaymentHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CanWithdrawToAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CanWithdrawToAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AirdropRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AirdropResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwapRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwapResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeclareFiatOnrampAttemptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeclareFiatOnrampAttemptResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenAccountsMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendPrivatePaymentMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendPublicPaymentMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceivePaymentsPrivatelyMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceivePaymentsPubliclyMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpgradePrivacyMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MigrateToPrivacy2022Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EstablishRelationshipMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenAccountAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseEmptyAccountAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseDormantAccountAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoPrivacyTransferAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoPrivacyWithdrawAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemporaryPrivacyTransferAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemporaryPrivacyExchangeAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PermanentPrivacyUpgradeAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeePaymentAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoncedTransactionMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenAccountServerParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseEmptyAccountServerParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseDormantAccountServerParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoPrivacyTransferServerParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoPrivacyWithdrawServerParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemporaryPrivacyTransferServerParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemporaryPrivacyExchangeServerParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PermanentPrivacyUpgradeServerParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeePaymentServerParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReasonStringErrorDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvalidSignatureErrorDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpgradeableIntent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentHistoryItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeDataWithoutRate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdditionalFeePayment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DepositLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MicroPaymentLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuyModuleLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cursor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitIntentRequest_SubmitActions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitIntentRequest_SubmitSignatures); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitIntentResponse_ServerParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitIntentResponse_Success); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitIntentResponse_Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwapRequest_Initiate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwapRequest_SubmitSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwapResponse_ServerParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwapResponse_Success); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwapResponse_Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_v2_transaction_service_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpgradeableIntent_UpgradeablePrivateAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_transaction_v2_transaction_service_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*SubmitIntentRequest_SubmitActions_)(nil),
		(*SubmitIntentRequest_SubmitSignatures_)(nil),
	}
	file_transaction_v2_transaction_service_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*SubmitIntentResponse_ServerParameters_)(nil),
		(*SubmitIntentResponse_Success_)(nil),
		(*SubmitIntentResponse_Error_)(nil),
	}
	file_transaction_v2_transaction_service_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*SwapRequest_Initiate_)(nil),
		(*SwapRequest_SubmitSignature_)(nil),
	}
	file_transaction_v2_transaction_service_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*SwapResponse_ServerParameters_)(nil),
		(*SwapResponse_Success_)(nil),
		(*SwapResponse_Error_)(nil),
	}
	file_transaction_v2_transaction_service_proto_msgTypes[20].OneofWrappers = []interface{}{
		(*Metadata_OpenAccounts)(nil),
		(*Metadata_SendPrivatePayment)(nil),
		(*Metadata_ReceivePaymentsPrivately)(nil),
		(*Metadata_UpgradePrivacy)(nil),
		(*Metadata_MigrateToPrivacy_2022)(nil),
		(*Metadata_SendPublicPayment)(nil),
		(*Metadata_ReceivePaymentsPublicly)(nil),
		(*Metadata_EstablishRelationship)(nil),
	}
	file_transaction_v2_transaction_service_proto_msgTypes[29].OneofWrappers = []interface{}{
		(*Action_OpenAccount)(nil),
		(*Action_CloseEmptyAccount)(nil),
		(*Action_CloseDormantAccount)(nil),
		(*Action_NoPrivacyTransfer)(nil),
		(*Action_NoPrivacyWithdraw)(nil),
		(*Action_TemporaryPrivacyTransfer)(nil),
		(*Action_TemporaryPrivacyExchange)(nil),
		(*Action_PermanentPrivacyUpgrade)(nil),
		(*Action_FeePayment)(nil),
	}
	file_transaction_v2_transaction_service_proto_msgTypes[39].OneofWrappers = []interface{}{
		(*ServerParameter_OpenAccount)(nil),
		(*ServerParameter_CloseEmptyAccount)(nil),
		(*ServerParameter_CloseDormantAccount)(nil),
		(*ServerParameter_NoPrivacyTransfer)(nil),
		(*ServerParameter_NoPrivacyWithdraw)(nil),
		(*ServerParameter_TemporaryPrivacyTransfer)(nil),
		(*ServerParameter_TemporaryPrivacyExchange)(nil),
		(*ServerParameter_PermanentPrivacyUpgrade)(nil),
		(*ServerParameter_FeePayment)(nil),
	}
	file_transaction_v2_transaction_service_proto_msgTypes[50].OneofWrappers = []interface{}{
		(*ErrorDetails_ReasonString)(nil),
		(*ErrorDetails_InvalidSignature)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_transaction_v2_transaction_service_proto_rawDesc,
			NumEnums:      17,
			NumMessages:   77,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_transaction_v2_transaction_service_proto_goTypes,
		DependencyIndexes: file_transaction_v2_transaction_service_proto_depIdxs,
		EnumInfos:         file_transaction_v2_transaction_service_proto_enumTypes,
		MessageInfos:      file_transaction_v2_transaction_service_proto_msgTypes,
	}.Build()
	File_transaction_v2_transaction_service_proto = out.File
	file_transaction_v2_transaction_service_proto_rawDesc = nil
	file_transaction_v2_transaction_service_proto_goTypes = nil
	file_transaction_v2_transaction_service_proto_depIdxs = nil
}
