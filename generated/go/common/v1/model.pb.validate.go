// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: common/v1/model.proto

package common

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on SolanaAccountId with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *SolanaAccountId) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetValue()) != 32 {
		return SolanaAccountIdValidationError{
			field:  "Value",
			reason: "value length must be 32 bytes",
		}
	}

	return nil
}

// SolanaAccountIdValidationError is the validation error returned by
// SolanaAccountId.Validate if the designated constraints aren't met.
type SolanaAccountIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SolanaAccountIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SolanaAccountIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SolanaAccountIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SolanaAccountIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SolanaAccountIdValidationError) ErrorName() string { return "SolanaAccountIdValidationError" }

// Error satisfies the builtin error interface
func (e SolanaAccountIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSolanaAccountId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SolanaAccountIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SolanaAccountIdValidationError{}

// Validate checks the field values on InstructionAccount with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *InstructionAccount) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetAccount() == nil {
		return InstructionAccountValidationError{
			field:  "Account",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstructionAccountValidationError{
				field:  "Account",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IsSigner

	// no validation rules for IsWritable

	return nil
}

// InstructionAccountValidationError is the validation error returned by
// InstructionAccount.Validate if the designated constraints aren't met.
type InstructionAccountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstructionAccountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstructionAccountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstructionAccountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstructionAccountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstructionAccountValidationError) ErrorName() string {
	return "InstructionAccountValidationError"
}

// Error satisfies the builtin error interface
func (e InstructionAccountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstructionAccount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstructionAccountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstructionAccountValidationError{}

// Validate checks the field values on Transaction with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Transaction) Validate() error {
	if m == nil {
		return nil
	}

	if l := len(m.GetValue()); l < 1 || l > 1232 {
		return TransactionValidationError{
			field:  "Value",
			reason: "value length must be between 1 and 1232 bytes, inclusive",
		}
	}

	return nil
}

// TransactionValidationError is the validation error returned by
// Transaction.Validate if the designated constraints aren't met.
type TransactionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransactionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransactionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransactionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransactionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransactionValidationError) ErrorName() string { return "TransactionValidationError" }

// Error satisfies the builtin error interface
func (e TransactionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransaction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransactionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransactionValidationError{}

// Validate checks the field values on Blockhash with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Blockhash) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetValue()) != 32 {
		return BlockhashValidationError{
			field:  "Value",
			reason: "value length must be 32 bytes",
		}
	}

	return nil
}

// BlockhashValidationError is the validation error returned by
// Blockhash.Validate if the designated constraints aren't met.
type BlockhashValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BlockhashValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BlockhashValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BlockhashValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BlockhashValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BlockhashValidationError) ErrorName() string { return "BlockhashValidationError" }

// Error satisfies the builtin error interface
func (e BlockhashValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlockhash.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BlockhashValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BlockhashValidationError{}

// Validate checks the field values on Signature with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Signature) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetValue()) != 64 {
		return SignatureValidationError{
			field:  "Value",
			reason: "value length must be 64 bytes",
		}
	}

	return nil
}

// SignatureValidationError is the validation error returned by
// Signature.Validate if the designated constraints aren't met.
type SignatureValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignatureValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignatureValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignatureValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignatureValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignatureValidationError) ErrorName() string { return "SignatureValidationError" }

// Error satisfies the builtin error interface
func (e SignatureValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignature.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignatureValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignatureValidationError{}

// Validate checks the field values on IntentId with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *IntentId) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetValue()) != 32 {
		return IntentIdValidationError{
			field:  "Value",
			reason: "value length must be 32 bytes",
		}
	}

	return nil
}

// IntentIdValidationError is the validation error returned by
// IntentId.Validate if the designated constraints aren't met.
type IntentIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntentIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntentIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntentIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntentIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntentIdValidationError) ErrorName() string { return "IntentIdValidationError" }

// Error satisfies the builtin error interface
func (e IntentIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntentId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntentIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntentIdValidationError{}

// Validate checks the field values on Hash with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Hash) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetValue()) != 32 {
		return HashValidationError{
			field:  "Value",
			reason: "value length must be 32 bytes",
		}
	}

	return nil
}

// HashValidationError is the validation error returned by Hash.Validate if the
// designated constraints aren't met.
type HashValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HashValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HashValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HashValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HashValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HashValidationError) ErrorName() string { return "HashValidationError" }

// Error satisfies the builtin error interface
func (e HashValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHash.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HashValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HashValidationError{}

// Validate checks the field values on UUID with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *UUID) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetValue()) != 16 {
		return UUIDValidationError{
			field:  "Value",
			reason: "value length must be 16 bytes",
		}
	}

	return nil
}

// UUIDValidationError is the validation error returned by UUID.Validate if the
// designated constraints aren't met.
type UUIDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UUIDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UUIDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UUIDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UUIDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UUIDValidationError) ErrorName() string { return "UUIDValidationError" }

// Error satisfies the builtin error interface
func (e UUIDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUUID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UUIDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UUIDValidationError{}

// Validate checks the field values on Request with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Request) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Version

	// no validation rules for Service

	// no validation rules for Method

	// no validation rules for Body

	return nil
}

// RequestValidationError is the validation error returned by Request.Validate
// if the designated constraints aren't met.
type RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestValidationError) ErrorName() string { return "RequestValidationError" }

// Error satisfies the builtin error interface
func (e RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestValidationError{}

// Validate checks the field values on Response with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Response) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Result

	// no validation rules for Body

	// no validation rules for Message

	return nil
}

// ResponseValidationError is the validation error returned by
// Response.Validate if the designated constraints aren't met.
type ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResponseValidationError) ErrorName() string { return "ResponseValidationError" }

// Error satisfies the builtin error interface
func (e ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResponseValidationError{}

// Validate checks the field values on ServerPing with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ServerPing) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetTimestamp() == nil {
		return ServerPingValidationError{
			field:  "Timestamp",
			reason: "value is required",
		}
	}

	if m.GetPingDelay() == nil {
		return ServerPingValidationError{
			field:  "PingDelay",
			reason: "value is required",
		}
	}

	return nil
}

// ServerPingValidationError is the validation error returned by
// ServerPing.Validate if the designated constraints aren't met.
type ServerPingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerPingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerPingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerPingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerPingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerPingValidationError) ErrorName() string { return "ServerPingValidationError" }

// Error satisfies the builtin error interface
func (e ServerPingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerPing.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerPingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerPingValidationError{}

// Validate checks the field values on ClientPong with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ClientPong) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetTimestamp() == nil {
		return ClientPongValidationError{
			field:  "Timestamp",
			reason: "value is required",
		}
	}

	return nil
}

// ClientPongValidationError is the validation error returned by
// ClientPong.Validate if the designated constraints aren't met.
type ClientPongValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClientPongValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClientPongValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClientPongValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClientPongValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClientPongValidationError) ErrorName() string { return "ClientPongValidationError" }

// Error satisfies the builtin error interface
func (e ClientPongValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClientPong.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClientPongValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClientPongValidationError{}
