// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: common/v1/model.proto

package common

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SolanaAccountId with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SolanaAccountId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SolanaAccountId with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SolanaAccountIdMultiError, or nil if none found.
func (m *SolanaAccountId) ValidateAll() error {
	return m.validate(true)
}

func (m *SolanaAccountId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetValue()) != 32 {
		err := SolanaAccountIdValidationError{
			field:  "Value",
			reason: "value length must be 32 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SolanaAccountIdMultiError(errors)
	}

	return nil
}

// SolanaAccountIdMultiError is an error wrapping multiple validation errors
// returned by SolanaAccountId.ValidateAll() if the designated constraints
// aren't met.
type SolanaAccountIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SolanaAccountIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SolanaAccountIdMultiError) AllErrors() []error { return m }

// SolanaAccountIdValidationError is the validation error returned by
// SolanaAccountId.Validate if the designated constraints aren't met.
type SolanaAccountIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SolanaAccountIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SolanaAccountIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SolanaAccountIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SolanaAccountIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SolanaAccountIdValidationError) ErrorName() string { return "SolanaAccountIdValidationError" }

// Error satisfies the builtin error interface
func (e SolanaAccountIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSolanaAccountId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SolanaAccountIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SolanaAccountIdValidationError{}

// Validate checks the field values on InstructionAccount with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstructionAccount) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstructionAccount with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstructionAccountMultiError, or nil if none found.
func (m *InstructionAccount) ValidateAll() error {
	return m.validate(true)
}

func (m *InstructionAccount) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetAccount() == nil {
		err := InstructionAccountValidationError{
			field:  "Account",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAccount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstructionAccountValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstructionAccountValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstructionAccountValidationError{
				field:  "Account",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IsSigner

	// no validation rules for IsWritable

	if len(errors) > 0 {
		return InstructionAccountMultiError(errors)
	}

	return nil
}

// InstructionAccountMultiError is an error wrapping multiple validation errors
// returned by InstructionAccount.ValidateAll() if the designated constraints
// aren't met.
type InstructionAccountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstructionAccountMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstructionAccountMultiError) AllErrors() []error { return m }

// InstructionAccountValidationError is the validation error returned by
// InstructionAccount.Validate if the designated constraints aren't met.
type InstructionAccountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstructionAccountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstructionAccountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstructionAccountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstructionAccountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstructionAccountValidationError) ErrorName() string {
	return "InstructionAccountValidationError"
}

// Error satisfies the builtin error interface
func (e InstructionAccountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstructionAccount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstructionAccountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstructionAccountValidationError{}

// Validate checks the field values on Transaction with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Transaction) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Transaction with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TransactionMultiError, or
// nil if none found.
func (m *Transaction) ValidateAll() error {
	return m.validate(true)
}

func (m *Transaction) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetValue()); l < 1 || l > 1232 {
		err := TransactionValidationError{
			field:  "Value",
			reason: "value length must be between 1 and 1232 bytes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return TransactionMultiError(errors)
	}

	return nil
}

// TransactionMultiError is an error wrapping multiple validation errors
// returned by Transaction.ValidateAll() if the designated constraints aren't met.
type TransactionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransactionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransactionMultiError) AllErrors() []error { return m }

// TransactionValidationError is the validation error returned by
// Transaction.Validate if the designated constraints aren't met.
type TransactionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransactionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransactionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransactionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransactionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransactionValidationError) ErrorName() string { return "TransactionValidationError" }

// Error satisfies the builtin error interface
func (e TransactionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransaction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransactionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransactionValidationError{}

// Validate checks the field values on Blockhash with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Blockhash) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Blockhash with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BlockhashMultiError, or nil
// if none found.
func (m *Blockhash) ValidateAll() error {
	return m.validate(true)
}

func (m *Blockhash) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetValue()) != 32 {
		err := BlockhashValidationError{
			field:  "Value",
			reason: "value length must be 32 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return BlockhashMultiError(errors)
	}

	return nil
}

// BlockhashMultiError is an error wrapping multiple validation errors returned
// by Blockhash.ValidateAll() if the designated constraints aren't met.
type BlockhashMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BlockhashMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BlockhashMultiError) AllErrors() []error { return m }

// BlockhashValidationError is the validation error returned by
// Blockhash.Validate if the designated constraints aren't met.
type BlockhashValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BlockhashValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BlockhashValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BlockhashValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BlockhashValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BlockhashValidationError) ErrorName() string { return "BlockhashValidationError" }

// Error satisfies the builtin error interface
func (e BlockhashValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlockhash.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BlockhashValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BlockhashValidationError{}

// Validate checks the field values on Signature with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Signature) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Signature with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SignatureMultiError, or nil
// if none found.
func (m *Signature) ValidateAll() error {
	return m.validate(true)
}

func (m *Signature) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetValue()) != 64 {
		err := SignatureValidationError{
			field:  "Value",
			reason: "value length must be 64 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SignatureMultiError(errors)
	}

	return nil
}

// SignatureMultiError is an error wrapping multiple validation errors returned
// by Signature.ValidateAll() if the designated constraints aren't met.
type SignatureMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SignatureMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SignatureMultiError) AllErrors() []error { return m }

// SignatureValidationError is the validation error returned by
// Signature.Validate if the designated constraints aren't met.
type SignatureValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignatureValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignatureValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignatureValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignatureValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignatureValidationError) ErrorName() string { return "SignatureValidationError" }

// Error satisfies the builtin error interface
func (e SignatureValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignature.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignatureValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignatureValidationError{}

// Validate checks the field values on IntentId with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IntentId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IntentId with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IntentIdMultiError, or nil
// if none found.
func (m *IntentId) ValidateAll() error {
	return m.validate(true)
}

func (m *IntentId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetValue()) != 32 {
		err := IntentIdValidationError{
			field:  "Value",
			reason: "value length must be 32 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IntentIdMultiError(errors)
	}

	return nil
}

// IntentIdMultiError is an error wrapping multiple validation errors returned
// by IntentId.ValidateAll() if the designated constraints aren't met.
type IntentIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntentIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntentIdMultiError) AllErrors() []error { return m }

// IntentIdValidationError is the validation error returned by
// IntentId.Validate if the designated constraints aren't met.
type IntentIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntentIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntentIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntentIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntentIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntentIdValidationError) ErrorName() string { return "IntentIdValidationError" }

// Error satisfies the builtin error interface
func (e IntentIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntentId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntentIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntentIdValidationError{}

// Validate checks the field values on Domain with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Domain) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Domain with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in DomainMultiError, or nil if none found.
func (m *Domain) ValidateAll() error {
	return m.validate(true)
}

func (m *Domain) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetValue()); l < 1 || l > 253 {
		err := DomainValidationError{
			field:  "Value",
			reason: "value length must be between 1 and 253 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateHostname(m.GetValue()); err != nil {
		err = DomainValidationError{
			field:  "Value",
			reason: "value must be a valid hostname",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DomainMultiError(errors)
	}

	return nil
}

func (m *Domain) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

// DomainMultiError is an error wrapping multiple validation errors returned by
// Domain.ValidateAll() if the designated constraints aren't met.
type DomainMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DomainMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DomainMultiError) AllErrors() []error { return m }

// DomainValidationError is the validation error returned by Domain.Validate if
// the designated constraints aren't met.
type DomainValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DomainValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DomainValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DomainValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DomainValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DomainValidationError) ErrorName() string { return "DomainValidationError" }

// Error satisfies the builtin error interface
func (e DomainValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDomain.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DomainValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DomainValidationError{}

// Validate checks the field values on Hash with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Hash) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Hash with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in HashMultiError, or nil if none found.
func (m *Hash) ValidateAll() error {
	return m.validate(true)
}

func (m *Hash) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetValue()) != 32 {
		err := HashValidationError{
			field:  "Value",
			reason: "value length must be 32 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return HashMultiError(errors)
	}

	return nil
}

// HashMultiError is an error wrapping multiple validation errors returned by
// Hash.ValidateAll() if the designated constraints aren't met.
type HashMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HashMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HashMultiError) AllErrors() []error { return m }

// HashValidationError is the validation error returned by Hash.Validate if the
// designated constraints aren't met.
type HashValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HashValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HashValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HashValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HashValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HashValidationError) ErrorName() string { return "HashValidationError" }

// Error satisfies the builtin error interface
func (e HashValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHash.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HashValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HashValidationError{}

// Validate checks the field values on UUID with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *UUID) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UUID with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UUIDMultiError, or nil if none found.
func (m *UUID) ValidateAll() error {
	return m.validate(true)
}

func (m *UUID) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetValue()) != 16 {
		err := UUIDValidationError{
			field:  "Value",
			reason: "value length must be 16 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UUIDMultiError(errors)
	}

	return nil
}

// UUIDMultiError is an error wrapping multiple validation errors returned by
// UUID.ValidateAll() if the designated constraints aren't met.
type UUIDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UUIDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UUIDMultiError) AllErrors() []error { return m }

// UUIDValidationError is the validation error returned by UUID.Validate if the
// designated constraints aren't met.
type UUIDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UUIDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UUIDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UUIDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UUIDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UUIDValidationError) ErrorName() string { return "UUIDValidationError" }

// Error satisfies the builtin error interface
func (e UUIDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUUID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UUIDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UUIDValidationError{}

// Validate checks the field values on Request with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Request with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RequestMultiError, or nil if none found.
func (m *Request) ValidateAll() error {
	return m.validate(true)
}

func (m *Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	// no validation rules for Service

	// no validation rules for Method

	// no validation rules for Body

	if len(errors) > 0 {
		return RequestMultiError(errors)
	}

	return nil
}

// RequestMultiError is an error wrapping multiple validation errors returned
// by Request.ValidateAll() if the designated constraints aren't met.
type RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestMultiError) AllErrors() []error { return m }

// RequestValidationError is the validation error returned by Request.Validate
// if the designated constraints aren't met.
type RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestValidationError) ErrorName() string { return "RequestValidationError" }

// Error satisfies the builtin error interface
func (e RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestValidationError{}

// Validate checks the field values on Response with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Response with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResponseMultiError, or nil
// if none found.
func (m *Response) ValidateAll() error {
	return m.validate(true)
}

func (m *Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	// no validation rules for Body

	// no validation rules for Message

	if len(errors) > 0 {
		return ResponseMultiError(errors)
	}

	return nil
}

// ResponseMultiError is an error wrapping multiple validation errors returned
// by Response.ValidateAll() if the designated constraints aren't met.
type ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResponseMultiError) AllErrors() []error { return m }

// ResponseValidationError is the validation error returned by
// Response.Validate if the designated constraints aren't met.
type ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResponseValidationError) ErrorName() string { return "ResponseValidationError" }

// Error satisfies the builtin error interface
func (e ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResponseValidationError{}

// Validate checks the field values on ServerPing with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ServerPing) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerPing with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ServerPingMultiError, or
// nil if none found.
func (m *ServerPing) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerPing) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetTimestamp() == nil {
		err := ServerPingValidationError{
			field:  "Timestamp",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPingDelay() == nil {
		err := ServerPingValidationError{
			field:  "PingDelay",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ServerPingMultiError(errors)
	}

	return nil
}

// ServerPingMultiError is an error wrapping multiple validation errors
// returned by ServerPing.ValidateAll() if the designated constraints aren't met.
type ServerPingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerPingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerPingMultiError) AllErrors() []error { return m }

// ServerPingValidationError is the validation error returned by
// ServerPing.Validate if the designated constraints aren't met.
type ServerPingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerPingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerPingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerPingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerPingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerPingValidationError) ErrorName() string { return "ServerPingValidationError" }

// Error satisfies the builtin error interface
func (e ServerPingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerPing.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerPingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerPingValidationError{}

// Validate checks the field values on ClientPong with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ClientPong) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClientPong with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ClientPongMultiError, or
// nil if none found.
func (m *ClientPong) ValidateAll() error {
	return m.validate(true)
}

func (m *ClientPong) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetTimestamp() == nil {
		err := ClientPongValidationError{
			field:  "Timestamp",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ClientPongMultiError(errors)
	}

	return nil
}

// ClientPongMultiError is an error wrapping multiple validation errors
// returned by ClientPong.ValidateAll() if the designated constraints aren't met.
type ClientPongMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClientPongMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClientPongMultiError) AllErrors() []error { return m }

// ClientPongValidationError is the validation error returned by
// ClientPong.Validate if the designated constraints aren't met.
type ClientPongValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClientPongValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClientPongValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClientPongValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClientPongValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClientPongValidationError) ErrorName() string { return "ClientPongValidationError" }

// Error satisfies the builtin error interface
func (e ClientPongValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClientPong.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClientPongValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClientPongValidationError{}
