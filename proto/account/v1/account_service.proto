syntax = "proto3";

package code.account.v1;

// Package options for different programming languages.
option go_package = "github.com/code-payments/code-protobuf-api/generated/go/account/v1;account";
option java_package = "com.codeinc.gen.account.v1";
option objc_class_prefix = "CPBAccountV1";

// Dependencies for account service definitions.
import "common/v1/model.proto";
import "transaction/v2/transaction_service.proto";
import "validate/validate.proto";

// Service definition for account-related operations.
service Account {
    // Checks if a given owner account is a Code account, which implies certain capabilities.
    rpc IsCodeAccount(IsCodeAccountRequest) returns (IsCodeAccountResponse);

    // Retrieves metadata for token accounts associated with a Code owner account.
    rpc GetTokenAccountInfos(GetTokenAccountInfosRequest) returns (GetTokenAccountInfosResponse);

    // Links additional, externally managed accounts for use within Code.
    rpc LinkAdditionalAccounts(LinkAdditionalAccountsRequest) returns (LinkAdditionalAccountsResponse);
}

// Request and response messages for IsCodeAccount RPC.
message IsCodeAccountRequest {
    // Owner account to check.
    common.v1.SolanaAccountId owner = 1 [(validate.rules).message.required = true];
    // Signature for authentication.
    common.v1.Signature signature = 2 [(validate.rules).message.required = true];
}

message IsCodeAccountResponse {
    // Result of the check.
    Result result = 1;
    enum Result {
        OK = 0;  // The account is a Code account.
        NOT_FOUND = 1;  // Not a Code account.
        UNLOCKED_TIMELOCK_ACCOUNT = 2;  // Exists but with unlocked timelock.
    }
}

// Request and response messages for GetTokenAccountInfos RPC.
message GetTokenAccountInfosRequest {
    // Owner (or parent) account for the query.
    common.v1.SolanaAccountId owner = 1 [(validate.rules).message.required = true];
    // Signature for authentication.
    common.v1.Signature signature = 2 [(validate.rules).message.required = true];
}

message GetTokenAccountInfosResponse {
    // Result of the query.
    Result result = 1;
    enum Result {
        OK = 0;  // Success.
        NOT_FOUND = 1;  // No token accounts found.
    }
    // Mapping of token accounts with their infos.
    map<string, TokenAccountInfo> token_account_infos = 2;
}

// Request and response messages for LinkAdditionalAccounts RPC.
message LinkAdditionalAccountsRequest {
    // Owner account to which additional accounts will be linked.
    common.v1.SolanaAccountId owner = 1 [(validate.rules).message.required = true];
    // Authority account derived from user's seed phrase.
    common.v1.SolanaAccountId swap_authority = 2 [(validate.rules).message.required = true];
    // Signatures for authentication.
    repeated common.v1.Signature signatures = 3 [(validate.rules).repeated = {min_items: 2, max_items: 2}];
}

message LinkAdditionalAccountsResponse {
    // Result of the linking operation.
    Result result = 1;
    enum Result {
        OK = 0;  // Request matches a previous execution (idempotency).
        DENIED = 1;  // Request denied (e.g., account not verified).
        INVALID_ACCOUNT = 2;  // Invalid account in request.
    }
}

// Defines token account information and various states.
message TokenAccountInfo {
    // Basic account identifiers.
    common.v1.SolanaAccountId address = 1 [(validate.rules).message.required = true];
    common.v1.SolanaAccountId owner = 2;  // Parent account, if available.
    common.v1.SolanaAccountId authority = 3;  // Authority over the funds.

    // Account type and indexing for applicable types.
    common.v1.AccountType account_type = 4 [(validate.rules).enum.not_in = 0];
    uint64 index = 5;  // Derivation index, zero if not applicable.

    // Balance information and source.
    BalanceSource balance_source = 6;
    uint64 balance = 7;  // Balance in quarks as observed by Code.

    // Management and blockchain states.
    ManagementState management_state = 8;
    BlockchainState blockchain_state = 9;

    // Additional flags and information for specific account types.
    bool must_rotate = 10;  // For temporary incoming accounts.
    ClaimState claim_state = 11;  // Claim status for applicable accounts.
    transaction.v2.ExchangeData original_exchange_data = 12;  // Original funding data.

    // Token mint information.
    common.v1.SolanaAccountId mint = 13;  // Token mint address.

    // Relationships and other reserved fields.
    common.v1.Relationship relationship = 16;  // Established third-party relationships.

    // Enums for balance sources, management, blockchain states, and claim states.
    enum BalanceSource {
        BALANCE_SOURCE_UNKNOWN = 0;
        BALANCE_SOURCE_BLOCKCHAIN = 1;
        BALANCE_SOURCE_CACHE = 2;
    }
// Enumerates the possible management states of an account, reflecting its current operational status within the system.
enum ManagementState {
    MANAGEMENT_STATE_UNKNOWN = 0; // State is unknown or not specified, typically used when the account's state hasn't been determined.
    MANAGEMENT_STATE_NONE = 1; // Account is not under any special management or locking protocol.
    MANAGEMENT_STATE_LOCKING = 2; // Account is in the process of being locked, indicating a transitional state towards secure management.
    MANAGEMENT_STATE_LOCKED = 3; // Account is fully locked, meaning it's under secure management and cannot be modified without authorization.
    MANAGEMENT_STATE_UNLOCKING = 4; // Account is in the process of being unlocked, indicating a transitional state away from secure management.
    MANAGEMENT_STATE_UNLOCKED = 5; // Account is fully unlocked, meaning it's no longer under secure management and is freely modifiable.
    MANAGEMENT_STATE_CLOSING = 6; // Account is in the process of being closed, indicating a transitional state towards its termination.
    MANAGEMENT_STATE_CLOSED = 7; // Account is fully closed, meaning it's terminated and no longer active or accessible within the system.
}

// Enumerates the states an account can have on the blockchain, providing clarity on its existence and operational status.
enum BlockchainState {
    BLOCKCHAIN_STATE_UNKNOWN = 0; // The blockchain state of the account is unknown, typically used when the account's existence hasn't been verified.
    BLOCKCHAIN_STATE_DOES_NOT_EXIST = 1; // Indicates the account does not exist on the blockchain, either never created or possibly removed.
    BLOCKCHAIN_STATE_EXISTS = 2; // Indicates the account exists on the blockchain and is recognized as a valid entity.
}

// Enumerates the claim states of an account, relevant for accounts that can be claimed or have ownership transferred.
enum ClaimState {
    CLAIM_STATE_UNKNOWN = 0; // The claim state of the account is unknown, used when the claim status hasn't been determined.
    CLAIM_STATE_NOT_CLAIMED = 1; // Indicates the account has not been claimed, meaning it's available for claiming under defined conditions.
    CLAIM_STATE_CLAIMED = 2; // Indicates the account has already been claimed, signifying an ownership or beneficiary assignment.
    CLAIM_STATE_EXPIRED = 3; // Indicates the account's claim period has expired without being claimed, possibly leading to a change in its status or availability.
}

// Reserved fields for future enhancements to the TokenAccountInfo message, ensuring backward compatibility when new fields are added.
reserved 14, 15;
