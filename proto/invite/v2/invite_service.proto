syntax = "proto3";

package code.invite.v2;

option go_package = "github.com/code-payments/code-protobuf-api/generated/go/invite/v2;invite";
option java_package = "com.codeinc.gen.invite.v2";
option objc_class_prefix = "CPBInviteV2";

import "common/v1/model.proto";
import "validate/validate.proto";
import "google/protobuf/timestamp.proto";

// Invite service provides functionalities to manage user invitations.
service Invite {
    // Gets the count of invitations available for a user to send.
    rpc GetInviteCount(GetInviteCountRequest) returns (GetInviteCountResponse);

    // Invites a user to the platform using their phone number. Each phone number can only be invited once.
    rpc InvitePhoneNumber(InvitePhoneNumberRequest) returns (InvitePhoneNumberResponse);

    // Retrieves the invitation status associated with a specific phone number.
    rpc GetInvitationStatus(GetInvitationStatusRequest) returns (GetInvitationStatusResponse);
}

// Request to get the count of available invitations for a user.
message GetInviteCountRequest {
    // Identifier of the user whose invite count is queried.
    common.v1.UserId user_id = 1 [(validate.rules).message.required = true];
}

// Response containing the number of available invitations for a user.
message GetInviteCountResponse {
    // Indicates the result of the GetInviteCount operation.
    Result result = 1;
    // Number of invitations the user can send.
    uint32 invite_count = 2;

    // Enum detailing potential results of the GetInviteCount request.
    enum Result {
        OK = 0; // Query was successful.
        UNAUTHORIZED = 1; // User lacks authorization to query invite counts.
        SERVICE_UNAVAILABLE = 2; // The service is temporarily unavailable.
    }
}

// Request to invite a person to the platform using their phone number.
message InvitePhoneNumberRequest {
    // Source of the invitation, either a UserId or an InviteCode.
    oneof source {
        common.v1.UserId user = 1; // The user sending the invitation.
        InviteCode invite_code = 3; // An invite code used for the invitation.
    }

    // Phone number of the invitee.
    common.v1.PhoneNumber receiver = 2 [(validate.rules).message.required = true];
}

// Response to an invitation request.
message InvitePhoneNumberResponse {
    // Result of the invitation attempt.
    Result result = 1;
    // Detailed message for the result, especially useful for errors.
    string error_message = 2;

    // Enum detailing potential outcomes of the InvitePhoneNumber operation.
    enum Result {
        OK = 0; // Invitation was successfully sent.
        INVITE_COUNT_EXCEEDED = 1; // The inviter has exceeded their limit of invites.
        ALREADY_INVITED = 2; // The phone number has already been invited.
        USER_NOT_INVITED = 3; // The inviter is not eligible to send invites.
        INVALID_RECEIVER_PHONE_NUMBER = 4; // The provided phone number is invalid.
        INVITE_CODE_NOT_FOUND = 5; // The provided invite code does not exist.
        INVITE_CODE_REVOKED = 6; // The invite code has been revoked.
        INVITE_CODE_EXPIRED = 7; // The invite code has expired.
        RATE_LIMIT_EXCEEDED = 8; // The rate limit for invitations has been exceeded.
        TEMPORARILY_UNAVAILABLE = 9; // The service is temporarily unavailable.
    }
}

// Request to get the invitation status for a user.
message GetInvitationStatusRequest {
    // Identifier of the user whose invitation status is queried.
    common.v1.UserId user_id = 1 [(validate.rules).message.required = true];
}

// Response containing the invitation status for a user.
message GetInvitationStatusResponse {
    // Indicates the result of the GetInvitationStatus operation.
    Result result = 1;
    // The current status of the user's invitation.
    InvitationStatus status = 2;

    // Enum detailing potential results of the GetInvitationStatus request.
    enum Result {
        OK = 0; // Query was successful.
        UNAUTHORIZED = 1; // The requester lacks authorization to view the status.
        SERVICE_UNAVAILABLE = 2; // The service is temporarily unavailable.
    }
}

// Defines the structure and validation for an invite code.
message InviteCode {
    // The invite code, adhering to a specified pattern and length.
    string value = 1 [(validate.rules).string = {pattern: "^[A-z0-9]{3,32}$", min_len: 3, max_len: 32}];
}

// Enumerates the possible statuses of an invitation.
enum InvitationStatus {
    NOT_INVITED = 0; // The user has not received an invitation.
    INVITED = 1; // The user has been invited.
    REGISTERED = 2; // The user has registered on the platform.
    REVOKED = 3; // The invitation was revoked.
}

// Encapsulates a pagination token used in listing and querying operations.
message PageToken {
    // The token value, subject to length constraints for efficiency.
    bytes value = 1 [(validate.rules).bytes = {min_len: 1, max_len: 128}];
}

// Illustrative example of how PageToken could be utilized in listing invitations.
message ListInvitationsRequest {
    common.v1.UserId user_id = 1 [(validate.rules).message.required = true];
    // Optional token for pagination, indicating where to start listing.
    PageToken page_token = 2;
}

message ListInvitationsResponse {
    // A list of invitations, potentially part of a larger set.
    repeated Invitation invitations = 1;
    // Token to retrieve the next page of invitations, if available.
    PageToken next_page_token = 2;
}

// Placeholder for the structure of an Invitation, to demonstrate pagination.
message Invitation {
    // Details of an invitation would be defined here.
}
