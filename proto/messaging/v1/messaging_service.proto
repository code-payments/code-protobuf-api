syntax = "proto3";

package code.messaging.v1;

import "common/v1/model.proto";
import "transaction/v2/transaction_service.proto";
import "validate/validate.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/code-payments/code-protobuf-api/generated/go/messaging/v1;messaging";
option java_package = "com.codeinc.gen.messaging.v1";
option objc_class_prefix = "CPBMessagingV1";

service Messaging {
  rpc OpenMessageStream(OpenMessageStreamRequest) returns (stream OpenMessageStreamResponse);
  rpc OpenMessageStreamWithKeepAlive(stream OpenMessageStreamWithKeepAliveRequest) returns (stream OpenMessageStreamWithKeepAliveResponse);
  rpc PollMessages(PollMessagesRequest) returns (PollMessagesResponse);
  rpc AckMessages(AcknowledgeMessageRequest) returns (AckMessagesResponse);
  rpc SendMessage(SendMessageRequest) returns (SendMessageResponse);
}

message OpenMessageStreamRequest {
  RendezvousKey rendezvous_key = 1 [(validate.rules).message.required = true];
  Signature signature = 2; // Enhanced signature with additional security features.
  StreamOptions stream_options = 3; // Client-specified stream options.
}

message OpenMessageStreamResponse {
  repeated Message messages = 1 [(validate.rules).repeated.min_items = 1, .max_items = 1024];
  StreamHealth stream_health = 2; // Additional health indicators for the stream.
}

message OpenMessageStreamWithKeepAliveRequest {
  oneof requestOrPong {
    OpenMessageStreamRequest request = 1;
    ClientPong pong = 2;
  }
}

message OpenMessageStreamWithKeepAliveResponse {
  oneof responseOrPing {
    OpenMessageStreamResponse response = 1;
    ServerPing ping = 2;
  }
}

message PollMessagesRequest {
  RendezvousKey rendezvous_key = 1 [(validate.rules).message.required = true];
  Signature signature = 2; // Signature verification for polling request.
}

message PollMessagesResponse {
  repeated Message messages = 1 [(validate.rules).repeated.min_items = 0, .max_items = 1024];
}

message AcknowledgeMessageRequest {
  repeated MessageId message_ids = 1 [(validate.rules).repeated.min_items = 1, .max_items = 1024];
  google.protobuf.Timestamp up_to_timestamp = 2; // Optional: Acknowledge messages up to this timestamp.
}

message AckMessagesResponse {
  enum Result { OK = 0; }
  Result result = 1;
  ErrorMessage error = 2; // Provide detailed error information, if any.
}

message SendMessageRequest {
  Message message = 1 [(validate.rules).message.required = true];
  RendezvousKey rendezvous_key = 2 [(validate.rules).message.required = true];
  Signature signature = 3; // Enhanced signature verification for sending messages.
}

message SendMessageResponse {
  enum Result { OK = 0; NO_ACTIVE_STREAM = 1; }
  Result result = 1;
  MessageId message_id = 2; // Set if result == OK.
  ErrorMessage error = 3; // Provide detailed error information, if any.
}

message RendezvousKey {
  bytes value = 1 [(validate.rules).bytes.min_len = 32, .max_len = 32];
}

message MessageId {
  bytes value = 1 [(validate.rules).bytes.min_len = 16, .max_len = 16];
}

message ServerPing {
  google.protobuf.Timestamp timestamp = 1 [(validate.rules).timestamp.required = true];
  google.protobuf.Duration ping_delay = 2 [(validate.rules).duration.required = true];
}

message ClientPong {
  google.protobuf.Timestamp timestamp = 1 [(validate.rules).timestamp.required = true];
}

message Signature {
  bytes signature = 1;
  bytes payload = 2;
  google.protobuf.Timestamp timestamp = 3;
  bytes nonce = 4;
}

message StreamOptions {
  int32 max_batch_size = 1;
  google.protobuf.Duration max_delivery_interval = 2;
}

message StreamHealth {
  google.protobuf.Duration round_trip_time = 1;
  float error_rate = 2;
}

message ErrorMessage {
  enum ErrorCode {
    UNKNOWN = 0;
    INVALID_SIGNATURE = 1;
    MESSAGE_TOO_LARGE = 2;
    RATE_LIMIT_EXCEEDED = 3;
  }
  ErrorCode code = 1;
  string message = 2;
}

message Message {
  MessageId id = 1;
  Signature send_message_request_signature = 3;
  enum Priority {
    NORMAL = 0;
    HIGH = 1;
    URGENT = 2;
  }
  Priority priority = 4;
  
  oneof kind {
    RequestToGrabBill request_to_grab_bill = 2;
    RequestToReceiveBill request_to_receive_bill = 5;
    CodeScanned code_scanned = 6;
    ClientRejectedPayment client_rejected_payment = 7;
    IntentSubmitted intent_submitted = 8;
    WebhookCalled webhook_called = 9;
    RequestToLogin request_to_login = 10;
    ClientRejectedLogin client_rejected_login = 12;
    AirdropReceived airdrop_received = 4;
  }
}
